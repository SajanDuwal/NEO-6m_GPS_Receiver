
GPS_REceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007d78  08007d78  00017d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008208  08008208  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008208  08008208  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008208  08008208  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200001e0  080083f0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  080083f0  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e715  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002335  00000000  00000000  0002e91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d80  00000000  00000000  00032568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8c7  00000000  00000000  0004b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c68b  00000000  00000000  00058baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e523a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  000e5290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d5c 	.word	0x08007d5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007d5c 	.word	0x08007d5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <decodeGGA>:
 * @GGASTRUCT is the pointer to the GGA structure (in the GPS Structure)
 * @Returns 0 on success
 * @return 1,2 depending on where the return statement is executed, check function for more details
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8000b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b2c:	b08c      	sub	sp, #48	; 0x30
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <decodeGGA+0x17c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8000b3e:	e004      	b.n	8000b4a <decodeGGA+0x22>
		inx++; // 1st ','
 8000b40:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <decodeGGA+0x17c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a57      	ldr	r2, [pc, #348]	; (8000ca4 <decodeGGA+0x17c>)
 8000b48:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <decodeGGA+0x17c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b2c      	cmp	r3, #44	; 0x2c
 8000b58:	d1f2      	bne.n	8000b40 <decodeGGA+0x18>
	inx++;
 8000b5a:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <decodeGGA+0x17c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a50      	ldr	r2, [pc, #320]	; (8000ca4 <decodeGGA+0x17c>)
 8000b62:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000b64:	e004      	b.n	8000b70 <decodeGGA+0x48>
		inx++; //After time ','
 8000b66:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <decodeGGA+0x17c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ca4 <decodeGGA+0x17c>)
 8000b6e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000b70:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <decodeGGA+0x17c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b2c      	cmp	r3, #44	; 0x2c
 8000b7e:	d1f2      	bne.n	8000b66 <decodeGGA+0x3e>
	inx++;
 8000b80:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <decodeGGA+0x17c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <decodeGGA+0x17c>)
 8000b88:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000b8a:	e004      	b.n	8000b96 <decodeGGA+0x6e>
		inx++; // after latitude ','
 8000b8c:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <decodeGGA+0x17c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a44      	ldr	r2, [pc, #272]	; (8000ca4 <decodeGGA+0x17c>)
 8000b94:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <decodeGGA+0x17c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ba4:	d1f2      	bne.n	8000b8c <decodeGGA+0x64>
	inx++;
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <decodeGGA+0x17c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a3d      	ldr	r2, [pc, #244]	; (8000ca4 <decodeGGA+0x17c>)
 8000bae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000bb0:	e004      	b.n	8000bbc <decodeGGA+0x94>
		inx++; //After NS ','
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <decodeGGA+0x17c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <decodeGGA+0x17c>)
 8000bba:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <decodeGGA+0x17c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b2c      	cmp	r3, #44	; 0x2c
 8000bca:	d1f2      	bne.n	8000bb2 <decodeGGA+0x8a>
	inx++;
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <decodeGGA+0x17c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <decodeGGA+0x17c>)
 8000bd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000bd6:	e004      	b.n	8000be2 <decodeGGA+0xba>
		inx++; // After longitude ','
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <decodeGGA+0x17c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <decodeGGA+0x17c>)
 8000be0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <decodeGGA+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b2c      	cmp	r3, #44	; 0x2c
 8000bf0:	d1f2      	bne.n	8000bd8 <decodeGGA+0xb0>
	inx++;
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <decodeGGA+0x17c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <decodeGGA+0x17c>)
 8000bfa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000bfc:	e004      	b.n	8000c08 <decodeGGA+0xe0>
		inx++; //After EW ','
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <decodeGGA+0x17c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <decodeGGA+0x17c>)
 8000c06:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <decodeGGA+0x17c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b2c      	cmp	r3, #44	; 0x2c
 8000c16:	d1f2      	bne.n	8000bfe <decodeGGA+0xd6>
	inx++; // reach the character to identify the fix
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <decodeGGA+0x17c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <decodeGGA+0x17c>)
 8000c20:	6013      	str	r3, [r2, #0]

	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <decodeGGA+0x17c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b31      	cmp	r3, #49	; 0x31
 8000c30:	d00f      	beq.n	8000c52 <decodeGGA+0x12a>
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <decodeGGA+0x17c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b32      	cmp	r3, #50	; 0x32
 8000c40:	d007      	beq.n	8000c52 <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6')) {
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <decodeGGA+0x17c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b36      	cmp	r3, #54	; 0x36
 8000c50:	d106      	bne.n	8000c60 <decodeGGA+0x138>
		gga->isFixValid = 1;  // fix available
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	61da      	str	r2, [r3, #28]
		inx = 0; // reset the index
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <decodeGGA+0x17c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
	} else {
		gga->isFixValid = 0;
		return 1;
	}
	while (GGAbuffer[inx] != ',')
 8000c5e:	e009      	b.n	8000c74 <decodeGGA+0x14c>
		gga->isFixValid = 0;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
		return 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e2d3      	b.n	8001212 <decodeGGA+0x6ea>
		inx++; // 1st','
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <decodeGGA+0x17c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <decodeGGA+0x17c>)
 8000c72:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <decodeGGA+0x17c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2c      	cmp	r3, #44	; 0x2c
 8000c82:	d1f2      	bne.n	8000c6a <decodeGGA+0x142>

	/********* GET Time *************/
	// (Update the GMT offset at the top of this file)
	inx++;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <decodeGGA+0x17c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <decodeGGA+0x17c>)
 8000c8c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	220c      	movs	r2, #12
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 f966 	bl	8003f68 <memset>
	i = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') {
 8000ca0:	e016      	b.n	8000cd0 <decodeGGA+0x1a8>
 8000ca2:	bf00      	nop
 8000ca4:	200001fc 	.word	0x200001fc
		buffer[i] = GGAbuffer[inx];
 8000ca8:	4baf      	ldr	r3, [pc, #700]	; (8000f68 <decodeGGA+0x440>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	7819      	ldrb	r1, [r3, #0]
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	4413      	add	r3, r2
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
		i++;
 8000cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000cc6:	4ba8      	ldr	r3, [pc, #672]	; (8000f68 <decodeGGA+0x440>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4aa6      	ldr	r2, [pc, #664]	; (8000f68 <decodeGGA+0x440>)
 8000cce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8000cd0:	4ba5      	ldr	r3, [pc, #660]	; (8000f68 <decodeGGA+0x440>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b2c      	cmp	r3, #44	; 0x2c
 8000cde:	d1e3      	bne.n	8000ca8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000); // get the hours from the 6 digit number
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 f911 	bl	8003f0c <atoi>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a9f      	ldr	r2, [pc, #636]	; (8000f6c <decodeGGA+0x444>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1312      	asrs	r2, r2, #12
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4a9d      	ldr	r2, [pc, #628]	; (8000f70 <decodeGGA+0x448>)
 8000cfa:	6013      	str	r3, [r2, #0]
	min = ((atoi(buffer) / 100) % 100); // get the minutes from the 6 digit number
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 f903 	bl	8003f0c <atoi>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a9a      	ldr	r2, [pc, #616]	; (8000f74 <decodeGGA+0x44c>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1152      	asrs	r2, r2, #5
 8000d10:	17db      	asrs	r3, r3, #31
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	4b97      	ldr	r3, [pc, #604]	; (8000f74 <decodeGGA+0x44c>)
 8000d16:	fb83 1302 	smull	r1, r3, r3, r2
 8000d1a:	1159      	asrs	r1, r3, #5
 8000d1c:	17d3      	asrs	r3, r2, #31
 8000d1e:	1acb      	subs	r3, r1, r3
 8000d20:	2164      	movs	r1, #100	; 0x64
 8000d22:	fb01 f303 	mul.w	r3, r1, r3
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	4a93      	ldr	r2, [pc, #588]	; (8000f78 <decodeGGA+0x450>)
 8000d2a:	6013      	str	r3, [r2, #0]
	// for NPL Time
	//hr += 5;
	//min += 45;

	// adjust time.. this part still needs to be tested
	if (min > 59) {
 8000d2c:	4b92      	ldr	r3, [pc, #584]	; (8000f78 <decodeGGA+0x450>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b3b      	cmp	r3, #59	; 0x3b
 8000d32:	dd09      	ble.n	8000d48 <decodeGGA+0x220>
		min = min - 60;
 8000d34:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <decodeGGA+0x450>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b3c      	subs	r3, #60	; 0x3c
 8000d3a:	4a8f      	ldr	r2, [pc, #572]	; (8000f78 <decodeGGA+0x450>)
 8000d3c:	6013      	str	r3, [r2, #0]
		hr++;
 8000d3e:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <decodeGGA+0x448>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a8a      	ldr	r2, [pc, #552]	; (8000f70 <decodeGGA+0x448>)
 8000d46:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8000d48:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <decodeGGA+0x448>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da09      	bge.n	8000d64 <decodeGGA+0x23c>
		hr = 24 + hr;
 8000d50:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <decodeGGA+0x448>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3318      	adds	r3, #24
 8000d56:	4a86      	ldr	r2, [pc, #536]	; (8000f70 <decodeGGA+0x448>)
 8000d58:	6013      	str	r3, [r2, #0]
		daychange--;
 8000d5a:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <decodeGGA+0x454>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	4a86      	ldr	r2, [pc, #536]	; (8000f7c <decodeGGA+0x454>)
 8000d62:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8000d64:	4b82      	ldr	r3, [pc, #520]	; (8000f70 <decodeGGA+0x448>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b17      	cmp	r3, #23
 8000d6a:	dd09      	ble.n	8000d80 <decodeGGA+0x258>
		hr = hr - 24;
 8000d6c:	4b80      	ldr	r3, [pc, #512]	; (8000f70 <decodeGGA+0x448>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b18      	subs	r3, #24
 8000d72:	4a7f      	ldr	r2, [pc, #508]	; (8000f70 <decodeGGA+0x448>)
 8000d74:	6013      	str	r3, [r2, #0]
		daychange++;
 8000d76:	4b81      	ldr	r3, [pc, #516]	; (8000f7c <decodeGGA+0x454>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a7f      	ldr	r2, [pc, #508]	; (8000f7c <decodeGGA+0x454>)
 8000d7e:	6013      	str	r3, [r2, #0]
	}

	//store the time in the GGA structure
	gga->tim.hour = hr;
 8000d80:	4b7b      	ldr	r3, [pc, #492]	; (8000f70 <decodeGGA+0x448>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <decodeGGA+0x450>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer) % 100;
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 f8b9 	bl	8003f0c <atoi>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <decodeGGA+0x44c>)
 8000d9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000da2:	1159      	asrs	r1, r3, #5
 8000da4:	17d3      	asrs	r3, r2, #31
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	2164      	movs	r1, #100	; 0x64
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	6193      	str	r3, [r2, #24]

	/************** GET Latitude *********/
	inx++; // Reach the first number in the latitude
 8000db4:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <decodeGGA+0x440>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a6b      	ldr	r2, [pc, #428]	; (8000f68 <decodeGGA+0x440>)
 8000dbc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 f8ce 	bl	8003f68 <memset>
	i = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') {
 8000dd0:	e013      	b.n	8000dfa <decodeGGA+0x2d2>
		buffer[i] = GGAbuffer[inx];
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <decodeGGA+0x440>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	7819      	ldrb	r1, [r3, #0]
 8000dde:	f107 020c 	add.w	r2, r7, #12
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	4413      	add	r3, r2
 8000de6:	460a      	mov	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
		i++;
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	3301      	adds	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000df0:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <decodeGGA+0x440>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a5c      	ldr	r2, [pc, #368]	; (8000f68 <decodeGGA+0x440>)
 8000df8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8000dfa:	4b5b      	ldr	r3, [pc, #364]	; (8000f68 <decodeGGA+0x440>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b2c      	cmp	r3, #44	; 0x2c
 8000e08:	d1e3      	bne.n	8000dd2 <decodeGGA+0x2aa>
	}
	if (strlen(buffer) < 6)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f99e 	bl	8000150 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	d801      	bhi.n	8000e1e <decodeGGA+0x2f6>
		return 2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e1f9      	b.n	8001212 <decodeGGA+0x6ea>
	int16_t num = (atoi(buffer));
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 f872 	bl	8003f0c <atoi>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.'){
 8000e30:	e002      	b.n	8000e38 <decodeGGA+0x310>
		j++;
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	3301      	adds	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.'){
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b2e      	cmp	r3, #46	; 0x2e
 8000e44:	d1f5      	bne.n	8000e32 <decodeGGA+0x30a>
	}
	j++;
 8000e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e48:	3301      	adds	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer)) - j;
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff f97d 	bl	8000150 <strlen>
 8000e56:	4602      	mov	r2, r0
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	623b      	str	r3, [r7, #32]
	int dec = atoi((char*) buffer + j);
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	f107 020c 	add.w	r2, r7, #12
 8000e64:	4413      	add	r3, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 f850 	bl	8003f0c <atoi>
 8000e6c:	61f8      	str	r0, [r7, #28]
	float lat = (num / 100.0) + (dec / pow(10, (declen + 2)));
 8000e6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fac6 	bl	8000404 <__aeabi_i2d>
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b40      	ldr	r3, [pc, #256]	; (8000f80 <decodeGGA+0x458>)
 8000e7e:	f7ff fc55 	bl	800072c <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4690      	mov	r8, r2
 8000e88:	4699      	mov	r9, r3
 8000e8a:	69f8      	ldr	r0, [r7, #28]
 8000e8c:	f7ff faba 	bl	8000404 <__aeabi_i2d>
 8000e90:	4604      	mov	r4, r0
 8000e92:	460d      	mov	r5, r1
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	3302      	adds	r3, #2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fab3 	bl	8000404 <__aeabi_i2d>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	f04f 0000 	mov.w	r0, #0
 8000ea6:	4937      	ldr	r1, [pc, #220]	; (8000f84 <decodeGGA+0x45c>)
 8000ea8:	f005 ffc8 	bl	8006e3c <pow>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	f7ff fc3a 	bl	800072c <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	f7ff f954 	bl	800016c <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fddc 	bl	8000a88 <__aeabi_d2f>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	61bb      	str	r3, [r7, #24]
	gga->location.latitude = lat;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	601a      	str	r2, [r3, #0]
	inx++;
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <decodeGGA+0x440>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <decodeGGA+0x440>)
 8000ee2:	6013      	str	r3, [r2, #0]
	gga->location.NS = GGAbuffer[inx]; // save the N/s into the structure
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <decodeGGA+0x440>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	711a      	strb	r2, [r3, #4]

	/************** GET LONGITUDE ************/
	inx++;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <decodeGGA+0x440>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <decodeGGA+0x440>)
 8000efc:	6013      	str	r3, [r2, #0]
	inx++; // Reach the first number in the latitude
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <decodeGGA+0x440>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <decodeGGA+0x440>)
 8000f06:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 f829 	bl	8003f68 <memset>
	i = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') {
 8000f1a:	e013      	b.n	8000f44 <decodeGGA+0x41c>
		buffer[i] = GGAbuffer[inx];
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <decodeGGA+0x440>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
		i++;
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	3301      	adds	r3, #1
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <decodeGGA+0x440>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <decodeGGA+0x440>)
 8000f42:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <decodeGGA+0x440>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2c      	cmp	r3, #44	; 0x2c
 8000f52:	d1e3      	bne.n	8000f1c <decodeGGA+0x3f4>
	}
	num = (atoi(buffer));
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 ffd7 	bl	8003f0c <atoi>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] == '.') {
 8000f66:	e012      	b.n	8000f8e <decodeGGA+0x466>
 8000f68:	200001fc 	.word	0x200001fc
 8000f6c:	68db8bad 	.word	0x68db8bad
 8000f70:	20000200 	.word	0x20000200
 8000f74:	51eb851f 	.word	0x51eb851f
 8000f78:	20000204 	.word	0x20000204
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	40590000 	.word	0x40590000
 8000f84:	40240000 	.word	0x40240000
		j++;
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] == '.') {
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b2e      	cmp	r3, #46	; 0x2e
 8000f9a:	d0f5      	beq.n	8000f88 <decodeGGA+0x460>
	}
	j++;
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer)) - j;
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f8d2 	bl	8000150 <strlen>
 8000fac:	4602      	mov	r2, r0
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	623b      	str	r3, [r7, #32]
	dec = atoi((char*) buffer + j);
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	f107 020c 	add.w	r2, r7, #12
 8000fba:	4413      	add	r3, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 ffa5 	bl	8003f0c <atoi>
 8000fc2:	61f8      	str	r0, [r7, #28]
	lat = (num / 100.0) + (dec / pow(10, (declen + 2)));
 8000fc4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa1b 	bl	8000404 <__aeabi_i2d>
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b92      	ldr	r3, [pc, #584]	; (800121c <decodeGGA+0x6f4>)
 8000fd4:	f7ff fbaa 	bl	800072c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4690      	mov	r8, r2
 8000fde:	4699      	mov	r9, r3
 8000fe0:	69f8      	ldr	r0, [r7, #28]
 8000fe2:	f7ff fa0f 	bl	8000404 <__aeabi_i2d>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	460d      	mov	r5, r1
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	3302      	adds	r3, #2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa08 	bl	8000404 <__aeabi_i2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4988      	ldr	r1, [pc, #544]	; (8001220 <decodeGGA+0x6f8>)
 8000ffe:	f005 ff1d 	bl	8006e3c <pow>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff fb8f 	bl	800072c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4640      	mov	r0, r8
 8001014:	4649      	mov	r1, r9
 8001016:	f7ff f8a9 	bl	800016c <__adddf3>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd31 	bl	8000a88 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]
	gga->location.longitude = lat;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	609a      	str	r2, [r3, #8]
	inx++;
 8001030:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <decodeGGA+0x6fc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a7b      	ldr	r2, [pc, #492]	; (8001224 <decodeGGA+0x6fc>)
 8001038:	6013      	str	r3, [r2, #0]
	gga->location.EW = GGAbuffer[inx];
 800103a:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <decodeGGA+0x6fc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	731a      	strb	r2, [r3, #12]

//skip position fix

	inx++; // ',' after E/W
 800104a:	4b76      	ldr	r3, [pc, #472]	; (8001224 <decodeGGA+0x6fc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a74      	ldr	r2, [pc, #464]	; (8001224 <decodeGGA+0x6fc>)
 8001052:	6013      	str	r3, [r2, #0]
	inx++; // position fix
 8001054:	4b73      	ldr	r3, [pc, #460]	; (8001224 <decodeGGA+0x6fc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a72      	ldr	r2, [pc, #456]	; (8001224 <decodeGGA+0x6fc>)
 800105c:	6013      	str	r3, [r2, #0]
	inx++; // ', after position fix
 800105e:	4b71      	ldr	r3, [pc, #452]	; (8001224 <decodeGGA+0x6fc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a6f      	ldr	r2, [pc, #444]	; (8001224 <decodeGGA+0x6fc>)
 8001066:	6013      	str	r3, [r2, #0]

	/*********** number of satellites ******************/

	inx++;
 8001068:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <decodeGGA+0x6fc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a6d      	ldr	r2, [pc, #436]	; (8001224 <decodeGGA+0x6fc>)
 8001070:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	220c      	movs	r2, #12
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f002 ff74 	bl	8003f68 <memset>
	i = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') {
 8001084:	e013      	b.n	80010ae <decodeGGA+0x586>
		buffer[i] = GGAbuffer[inx];
 8001086:	4b67      	ldr	r3, [pc, #412]	; (8001224 <decodeGGA+0x6fc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	7819      	ldrb	r1, [r3, #0]
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	4413      	add	r3, r2
 800109a:	460a      	mov	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
		i++;
 800109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a0:	3301      	adds	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80010a4:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <decodeGGA+0x6fc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <decodeGGA+0x6fc>)
 80010ac:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <decodeGGA+0x6fc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b2c      	cmp	r3, #44	; 0x2c
 80010bc:	d1e3      	bne.n	8001086 <decodeGGA+0x55e>
	}
	gga->numofast = atoi(buffer);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 ff22 	bl	8003f0c <atoi>
 80010c8:	4602      	mov	r2, r0
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28

//skip HDOP
	inx++;
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <decodeGGA+0x6fc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a53      	ldr	r2, [pc, #332]	; (8001224 <decodeGGA+0x6fc>)
 80010d6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010d8:	e004      	b.n	80010e4 <decodeGGA+0x5bc>
		inx++;
 80010da:	4b52      	ldr	r3, [pc, #328]	; (8001224 <decodeGGA+0x6fc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <decodeGGA+0x6fc>)
 80010e2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <decodeGGA+0x6fc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b2c      	cmp	r3, #44	; 0x2c
 80010f2:	d1f2      	bne.n	80010da <decodeGGA+0x5b2>

//Altitude calculation
	inx++;
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <decodeGGA+0x6fc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a4a      	ldr	r2, [pc, #296]	; (8001224 <decodeGGA+0x6fc>)
 80010fc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	220c      	movs	r2, #12
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f002 ff2e 	bl	8003f68 <memset>
	i = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') {
 8001110:	e013      	b.n	800113a <decodeGGA+0x612>
		buffer[i] = GGAbuffer[inx];
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <decodeGGA+0x6fc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	7819      	ldrb	r1, [r3, #0]
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	4413      	add	r3, r2
 8001126:	460a      	mov	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
		i++;
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	3301      	adds	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <decodeGGA+0x6fc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <decodeGGA+0x6fc>)
 8001138:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <decodeGGA+0x6fc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b2c      	cmp	r3, #44	; 0x2c
 8001148:	d1e3      	bne.n	8001112 <decodeGGA+0x5ea>
	}
	num = (atoi(buffer));
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fedc 	bl	8003f0c <atoi>
 8001154:	4603      	mov	r3, r0
 8001156:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.'){
 800115c:	e002      	b.n	8001164 <decodeGGA+0x63c>
		j++;
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	3301      	adds	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.'){
 8001164:	f107 020c 	add.w	r2, r7, #12
 8001168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b2e      	cmp	r3, #46	; 0x2e
 8001170:	d1f5      	bne.n	800115e <decodeGGA+0x636>
	}
	j++;
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	3301      	adds	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer)) - j;
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4618      	mov	r0, r3
 800117e:	f7fe ffe7 	bl	8000150 <strlen>
 8001182:	4602      	mov	r2, r0
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	623b      	str	r3, [r7, #32]
	dec = atoi((char*) buffer + j);
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	4413      	add	r3, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f002 feba 	bl	8003f0c <atoi>
 8001198:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec / pow(10, (declen)));
 800119a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f930 	bl	8000404 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	69f8      	ldr	r0, [r7, #28]
 80011aa:	f7ff f92b 	bl	8000404 <__aeabi_i2d>
 80011ae:	4680      	mov	r8, r0
 80011b0:	4689      	mov	r9, r1
 80011b2:	6a38      	ldr	r0, [r7, #32]
 80011b4:	f7ff f926 	bl	8000404 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	f04f 0000 	mov.w	r0, #0
 80011c0:	4917      	ldr	r1, [pc, #92]	; (8001220 <decodeGGA+0x6f8>)
 80011c2:	f005 fe3b 	bl	8006e3c <pow>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4640      	mov	r0, r8
 80011cc:	4649      	mov	r1, r9
 80011ce:	f7ff faad 	bl	800072c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7fe ffc7 	bl	800016c <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc4f 	bl	8000a88 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	621a      	str	r2, [r3, #32]
	inx++;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <decodeGGA+0x6fc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <decodeGGA+0x6fc>)
 80011fc:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <decodeGGA+0x6fc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3730      	adds	r7, #48	; 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121c:	40590000 	.word	0x40590000
 8001220:	40240000 	.word	0x40240000
 8001224:	200001fc 	.word	0x200001fc

08001228 <decodeRMC>:

int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc) {
 8001228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800122c:	b090      	sub	sp, #64	; 0x40
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]

	inx = 0;
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <decodeRMC+0x258>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',')
 800123e:	e004      	b.n	800124a <decodeRMC+0x22>
		inx++;  // 1st  ,
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <decodeRMC+0x258>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a8e      	ldr	r2, [pc, #568]	; (8001480 <decodeRMC+0x258>)
 8001248:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800124a:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <decodeRMC+0x258>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b2c      	cmp	r3, #44	; 0x2c
 8001258:	d1f2      	bne.n	8001240 <decodeRMC+0x18>
	inx++;
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <decodeRMC+0x258>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a87      	ldr	r2, [pc, #540]	; (8001480 <decodeRMC+0x258>)
 8001262:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001264:	e004      	b.n	8001270 <decodeRMC+0x48>
		inx++; // after time ,
 8001266:	4b86      	ldr	r3, [pc, #536]	; (8001480 <decodeRMC+0x258>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a84      	ldr	r2, [pc, #528]	; (8001480 <decodeRMC+0x258>)
 800126e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001270:	4b83      	ldr	r3, [pc, #524]	; (8001480 <decodeRMC+0x258>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b2c      	cmp	r3, #44	; 0x2c
 800127e:	d1f2      	bne.n	8001266 <decodeRMC+0x3e>
	inx++;
 8001280:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <decodeRMC+0x258>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a7e      	ldr	r2, [pc, #504]	; (8001480 <decodeRMC+0x258>)
 8001288:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A') {
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <decodeRMC+0x258>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b41      	cmp	r3, #65	; 0x41
 8001298:	d10d      	bne.n	80012b6 <decodeRMC+0x8e>
		rmc->isValid = 1;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	615a      	str	r2, [r3, #20]
	} else {
		rmc->isValid = 0;
		return 1;
	}
	inx++;
 80012a0:	4b77      	ldr	r3, [pc, #476]	; (8001480 <decodeRMC+0x258>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a76      	ldr	r2, [pc, #472]	; (8001480 <decodeRMC+0x258>)
 80012a8:	6013      	str	r3, [r2, #0]
	inx++;
 80012aa:	4b75      	ldr	r3, [pc, #468]	; (8001480 <decodeRMC+0x258>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a73      	ldr	r2, [pc, #460]	; (8001480 <decodeRMC+0x258>)
 80012b2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80012b4:	e009      	b.n	80012ca <decodeRMC+0xa2>
		rmc->isValid = 0;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
		return 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	e1d5      	b.n	800166c <decodeRMC+0x444>
		inx++;   //after latitude
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <decodeRMC+0x258>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <decodeRMC+0x258>)
 80012c8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <decodeRMC+0x258>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b2c      	cmp	r3, #44	; 0x2c
 80012d8:	d1f2      	bne.n	80012c0 <decodeRMC+0x98>
	inx++;
 80012da:	4b69      	ldr	r3, [pc, #420]	; (8001480 <decodeRMC+0x258>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <decodeRMC+0x258>)
 80012e2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80012e4:	e004      	b.n	80012f0 <decodeRMC+0xc8>
		inx++; // afte NS
 80012e6:	4b66      	ldr	r3, [pc, #408]	; (8001480 <decodeRMC+0x258>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a64      	ldr	r2, [pc, #400]	; (8001480 <decodeRMC+0x258>)
 80012ee:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80012f0:	4b63      	ldr	r3, [pc, #396]	; (8001480 <decodeRMC+0x258>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b2c      	cmp	r3, #44	; 0x2c
 80012fe:	d1f2      	bne.n	80012e6 <decodeRMC+0xbe>
	inx++;
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <decodeRMC+0x258>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a5e      	ldr	r2, [pc, #376]	; (8001480 <decodeRMC+0x258>)
 8001308:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800130a:	e004      	b.n	8001316 <decodeRMC+0xee>
		inx++;	//after longitude
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <decodeRMC+0x258>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a5b      	ldr	r2, [pc, #364]	; (8001480 <decodeRMC+0x258>)
 8001314:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <decodeRMC+0x258>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b2c      	cmp	r3, #44	; 0x2c
 8001324:	d1f2      	bne.n	800130c <decodeRMC+0xe4>
	inx++;
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <decodeRMC+0x258>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a54      	ldr	r2, [pc, #336]	; (8001480 <decodeRMC+0x258>)
 800132e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001330:	e004      	b.n	800133c <decodeRMC+0x114>
		inx++; // after EW
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <decodeRMC+0x258>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <decodeRMC+0x258>)
 800133a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <decodeRMC+0x258>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b2c      	cmp	r3, #44	; 0x2c
 800134a:	d1f2      	bne.n	8001332 <decodeRMC+0x10a>

//get speed
	inx++;
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <decodeRMC+0x258>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a4b      	ldr	r2, [pc, #300]	; (8001480 <decodeRMC+0x258>)
 8001354:	6013      	str	r3, [r2, #0]
	i = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	220c      	movs	r2, #12
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fe00 	bl	8003f68 <memset>
	while (RMCbuffer[inx] != ',') {
 8001368:	e013      	b.n	8001392 <decodeRMC+0x16a>
		buffer[i] = RMCbuffer[inx];
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <decodeRMC+0x258>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	7819      	ldrb	r1, [r3, #0]
 8001376:	f107 0208 	add.w	r2, r7, #8
 800137a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
		i++;
 8001382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001384:	3301      	adds	r3, #1
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001388:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <decodeRMC+0x258>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a3c      	ldr	r2, [pc, #240]	; (8001480 <decodeRMC+0x258>)
 8001390:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <decodeRMC+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b2c      	cmp	r3, #44	; 0x2c
 80013a0:	d1e3      	bne.n	800136a <decodeRMC+0x142>
	}

	if (strlen(buffer) > 0) {
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d055      	beq.n	8001458 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fdab 	bl	8003f0c <atoi>
 80013b6:	4603      	mov	r3, r0
 80013b8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.'){
 80013be:	e002      	b.n	80013c6 <decodeRMC+0x19e>
			j++;
 80013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c2:	3301      	adds	r3, #1
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.'){
 80013c6:	f107 0208 	add.w	r2, r7, #8
 80013ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b2e      	cmp	r3, #46	; 0x2e
 80013d2:	d1f5      	bne.n	80013c0 <decodeRMC+0x198>
		}
		j++;
 80013d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d6:	3301      	adds	r3, #1
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer)) - j;
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4618      	mov	r0, r3
 80013e0:	f7fe feb6 	bl	8000150 <strlen>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi((char*) buffer + j);
 80013ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ee:	f107 0208 	add.w	r2, r7, #8
 80013f2:	4413      	add	r3, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fd89 	bl	8003f0c <atoi>
 80013fa:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec / pow(10, (declen)));
 80013fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe ffff 	bl	8000404 <__aeabi_i2d>
 8001406:	4604      	mov	r4, r0
 8001408:	460d      	mov	r5, r1
 800140a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800140c:	f7fe fffa 	bl	8000404 <__aeabi_i2d>
 8001410:	4680      	mov	r8, r0
 8001412:	4689      	mov	r9, r1
 8001414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001416:	f7fe fff5 	bl	8000404 <__aeabi_i2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4918      	ldr	r1, [pc, #96]	; (8001484 <decodeRMC+0x25c>)
 8001424:	f005 fd0a 	bl	8006e3c <pow>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4640      	mov	r0, r8
 800142e:	4649      	mov	r1, r9
 8001430:	f7ff f97c 	bl	800072c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7fe fe96 	bl	800016c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb1e 	bl	8000a88 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	e003      	b.n	8001460 <decodeRMC+0x238>
	} else {
		rmc->speed = 0;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
	}

	// get course
	inx++;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <decodeRMC+0x258>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <decodeRMC+0x258>)
 8001468:	6013      	str	r3, [r2, #0]
	i = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	220c      	movs	r2, #12
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fd76 	bl	8003f68 <memset>
	while (RMCbuffer[inx] != ',') {
 800147c:	e018      	b.n	80014b0 <decodeRMC+0x288>
 800147e:	bf00      	nop
 8001480:	200001fc 	.word	0x200001fc
 8001484:	40240000 	.word	0x40240000
		buffer[i] = RMCbuffer[inx];
 8001488:	4b7b      	ldr	r3, [pc, #492]	; (8001678 <decodeRMC+0x450>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	7819      	ldrb	r1, [r3, #0]
 8001494:	f107 0208 	add.w	r2, r7, #8
 8001498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149a:	4413      	add	r3, r2
 800149c:	460a      	mov	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
		i++;
 80014a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a2:	3301      	adds	r3, #1
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80014a6:	4b74      	ldr	r3, [pc, #464]	; (8001678 <decodeRMC+0x450>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a72      	ldr	r2, [pc, #456]	; (8001678 <decodeRMC+0x450>)
 80014ae:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 80014b0:	4b71      	ldr	r3, [pc, #452]	; (8001678 <decodeRMC+0x450>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b2c      	cmp	r3, #44	; 0x2c
 80014be:	d1e3      	bne.n	8001488 <decodeRMC+0x260>
	}

	if (strlen(buffer) > 0) {
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d055      	beq.n	8001576 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fd1c 	bl	8003f0c <atoi>
 80014d4:	4603      	mov	r3, r0
 80014d6:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 80014dc:	e002      	b.n	80014e4 <decodeRMC+0x2bc>
			j++;
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	3301      	adds	r3, #1
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 80014e4:	f107 0208 	add.w	r2, r7, #8
 80014e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b2e      	cmp	r3, #46	; 0x2e
 80014f0:	d1f5      	bne.n	80014de <decodeRMC+0x2b6>
		j++;
 80014f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f4:	3301      	adds	r3, #1
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer)) - j;
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe27 	bl	8000150 <strlen>
 8001502:	4602      	mov	r2, r0
 8001504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	61fb      	str	r3, [r7, #28]
		int dec = atoi((char*) buffer + j);
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	4413      	add	r3, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fcfa 	bl	8003f0c <atoi>
 8001518:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec / pow(10, (declen)));
 800151a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ff70 	bl	8000404 <__aeabi_i2d>
 8001524:	4604      	mov	r4, r0
 8001526:	460d      	mov	r5, r1
 8001528:	69b8      	ldr	r0, [r7, #24]
 800152a:	f7fe ff6b 	bl	8000404 <__aeabi_i2d>
 800152e:	4680      	mov	r8, r0
 8001530:	4689      	mov	r9, r1
 8001532:	69f8      	ldr	r0, [r7, #28]
 8001534:	f7fe ff66 	bl	8000404 <__aeabi_i2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	494e      	ldr	r1, [pc, #312]	; (800167c <decodeRMC+0x454>)
 8001542:	f005 fc7b 	bl	8006e3c <pow>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4640      	mov	r0, r8
 800154c:	4649      	mov	r1, r9
 800154e:	f7ff f8ed 	bl	800072c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7fe fe07 	bl	800016c <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa8f 	bl	8000a88 <__aeabi_d2f>
 800156a:	4603      	mov	r3, r0
 800156c:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	e003      	b.n	800157e <decodeRMC+0x356>
	} else {
		rmc->course = 0;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
	}

	//get Date
	inx++;
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <decodeRMC+0x450>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4a3c      	ldr	r2, [pc, #240]	; (8001678 <decodeRMC+0x450>)
 8001586:	6013      	str	r3, [r2, #0]
	i = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	220c      	movs	r2, #12
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fce7 	bl	8003f68 <memset>
	while (RMCbuffer[inx] != ',') {
 800159a:	e013      	b.n	80015c4 <decodeRMC+0x39c>
		buffer[i] = RMCbuffer[inx];
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <decodeRMC+0x450>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	7819      	ldrb	r1, [r3, #0]
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ae:	4413      	add	r3, r2
 80015b0:	460a      	mov	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
		i++;
 80015b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015b6:	3301      	adds	r3, #1
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <decodeRMC+0x450>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <decodeRMC+0x450>)
 80015c2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 80015c4:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <decodeRMC+0x450>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b2c      	cmp	r3, #44	; 0x2c
 80015d2:	d1e3      	bne.n	800159c <decodeRMC+0x374>
	}
	day = atoi(buffer) / 10000;
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fc97 	bl	8003f0c <atoi>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <decodeRMC+0x458>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	1312      	asrs	r2, r2, #12
 80015e8:	17db      	asrs	r3, r3, #31
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4a25      	ldr	r2, [pc, #148]	; (8001684 <decodeRMC+0x45c>)
 80015ee:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer) / 100) % 100;
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fc89 	bl	8003f0c <atoi>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <decodeRMC+0x460>)
 80015fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001602:	1152      	asrs	r2, r2, #5
 8001604:	17db      	asrs	r3, r3, #31
 8001606:	1ad2      	subs	r2, r2, r3
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <decodeRMC+0x460>)
 800160a:	fb83 1302 	smull	r1, r3, r3, r2
 800160e:	1159      	asrs	r1, r3, #5
 8001610:	17d3      	asrs	r3, r2, #31
 8001612:	1acb      	subs	r3, r1, r3
 8001614:	2164      	movs	r1, #100	; 0x64
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <decodeRMC+0x464>)
 800161e:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer) % 100;
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fc71 	bl	8003f0c <atoi>
 800162a:	4602      	mov	r2, r0
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <decodeRMC+0x460>)
 800162e:	fb83 1302 	smull	r1, r3, r3, r2
 8001632:	1159      	asrs	r1, r3, #5
 8001634:	17d3      	asrs	r3, r2, #31
 8001636:	1acb      	subs	r3, r1, r3
 8001638:	2164      	movs	r1, #100	; 0x64
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <decodeRMC+0x468>)
 8001642:	6013      	str	r3, [r2, #0]

	day = day + daychange;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <decodeRMC+0x45c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <decodeRMC+0x46c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <decodeRMC+0x45c>)
 8001650:	6013      	str	r3, [r2, #0]

	rmc->date.Day = day;
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <decodeRMC+0x45c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <decodeRMC+0x464>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <decodeRMC+0x468>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	609a      	str	r2, [r3, #8]

	return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3740      	adds	r7, #64	; 0x40
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001676:	bf00      	nop
 8001678:	200001fc 	.word	0x200001fc
 800167c:	40240000 	.word	0x40240000
 8001680:	68db8bad 	.word	0x68db8bad
 8001684:	20000208 	.word	0x20000208
 8001688:	51eb851f 	.word	0x51eb851f
 800168c:	2000020c 	.word	0x2000020c
 8001690:	20000210 	.word	0x20000210
 8001694:	20000214 	.word	0x20000214

08001698 <Ringbuf_init>:
ring_buffer *_rx_buffer;
ring_buffer *_tx_buffer;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void) {
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
	_rx_buffer = &rx_buffer;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <Ringbuf_init+0x38>)
 800169e:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <Ringbuf_init+0x3c>)
 80016a0:	601a      	str	r2, [r3, #0]
	_tx_buffer = &tx_buffer;
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <Ringbuf_init+0x40>)
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <Ringbuf_init+0x44>)
 80016a6:	601a      	str	r2, [r3, #0]

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <Ringbuf_init+0x48>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <Ringbuf_init+0x48>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <Ringbuf_init+0x48>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <Ringbuf_init+0x48>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	60da      	str	r2, [r3, #12]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200006b8 	.word	0x200006b8
 80016d4:	20000218 	.word	0x20000218
 80016d8:	200006b4 	.word	0x200006b4
 80016dc:	20000420 	.word	0x20000420
 80016e0:	200006bc 	.word	0x200006bc

080016e4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer) {
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]

	int i = (unsigned int) (buffer->head + 1) % UART_BUFFER_SIZE;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016fc:	60fb      	str	r3, [r7, #12]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != buffer->tail) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	429a      	cmp	r2, r3
 8001708:	d009      	beq.n	800171e <store_char+0x3a>
		buffer->buffer[buffer->head] = c;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	79f9      	ldrb	r1, [r7, #7]
 8001714:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <Uart_read>:
 return 1;
 else
 return -1;
 }
 */
int Uart_read(void) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
	// if the head isn't ahead of the tail, we don't have any characters
	if (_rx_buffer->head == _rx_buffer->tail) {
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <Uart_read+0x54>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <Uart_read+0x54>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800173e:	429a      	cmp	r2, r3
 8001740:	d102      	bne.n	8001748 <Uart_read+0x20>
		return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001746:	e013      	b.n	8001770 <Uart_read+0x48>
	} else {
		unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <Uart_read+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <Uart_read+0x54>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	71fb      	strb	r3, [r7, #7]
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <Uart_read+0x54>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <Uart_read+0x54>)
 8001764:	681b      	ldr	r3, [r3, #0]
				% UART_BUFFER_SIZE;
 8001766:	f3c2 0208 	ubfx	r2, r2, #0, #9
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 800176a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		return c;
 800176e:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200006b8 	.word	0x200006b8

08001780 <IsDataAvailable>:
	}
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void) {
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail)
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <IsDataAvailable+0x30>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <IsDataAvailable+0x30>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001796:	b29b      	uxth	r3, r3
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29b      	uxth	r3, r3
 800179c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017a0:	b29b      	uxth	r3, r3
			% UART_BUFFER_SIZE;
 80017a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200006b8 	.word	0x200006b8

080017b4 <Uart_flush>:
		buffertocopyinto[indx] = buffertocopyfrom[i];
		indx++;
	}
}

void Uart_flush(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer, '\0', UART_BUFFER_SIZE);
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <Uart_flush+0x2c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fbd0 	bl	8003f68 <memset>
	_rx_buffer->head = 0;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <Uart_flush+0x2c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	_rx_buffer->tail = 0;
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <Uart_flush+0x2c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200006b8 	.word	0x200006b8

080017e4 <Uart_peek>:

int Uart_peek() {
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	if (_rx_buffer->head == _rx_buffer->tail) {
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <Uart_peek+0x34>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <Uart_peek+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d102      	bne.n	8001802 <Uart_peek+0x1e>
		return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001800:	e006      	b.n	8001810 <Uart_peek+0x2c>
	} else {
		return _rx_buffer->buffer[_rx_buffer->tail];
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <Uart_peek+0x34>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <Uart_peek+0x34>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800180e:	5cd3      	ldrb	r3, [r2, r3]
	}
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	200006b8 	.word	0x200006b8

0800181c <Copy_upto>:
 * Must be used if you are sure that the data is being received
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto(char *string, char *buffertocopyinto) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	int so_far = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
	int len = strlen(string);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe fc90 	bl	8000150 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]

	again: while (Uart_peek() != string[so_far]) {
 8001838:	e01e      	b.n	8001878 <Copy_upto+0x5c>
		buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <Copy_upto+0xf8>)
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <Copy_upto+0xf8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	4403      	add	r3, r0
 800184c:	5c8a      	ldrb	r2, [r1, r2]
 800184e:	701a      	strb	r2, [r3, #0]
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <Copy_upto+0xf8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <Copy_upto+0xf8>)
 800185c:	681b      	ldr	r3, [r3, #0]
				% UART_BUFFER_SIZE;
 800185e:	f3c2 0208 	ubfx	r2, r2, #0, #9
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 8001862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3301      	adds	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
		while (!IsDataAvailable())
 800186c:	bf00      	nop
 800186e:	f7ff ff87 	bl	8001780 <IsDataAvailable>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0fa      	beq.n	800186e <Copy_upto+0x52>
	again: while (Uart_peek() != string[so_far]) {
 8001878:	f7ff ffb4 	bl	80017e4 <Uart_peek>
 800187c:	4601      	mov	r1, r0
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	4299      	cmp	r1, r3
 8001888:	d1d7      	bne.n	800183a <Copy_upto+0x1e>
			;

	}
	while (Uart_peek() == string[so_far]) {
 800188a:	e027      	b.n	80018dc <Copy_upto+0xc0>
		so_far++;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001892:	f7ff ff49 	bl	8001728 <Uart_read>
 8001896:	4601      	mov	r1, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	613a      	str	r2, [r7, #16]
 800189e:	461a      	mov	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
		if (so_far == len)
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d101      	bne.n	80018b4 <Copy_upto+0x98>
			return 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e02a      	b.n	800190a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <Copy_upto+0xfc>)
 80018b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018ba:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable()) && timeout)
 80018bc:	bf00      	nop
 80018be:	f7ff ff5f 	bl	8001780 <IsDataAvailable>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <Copy_upto+0xb4>
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <Copy_upto+0xfc>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f6      	bne.n	80018be <Copy_upto+0xa2>
			;
		if (timeout == 0)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <Copy_upto+0xfc>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <Copy_upto+0xc0>
			return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e016      	b.n	800190a <Copy_upto+0xee>
	while (Uart_peek() == string[so_far]) {
 80018dc:	f7ff ff82 	bl	80017e4 <Uart_peek>
 80018e0:	4601      	mov	r1, r0
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4299      	cmp	r1, r3
 80018ec:	d0ce      	beq.n	800188c <Copy_upto+0x70>
	}

	if (so_far != len) {
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d002      	beq.n	80018fc <Copy_upto+0xe0>
		so_far = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
		goto again;
 80018fa:	e79d      	b.n	8001838 <Copy_upto+0x1c>
	}

	if (so_far == len)
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d101      	bne.n	8001908 <Copy_upto+0xec>
		return 1;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <Copy_upto+0xee>
	else
		return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200006b8 	.word	0x200006b8
 8001918:	20000700 	.word	0x20000700

0800191c <Wait_for>:

/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for(char *string) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	int so_far = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
	int len = strlen(string);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7fe fc11 	bl	8000150 <strlen>
 800192e:	4603      	mov	r3, r0
 8001930:	60bb      	str	r3, [r7, #8]

	again: timeout = TIMEOUT_DEF;
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <Wait_for+0x108>)
 8001934:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001938:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable()) && timeout)
 800193a:	bf00      	nop
 800193c:	f7ff ff20 	bl	8001780 <IsDataAvailable>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <Wait_for+0x32>
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <Wait_for+0x108>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f6      	bne.n	800193c <Wait_for+0x20>
		;  // let's wait for the data to show up
	if (timeout == 0)
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <Wait_for+0x108>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <Wait_for+0x6e>
		return 0;
 8001956:	2300      	movs	r3, #0
 8001958:	e060      	b.n	8001a1c <Wait_for+0x100>
	while (Uart_peek() != string[so_far]) // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head) {
 800195a:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <Wait_for+0x10c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <Wait_for+0x10c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800196a:	429a      	cmp	r2, r3
 800196c:	d00b      	beq.n	8001986 <Wait_for+0x6a>
			_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <Wait_for+0x10c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <Wait_for+0x10c>)
 800197a:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 800197c:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 8001980:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001984:	e001      	b.n	800198a <Wait_for+0x6e>
		}

		else {
			return 0;
 8001986:	2300      	movs	r3, #0
 8001988:	e048      	b.n	8001a1c <Wait_for+0x100>
	while (Uart_peek() != string[so_far]) // peek in the rx_buffer to see if we get the string
 800198a:	f7ff ff2b 	bl	80017e4 <Uart_peek>
 800198e:	4601      	mov	r1, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4299      	cmp	r1, r3
 800199a:	d1de      	bne.n	800195a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string[so_far]) // if we got the first letter of the string
 800199c:	e027      	b.n	80019ee <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <Wait_for+0x10c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <Wait_for+0x10c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
				% UART_BUFFER_SIZE;  // increment the tail
 80019b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 80019b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len)
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d101      	bne.n	80019c6 <Wait_for+0xaa>
			return 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02a      	b.n	8001a1c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <Wait_for+0x108>)
 80019c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019cc:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable()) && timeout)
 80019ce:	bf00      	nop
 80019d0:	f7ff fed6 	bl	8001780 <IsDataAvailable>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <Wait_for+0xc6>
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <Wait_for+0x108>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f6      	bne.n	80019d0 <Wait_for+0xb4>
			;
		if (timeout == 0)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <Wait_for+0x108>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <Wait_for+0xd2>
			return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e016      	b.n	8001a1c <Wait_for+0x100>
	while (Uart_peek() == string[so_far]) // if we got the first letter of the string
 80019ee:	f7ff fef9 	bl	80017e4 <Uart_peek>
 80019f2:	4601      	mov	r1, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4299      	cmp	r1, r3
 80019fe:	d0ce      	beq.n	800199e <Wait_for+0x82>
	}

	if (so_far != len) {
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d002      	beq.n	8001a0e <Wait_for+0xf2>
		so_far = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
		goto again;
 8001a0c:	e791      	b.n	8001932 <Wait_for+0x16>
	}

	if (so_far == len)
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d101      	bne.n	8001a1a <Wait_for+0xfe>
		return 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <Wait_for+0x100>
	else
		return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000700 	.word	0x20000700
 8001a28:	200006b8 	.word	0x200006b8

08001a2c <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d013      	beq.n	8001a76 <Uart_isr+0x4a>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00e      	beq.n	8001a76 <Uart_isr+0x4a>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->SR; /* Read status register */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	73fb      	strb	r3, [r7, #15]
		store_char(c, _rx_buffer);  // store data in buffer
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <Uart_isr+0xb4>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe38 	bl	80016e4 <store_char>

		return;
 8001a74:	e031      	b.n	8001ada <Uart_isr+0xae>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02c      	beq.n	8001ada <Uart_isr+0xae>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d027      	beq.n	8001ada <Uart_isr+0xae>
		if (tx_buffer.head == tx_buffer.tail) {
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <Uart_isr+0xb8>)
 8001a8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <Uart_isr+0xb8>)
 8001a92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d108      	bne.n	8001aac <Uart_isr+0x80>
			// Buffer empty, so disable interrupts
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa8:	60da      	str	r2, [r3, #12]

			huart->Instance->SR;
			huart->Instance->DR = c;

		}
		return;
 8001aaa:	e015      	b.n	8001ad8 <Uart_isr+0xac>
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <Uart_isr+0xb8>)
 8001aae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <Uart_isr+0xb8>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	73bb      	strb	r3, [r7, #14]
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <Uart_isr+0xb8>)
 8001aba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <Uart_isr+0xb8>)
 8001ac6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			huart->Instance->SR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
			huart->Instance->DR = c;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	7bba      	ldrb	r2, [r7, #14]
 8001ad6:	605a      	str	r2, [r3, #4]
		return;
 8001ad8:	bf00      	nop
	}
}
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200006b8 	.word	0x200006b8
 8001ae4:	20000420 	.word	0x20000420

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

	if (htim == &htim1) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d147      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0xa0>
		mSEC++;
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a26      	ldr	r2, [pc, #152]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b00:	6013      	str	r3, [r2, #0]

		if (mSEC > 999) {
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b0a:	d30c      	bcc.n	8001b26 <HAL_TIM_PeriodElapsedCallback+0x3e>
			mSEC = 0;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
			s++;
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b1a:	6013      	str	r3, [r2, #0]
			count++;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b24:	6013      	str	r3, [r2, #0]
		}

		if (count == 10) {
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b0a      	cmp	r3, #10
 8001b2c:	d105      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x52>
			GPSFlag = 1;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
			count = 0;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
		}

		if (s > 59) {
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b3b      	cmp	r3, #59	; 0x3b
 8001b40:	d908      	bls.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x6c>
			s = 0;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
			m++;
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b52:	701a      	strb	r2, [r3, #0]
		}

		if (m > 59) {
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b3b      	cmp	r3, #59	; 0x3b
 8001b5a:	d908      	bls.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x86>
			m = 0;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
			h++;
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b6c:	701a      	strb	r2, [r3, #0]
		}

		if (h > 23) {
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b17      	cmp	r3, #23
 8001b74:	d908      	bls.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0xa0>
			h = 0;
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			m = 0;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			s = 0;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000834 	.word	0x20000834
 8001b98:	20000634 	.word	0x20000634
 8001b9c:	20000638 	.word	0x20000638
 8001ba0:	20000640 	.word	0x20000640
 8001ba4:	20000630 	.word	0x20000630
 8001ba8:	2000063c 	.word	0x2000063c
 8001bac:	2000063d 	.word	0x2000063d

08001bb0 <myDebug>:

void myDebug(const char *fmt, ...) {
 8001bb0:	b40f      	push	{r0, r1, r2, r3}
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	2164      	movs	r1, #100	; 0x64
 8001bc4:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <myDebug+0x40>)
 8001bc6:	f002 ff13 	bl	80049f0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <myDebug+0x40>)
 8001bcc:	f000 f814 	bl	8001bf8 <bufferSize>
 8001bd0:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	4905      	ldr	r1, [pc, #20]	; (8001bf0 <myDebug+0x40>)
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <myDebug+0x44>)
 8001bde:	f002 f82a 	bl	8003c36 <HAL_UART_Transmit>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bec:	b004      	add	sp, #16
 8001bee:	4770      	bx	lr
 8001bf0:	20000644 	.word	0x20000644
 8001bf4:	2000087c 	.word	0x2000087c

08001bf8 <bufferSize>:

int bufferSize(char *buffer) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8001c04:	e002      	b.n	8001c0c <bufferSize+0x14>
		i++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f6      	bne.n	8001c06 <bufferSize+0xe>
	return i;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <getGPSData>:

void getGPSData() {
 8001c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c28:	b099      	sub	sp, #100	; 0x64
 8001c2a:	af0e      	add	r7, sp, #56	; 0x38

	if (Wait_for("RMC") == 1) {
 8001c2c:	488f      	ldr	r0, [pc, #572]	; (8001e6c <getGPSData+0x248>)
 8001c2e:	f7ff fe75 	bl	800191c <Wait_for>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d133      	bne.n	8001ca0 <getGPSData+0x7c>
		Copy_upto("*", RMC);
 8001c38:	498d      	ldr	r1, [pc, #564]	; (8001e70 <getGPSData+0x24c>)
 8001c3a:	488e      	ldr	r0, [pc, #568]	; (8001e74 <getGPSData+0x250>)
 8001c3c:	f7ff fdee 	bl	800181c <Copy_upto>
//		for (int i = 0; i < sizeof(RMC); i++) {
//			myDebug("%c", RMC[i]);
//		}
//		myDebug("\r\n");

		int inx = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
		while (RMC[inx] != ',')
 8001c44:	e002      	b.n	8001c4c <getGPSData+0x28>
			inx++;  // 1st  ,
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
		while (RMC[inx] != ',')
 8001c4c:	4a88      	ldr	r2, [pc, #544]	; (8001e70 <getGPSData+0x24c>)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b2c      	cmp	r3, #44	; 0x2c
 8001c56:	d1f6      	bne.n	8001c46 <getGPSData+0x22>
		inx++;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
		while (RMC[inx] != ',')
 8001c5e:	e002      	b.n	8001c66 <getGPSData+0x42>
			inx++; // after time ,
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	3301      	adds	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
		while (RMC[inx] != ',')
 8001c66:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <getGPSData+0x24c>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c70:	d1f6      	bne.n	8001c60 <getGPSData+0x3c>
		inx++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
		if (RMC[inx] == 'A') {
 8001c78:	4a7d      	ldr	r2, [pc, #500]	; (8001e70 <getGPSData+0x24c>)
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b41      	cmp	r3, #65	; 0x41
 8001c82:	d10d      	bne.n	8001ca0 <getGPSData+0x7c>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0)
 8001c84:	497c      	ldr	r1, [pc, #496]	; (8001e78 <getGPSData+0x254>)
 8001c86:	487a      	ldr	r0, [pc, #488]	; (8001e70 <getGPSData+0x24c>)
 8001c88:	f7ff face 	bl	8001228 <decodeRMC>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <getGPSData+0x76>
				flagRMC = 2;  // 2 indicates the data is valid
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <getGPSData+0x258>)
 8001c94:	2202      	movs	r2, #2
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e002      	b.n	8001ca0 <getGPSData+0x7c>
			else
				flagRMC = 1;  // 1 indicates the data is invalid
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <getGPSData+0x258>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
		}
		//myDebug("$\r\n");
	}

	if (Wait_for("GGA") == 1) { // if 'GGA' detected then returns 1
 8001ca0:	4877      	ldr	r0, [pc, #476]	; (8001e80 <getGPSData+0x25c>)
 8001ca2:	f7ff fe3b 	bl	800191c <Wait_for>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d167      	bne.n	8001d7c <getGPSData+0x158>
		Copy_upto("*", GGA);
 8001cac:	4975      	ldr	r1, [pc, #468]	; (8001e84 <getGPSData+0x260>)
 8001cae:	4871      	ldr	r0, [pc, #452]	; (8001e74 <getGPSData+0x250>)
 8001cb0:	f7ff fdb4 	bl	800181c <Copy_upto>
//		for (int i = 0; i < sizeof(GGA); i++) {
//			myDebug("%c", GGA[i]);
//		}
//		myDebug("\r\n");

		int inx = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001cb8:	e002      	b.n	8001cc0 <getGPSData+0x9c>
			inx++; // 1st ','
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001cc0:	4a70      	ldr	r2, [pc, #448]	; (8001e84 <getGPSData+0x260>)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b2c      	cmp	r3, #44	; 0x2c
 8001cca:	d1f6      	bne.n	8001cba <getGPSData+0x96>
		inx++;
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001cd2:	e002      	b.n	8001cda <getGPSData+0xb6>
			inx++; //After time ','
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001cda:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <getGPSData+0x260>)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b2c      	cmp	r3, #44	; 0x2c
 8001ce4:	d1f6      	bne.n	8001cd4 <getGPSData+0xb0>
		inx++;
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001cec:	e002      	b.n	8001cf4 <getGPSData+0xd0>
			inx++; // after latitude ','
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001cf4:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <getGPSData+0x260>)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b2c      	cmp	r3, #44	; 0x2c
 8001cfe:	d1f6      	bne.n	8001cee <getGPSData+0xca>
		inx++;
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	3301      	adds	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001d06:	e002      	b.n	8001d0e <getGPSData+0xea>
			inx++; //After NS ','
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <getGPSData+0x260>)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b2c      	cmp	r3, #44	; 0x2c
 8001d18:	d1f6      	bne.n	8001d08 <getGPSData+0xe4>
		inx++;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001d20:	e002      	b.n	8001d28 <getGPSData+0x104>
			inx++; // After longitude ','
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	3301      	adds	r3, #1
 8001d26:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001d28:	4a56      	ldr	r2, [pc, #344]	; (8001e84 <getGPSData+0x260>)
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b2c      	cmp	r3, #44	; 0x2c
 8001d32:	d1f6      	bne.n	8001d22 <getGPSData+0xfe>
		inx++;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	3301      	adds	r3, #1
 8001d38:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001d3a:	e002      	b.n	8001d42 <getGPSData+0x11e>
			inx++; //After EW ','
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	623b      	str	r3, [r7, #32]
		while (GGA[inx] != ',')
 8001d42:	4a50      	ldr	r2, [pc, #320]	; (8001e84 <getGPSData+0x260>)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001d4c:	d1f6      	bne.n	8001d3c <getGPSData+0x118>
		inx++; // reach the character to identify the fix
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	3301      	adds	r3, #1
 8001d52:	623b      	str	r3, [r7, #32]

		if (GGA[inx] == '1') {
 8001d54:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <getGPSData+0x260>)
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	4413      	add	r3, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b31      	cmp	r3, #49	; 0x31
 8001d5e:	d10d      	bne.n	8001d7c <getGPSData+0x158>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0)
 8001d60:	4949      	ldr	r1, [pc, #292]	; (8001e88 <getGPSData+0x264>)
 8001d62:	4848      	ldr	r0, [pc, #288]	; (8001e84 <getGPSData+0x260>)
 8001d64:	f7fe fee0 	bl	8000b28 <decodeGGA>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <getGPSData+0x152>
				flagGGA = 2;  // 2 indicates the data is valid
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <getGPSData+0x268>)
 8001d70:	2202      	movs	r2, #2
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e002      	b.n	8001d7c <getGPSData+0x158>
			else
				flagGGA = 1;  // 1 indicates the data is invalid
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <getGPSData+0x268>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
		}
		//myDebug("*\r\n");
	}

	if ((flagGGA == 2) | (flagRMC == 2)) {
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <getGPSData+0x268>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <getGPSData+0x258>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d048      	beq.n	8001e32 <getGPSData+0x20e>

		sprintf(GPSBuffer, "%02d%02d%02d,%02d%02d%02d,%.2f%c,%.2f%c,%.2f",
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <getGPSData+0x264>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <getGPSData+0x264>)
 8001da8:	6959      	ldr	r1, [r3, #20]
 8001daa:	61b9      	str	r1, [r7, #24]
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <getGPSData+0x264>)
 8001dae:	699e      	ldr	r6, [r3, #24]
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <getGPSData+0x264>)
 8001db2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001db4:	6178      	str	r0, [r7, #20]
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <getGPSData+0x264>)
 8001db8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001dba:	613c      	str	r4, [r7, #16]
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <getGPSData+0x264>)
 8001dbe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001dc0:	60fd      	str	r5, [r7, #12]
				gpsData.ggastruct.tim.sec,

				gpsData.rmcstruct.date.Day, gpsData.rmcstruct.date.Mon,
				gpsData.rmcstruct.date.Yr,

				gpsData.ggastruct.location.latitude,
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <getGPSData+0x264>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
		sprintf(GPSBuffer, "%02d%02d%02d,%02d%02d%02d,%.2f%c,%.2f%c,%.2f",
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb2e 	bl	8000428 <__aeabi_f2d>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	460d      	mov	r5, r1
				gpsData.ggastruct.location.NS,
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <getGPSData+0x264>)
 8001dd2:	791b      	ldrb	r3, [r3, #4]
		sprintf(GPSBuffer, "%02d%02d%02d,%02d%02d%02d,%.2f%c,%.2f%c,%.2f",
 8001dd4:	60bb      	str	r3, [r7, #8]
				gpsData.ggastruct.location.longitude,
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <getGPSData+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
		sprintf(GPSBuffer, "%02d%02d%02d,%02d%02d%02d,%.2f%c,%.2f%c,%.2f",
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb24 	bl	8000428 <__aeabi_f2d>
 8001de0:	4680      	mov	r8, r0
 8001de2:	4689      	mov	r9, r1
				gpsData.ggastruct.location.EW,
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <getGPSData+0x264>)
 8001de6:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(GPSBuffer, "%02d%02d%02d,%02d%02d%02d,%.2f%c,%.2f%c,%.2f",
 8001de8:	607b      	str	r3, [r7, #4]

				gpsData.rmcstruct.speed);
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <getGPSData+0x264>)
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(GPSBuffer, "%02d%02d%02d,%02d%02d%02d,%.2f%c,%.2f%c,%.2f",
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb1a 	bl	8000428 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8001e00:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	9206      	str	r2, [sp, #24]
 8001e08:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001e0c:	68fd      	ldr	r5, [r7, #12]
 8001e0e:	9503      	str	r5, [sp, #12]
 8001e10:	693c      	ldr	r4, [r7, #16]
 8001e12:	9402      	str	r4, [sp, #8]
 8001e14:	6978      	ldr	r0, [r7, #20]
 8001e16:	9001      	str	r0, [sp, #4]
 8001e18:	9600      	str	r6, [sp, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	491c      	ldr	r1, [pc, #112]	; (8001e90 <getGPSData+0x26c>)
 8001e20:	481c      	ldr	r0, [pc, #112]	; (8001e94 <getGPSData+0x270>)
 8001e22:	f002 fd09 	bl	8004838 <siprintf>

		myDebug(GPSBuffer);
 8001e26:	481b      	ldr	r0, [pc, #108]	; (8001e94 <getGPSData+0x270>)
 8001e28:	f7ff fec2 	bl	8001bb0 <myDebug>
		myDebug("\r\n");
 8001e2c:	481a      	ldr	r0, [pc, #104]	; (8001e98 <getGPSData+0x274>)
 8001e2e:	f7ff febf 	bl	8001bb0 <myDebug>
	}

	flagGGA = 0;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <getGPSData+0x268>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
	flagRMC = 0;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <getGPSData+0x258>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
	memset(RMC, '\0', sizeof(RMC));
 8001e3e:	2264      	movs	r2, #100	; 0x64
 8001e40:	2100      	movs	r1, #0
 8001e42:	480b      	ldr	r0, [pc, #44]	; (8001e70 <getGPSData+0x24c>)
 8001e44:	f002 f890 	bl	8003f68 <memset>
	memset(GGA, '\0', sizeof(GGA));
 8001e48:	2264      	movs	r2, #100	; 0x64
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <getGPSData+0x260>)
 8001e4e:	f002 f88b 	bl	8003f68 <memset>
	memset(GPSBuffer, '\0', sizeof(GPSBuffer));
 8001e52:	221f      	movs	r2, #31
 8001e54:	2100      	movs	r1, #0
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <getGPSData+0x270>)
 8001e58:	f002 f886 	bl	8003f68 <memset>
	Uart_flush();
 8001e5c:	f7ff fcaa 	bl	80017b4 <Uart_flush>
}
 8001e60:	bf00      	nop
 8001e62:	372c      	adds	r7, #44	; 0x2c
 8001e64:	46bd      	mov	sp, r7
 8001e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e6a:	bf00      	nop
 8001e6c:	08007d78 	.word	0x08007d78
 8001e70:	20000704 	.word	0x20000704
 8001e74:	08007d7c 	.word	0x08007d7c
 8001e78:	20000818 	.word	0x20000818
 8001e7c:	2000062c 	.word	0x2000062c
 8001e80:	08007d80 	.word	0x08007d80
 8001e84:	20000788 	.word	0x20000788
 8001e88:	200007ec 	.word	0x200007ec
 8001e8c:	20000628 	.word	0x20000628
 8001e90:	08007d84 	.word	0x08007d84
 8001e94:	20000768 	.word	0x20000768
 8001e98:	08007db4 	.word	0x08007db4

08001e9c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ea0:	f000 fb50 	bl	8002544 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ea4:	f000 f824 	bl	8001ef0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea8:	f000 f90c 	bl	80020c4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001eac:	f000 f8b6 	bl	800201c <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8001eb0:	f000 f864 	bl	8001f7c <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001eb4:	f000 f8dc 	bl	8002070 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <main+0x4c>)
 8001eba:	f001 fac5 	bl	8003448 <HAL_TIM_Base_Start_IT>

	Ringbuf_init();
 8001ebe:	f7ff fbeb 	bl	8001698 <Ringbuf_init>
	HAL_Delay(500);
 8001ec2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec6:	f000 fb9f 	bl	8002608 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (GPSFlag) {
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <main+0x50>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0fb      	beq.n	8001eca <main+0x2e>
			getGPSData();
 8001ed2:	f7ff fea7 	bl	8001c24 <getGPSData>
			HAL_Delay(2000);
 8001ed6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001eda:	f000 fb95 	bl	8002608 <HAL_Delay>
			GPSFlag = 0;
 8001ede:	4b03      	ldr	r3, [pc, #12]	; (8001eec <main+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
		if (GPSFlag) {
 8001ee4:	e7f1      	b.n	8001eca <main+0x2e>
 8001ee6:	bf00      	nop
 8001ee8:	20000834 	.word	0x20000834
 8001eec:	20000630 	.word	0x20000630

08001ef0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b090      	sub	sp, #64	; 0x40
 8001ef4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ef6:	f107 0318 	add.w	r3, r7, #24
 8001efa:	2228      	movs	r2, #40	; 0x28
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 f832 	bl	8003f68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f20:	2301      	movs	r3, #1
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f24:	2302      	movs	r3, #2
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fe1b 	bl	8002b74 <HAL_RCC_OscConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <SystemClock_Config+0x58>
		Error_Handler();
 8001f44:	f000 f8e0 	bl	8002108 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f48:	230f      	movs	r3, #15
 8001f4a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f58:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2102      	movs	r1, #2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 f886 	bl	8003074 <HAL_RCC_ClockConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0x82>
		Error_Handler();
 8001f6e:	f000 f8cb 	bl	8002108 <Error_Handler>
	}
}
 8001f72:	bf00      	nop
 8001f74:	3740      	adds	r7, #64	; 0x40
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f90:	463b      	mov	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_TIM1_Init+0x98>)
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <MX_TIM1_Init+0x9c>)
 8001f9c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fa0:	2247      	movs	r2, #71	; 0x47
 8001fa2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001fc4:	4813      	ldr	r0, [pc, #76]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fc6:	f001 f9ef 	bl	80033a8 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x58>
		Error_Handler();
 8001fd0:	f000 f89a 	bl	8002108 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <MX_TIM1_Init+0x98>)
 8001fe2:	f001 fb8b 	bl	80036fc <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001fec:	f000 f88c 	bl	8002108 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_TIM1_Init+0x98>)
 8001ffe:	f001 fd5d 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002008:	f000 f87e 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000834 	.word	0x20000834
 8002018:	40012c00 	.word	0x40012c00

0800201c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <MX_USART1_UART_Init+0x50>)
 8002024:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002028:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800202c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_USART1_UART_Init+0x4c>)
 8002054:	f001 fda2 	bl	8003b9c <HAL_UART_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800205e:	f000 f853 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200006bc 	.word	0x200006bc
 800206c:	40013800 	.word	0x40013800

08002070 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <MX_USART2_UART_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a8:	f001 fd78 	bl	8003b9c <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80020b2:	f000 f829 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000087c 	.word	0x2000087c
 80020c0:	40004400 	.word	0x40004400

080020c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_GPIO_Init+0x40>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <MX_GPIO_Init+0x40>)
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	6193      	str	r3, [r2, #24]
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_GPIO_Init+0x40>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_GPIO_Init+0x40>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <MX_GPIO_Init+0x40>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <MX_GPIO_Init+0x40>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000

08002108 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002110:	e7fe      	b.n	8002110 <Error_Handler+0x8>
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_MspInit+0x5c>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_MspInit+0x5c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6193      	str	r3, [r2, #24]
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_MspInit+0x5c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x5c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x5c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x5c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_MspInit+0x60>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_MspInit+0x60>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d113      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_TIM_Base_MspInit+0x48>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <HAL_TIM_Base_MspInit+0x48>)
 8002190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002194:	6193      	str	r3, [r2, #24]
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_Base_MspInit+0x48>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2019      	movs	r0, #25
 80021a8:	f000 fb29 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021ac:	2019      	movs	r0, #25
 80021ae:	f000 fb42 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_UART_MspInit+0x108>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d13a      	bne.n	800225a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e4:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a39      	ldr	r2, [pc, #228]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 80021ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	4619      	mov	r1, r3
 8002228:	482a      	ldr	r0, [pc, #168]	; (80022d4 <HAL_UART_MspInit+0x110>)
 800222a:	f000 fb1f 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	4619      	mov	r1, r3
 8002242:	4824      	ldr	r0, [pc, #144]	; (80022d4 <HAL_UART_MspInit+0x110>)
 8002244:	f000 fb12 	bl	800286c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	2025      	movs	r0, #37	; 0x25
 800224e:	f000 fad6 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002252:	2025      	movs	r0, #37	; 0x25
 8002254:	f000 faef 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002258:	e034      	b.n	80022c4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <HAL_UART_MspInit+0x114>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d12f      	bne.n	80022c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 800226a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_UART_MspInit+0x10c>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002294:	2304      	movs	r3, #4
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	4619      	mov	r1, r3
 80022a6:	480b      	ldr	r0, [pc, #44]	; (80022d4 <HAL_UART_MspInit+0x110>)
 80022a8:	f000 fae0 	bl	800286c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022ac:	2308      	movs	r3, #8
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0318 	add.w	r3, r7, #24
 80022bc:	4619      	mov	r1, r3
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_UART_MspInit+0x110>)
 80022c0:	f000 fad4 	bl	800286c <HAL_GPIO_Init>
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010800 	.word	0x40010800
 80022d8:	40004400 	.word	0x40004400

080022dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80022e0:	e7fe      	b.n	80022e0 <NMI_Handler+0x4>

080022e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <HardFault_Handler+0x4>

080022e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <MemManage_Handler+0x4>

080022ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <BusFault_Handler+0x4>

080022f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <UsageFault_Handler+0x4>

080022fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timeout > 0)
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <SysTick_Handler+0x20>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <SysTick_Handler+0x18>
		timeout--;
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Handler+0x20>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <SysTick_Handler+0x20>)
 8002336:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002338:	f000 f94a 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000700 	.word	0x20000700

08002344 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <TIM1_UP_IRQHandler+0x10>)
 800234a:	f001 f8cf 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000834 	.word	0x20000834

08002358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <USART1_IRQHandler+0x10>)
 800235e:	f7ff fb65 	bl	8001a2c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200006bc 	.word	0x200006bc

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
	return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <_kill>:

int _kill(int pid, int sig)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002384:	f001 fdc6 	bl	8003f14 <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	2216      	movs	r2, #22
 800238c:	601a      	str	r2, [r3, #0]
	return -1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_exit>:

void _exit (int status)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffe7 	bl	800237a <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ac:	e7fe      	b.n	80023ac <_exit+0x12>

080023ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e00a      	b.n	80023d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023c0:	f3af 8000 	nop.w
 80023c4:	4601      	mov	r1, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	60ba      	str	r2, [r7, #8]
 80023cc:	b2ca      	uxtb	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbf0      	blt.n	80023c0 <_read+0x12>
	}

return len;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e009      	b.n	800240e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbf1      	blt.n	80023fa <_write+0x12>
	}
	return len;
 8002416:	687b      	ldr	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_close>:

int _close(int file)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	return -1;
 8002428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002446:	605a      	str	r2, [r3, #4]
	return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_isatty>:

int _isatty(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <_sbrk+0x5c>)
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <_sbrk+0x60>)
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <_sbrk+0x64>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <_sbrk+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b0:	f001 fd30 	bl	8003f14 <__errno>
 80024b4:	4603      	mov	r3, r0
 80024b6:	220c      	movs	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024be:	e009      	b.n	80024d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <_sbrk+0x64>)
 80024d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20005000 	.word	0x20005000
 80024e0:	00000400 	.word	0x00000400
 80024e4:	200006a8 	.word	0x200006a8
 80024e8:	200008d8 	.word	0x200008d8

080024ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 80024f8:	f7ff fff8 	bl	80024ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024fe:	490c      	ldr	r1, [pc, #48]	; (8002530 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002504:	e002      	b.n	800250c <LoopCopyDataInit>

08002506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250a:	3304      	adds	r3, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800250c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002510:	d3f9      	bcc.n	8002506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002514:	4c09      	ldr	r4, [pc, #36]	; (800253c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002518:	e001      	b.n	800251e <LoopFillZerobss>

0800251a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800251c:	3204      	adds	r2, #4

0800251e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002520:	d3fb      	bcc.n	800251a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002522:	f001 fcfd 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002526:	f7ff fcb9 	bl	8001e9c <main>
  bx lr
 800252a:	4770      	bx	lr
  ldr r0, =_sdata
 800252c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002530:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002534:	08008210 	.word	0x08008210
  ldr r2, =_sbss
 8002538:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800253c:	200008d4 	.word	0x200008d4

08002540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC1_2_IRQHandler>
	...

08002544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_Init+0x28>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_Init+0x28>)
 800254e:	f043 0310 	orr.w	r3, r3, #16
 8002552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 f947 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255a:	200f      	movs	r0, #15
 800255c:	f000 f808 	bl	8002570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002560:	f7ff fdd8 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x54>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f95f 	bl	8002852 <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ac:	f000 f927 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_InitTick+0x5c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x1c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x20>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_IncTick+0x20>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000008 	.word	0x20000008
 80025f0:	200008c0 	.word	0x200008c0

080025f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_GetTick+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	200008c0 	.word	0x200008c0

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff fff0 	bl	80025f4 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262e:	bf00      	nop
 8002630:	f7ff ffe0 	bl	80025f4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000008 	.word	0x20000008

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <__NVIC_EnableIRQ+0x34>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c8:	f7ff ff90 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff2d 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff42 	bl	8002698 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff90 	bl	8002740 <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5f 	bl	80026ec <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff35 	bl	80026b4 <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287e:	e169      	b.n	8002b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002880:	2201      	movs	r2, #1
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8158 	bne.w	8002b4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4a9a      	ldr	r2, [pc, #616]	; (8002b0c <HAL_GPIO_Init+0x2a0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d05e      	beq.n	8002966 <HAL_GPIO_Init+0xfa>
 80028a8:	4a98      	ldr	r2, [pc, #608]	; (8002b0c <HAL_GPIO_Init+0x2a0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d875      	bhi.n	800299a <HAL_GPIO_Init+0x12e>
 80028ae:	4a98      	ldr	r2, [pc, #608]	; (8002b10 <HAL_GPIO_Init+0x2a4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d058      	beq.n	8002966 <HAL_GPIO_Init+0xfa>
 80028b4:	4a96      	ldr	r2, [pc, #600]	; (8002b10 <HAL_GPIO_Init+0x2a4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d86f      	bhi.n	800299a <HAL_GPIO_Init+0x12e>
 80028ba:	4a96      	ldr	r2, [pc, #600]	; (8002b14 <HAL_GPIO_Init+0x2a8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d052      	beq.n	8002966 <HAL_GPIO_Init+0xfa>
 80028c0:	4a94      	ldr	r2, [pc, #592]	; (8002b14 <HAL_GPIO_Init+0x2a8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d869      	bhi.n	800299a <HAL_GPIO_Init+0x12e>
 80028c6:	4a94      	ldr	r2, [pc, #592]	; (8002b18 <HAL_GPIO_Init+0x2ac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d04c      	beq.n	8002966 <HAL_GPIO_Init+0xfa>
 80028cc:	4a92      	ldr	r2, [pc, #584]	; (8002b18 <HAL_GPIO_Init+0x2ac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d863      	bhi.n	800299a <HAL_GPIO_Init+0x12e>
 80028d2:	4a92      	ldr	r2, [pc, #584]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d046      	beq.n	8002966 <HAL_GPIO_Init+0xfa>
 80028d8:	4a90      	ldr	r2, [pc, #576]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d85d      	bhi.n	800299a <HAL_GPIO_Init+0x12e>
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d82a      	bhi.n	8002938 <HAL_GPIO_Init+0xcc>
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d859      	bhi.n	800299a <HAL_GPIO_Init+0x12e>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <HAL_GPIO_Init+0x80>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	08002967 	.word	0x08002967
 80028f0:	08002941 	.word	0x08002941
 80028f4:	08002953 	.word	0x08002953
 80028f8:	08002995 	.word	0x08002995
 80028fc:	0800299b 	.word	0x0800299b
 8002900:	0800299b 	.word	0x0800299b
 8002904:	0800299b 	.word	0x0800299b
 8002908:	0800299b 	.word	0x0800299b
 800290c:	0800299b 	.word	0x0800299b
 8002910:	0800299b 	.word	0x0800299b
 8002914:	0800299b 	.word	0x0800299b
 8002918:	0800299b 	.word	0x0800299b
 800291c:	0800299b 	.word	0x0800299b
 8002920:	0800299b 	.word	0x0800299b
 8002924:	0800299b 	.word	0x0800299b
 8002928:	0800299b 	.word	0x0800299b
 800292c:	0800299b 	.word	0x0800299b
 8002930:	08002949 	.word	0x08002949
 8002934:	0800295d 	.word	0x0800295d
 8002938:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_GPIO_Init+0x2b4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800293e:	e02c      	b.n	800299a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	623b      	str	r3, [r7, #32]
          break;
 8002946:	e029      	b.n	800299c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	3304      	adds	r3, #4
 800294e:	623b      	str	r3, [r7, #32]
          break;
 8002950:	e024      	b.n	800299c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	3308      	adds	r3, #8
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e01f      	b.n	800299c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	330c      	adds	r3, #12
 8002962:	623b      	str	r3, [r7, #32]
          break;
 8002964:	e01a      	b.n	800299c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800296e:	2304      	movs	r3, #4
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e013      	b.n	800299c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800297c:	2308      	movs	r3, #8
 800297e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	611a      	str	r2, [r3, #16]
          break;
 8002986:	e009      	b.n	800299c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002988:	2308      	movs	r3, #8
 800298a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	615a      	str	r2, [r3, #20]
          break;
 8002992:	e003      	b.n	800299c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
          break;
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x130>
          break;
 800299a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d801      	bhi.n	80029a6 <HAL_GPIO_Init+0x13a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	e001      	b.n	80029aa <HAL_GPIO_Init+0x13e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d802      	bhi.n	80029b8 <HAL_GPIO_Init+0x14c>
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x152>
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	3b08      	subs	r3, #8
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	210f      	movs	r1, #15
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	401a      	ands	r2, r3
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	431a      	orrs	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80b1 	beq.w	8002b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029ec:	4b4d      	ldr	r3, [pc, #308]	; (8002b24 <HAL_GPIO_Init+0x2b8>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a4c      	ldr	r2, [pc, #304]	; (8002b24 <HAL_GPIO_Init+0x2b8>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_GPIO_Init+0x2b8>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a04:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <HAL_GPIO_Init+0x2bc>)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a40      	ldr	r2, [pc, #256]	; (8002b2c <HAL_GPIO_Init+0x2c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_GPIO_Init+0x1ec>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a3f      	ldr	r2, [pc, #252]	; (8002b30 <HAL_GPIO_Init+0x2c4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00d      	beq.n	8002a54 <HAL_GPIO_Init+0x1e8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <HAL_GPIO_Init+0x2c8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <HAL_GPIO_Init+0x1e4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3d      	ldr	r2, [pc, #244]	; (8002b38 <HAL_GPIO_Init+0x2cc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_GPIO_Init+0x1e0>
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e006      	b.n	8002a5a <HAL_GPIO_Init+0x1ee>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e004      	b.n	8002a5a <HAL_GPIO_Init+0x1ee>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e002      	b.n	8002a5a <HAL_GPIO_Init+0x1ee>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_GPIO_Init+0x1ee>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	f002 0203 	and.w	r2, r2, #3
 8002a60:	0092      	lsls	r2, r2, #2
 8002a62:	4093      	lsls	r3, r2
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a6a:	492f      	ldr	r1, [pc, #188]	; (8002b28 <HAL_GPIO_Init+0x2bc>)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	492c      	ldr	r1, [pc, #176]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4928      	ldr	r1, [pc, #160]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4922      	ldr	r1, [pc, #136]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	491e      	ldr	r1, [pc, #120]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4918      	ldr	r1, [pc, #96]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	4914      	ldr	r1, [pc, #80]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d021      	beq.n	8002b40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
 8002b08:	e021      	b.n	8002b4e <HAL_GPIO_Init+0x2e2>
 8002b0a:	bf00      	nop
 8002b0c:	10320000 	.word	0x10320000
 8002b10:	10310000 	.word	0x10310000
 8002b14:	10220000 	.word	0x10220000
 8002b18:	10210000 	.word	0x10210000
 8002b1c:	10120000 	.word	0x10120000
 8002b20:	10110000 	.word	0x10110000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40010800 	.word	0x40010800
 8002b30:	40010c00 	.word	0x40010c00
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	4909      	ldr	r1, [pc, #36]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	3301      	adds	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f47f ae8e 	bne.w	8002880 <HAL_GPIO_Init+0x14>
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	372c      	adds	r7, #44	; 0x2c
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e26c      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b94:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00c      	beq.n	8002bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba0:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d112      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
 8002bac:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b89      	ldr	r3, [pc, #548]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d168      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e246      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x76>
 8002bdc:	4b80      	ldr	r3, [pc, #512]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7f      	ldr	r2, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b7b      	ldr	r3, [pc, #492]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7a      	ldr	r2, [pc, #488]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xbc>
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a71      	ldr	r2, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c30:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a67      	ldr	r2, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fcd0 	bl	80025f4 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff fccc 	bl	80025f4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1fa      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe4>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff fcbc 	bl	80025f4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff fcb8 	bl	80025f4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1e6      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x10c>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1ba      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4939      	ldr	r1, [pc, #228]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7ff fc71 	bl	80025f4 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d16:	f7ff fc6d 	bl	80025f4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e19b      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4927      	ldr	r1, [pc, #156]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff fc50 	bl	80025f4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7ff fc4c 	bl	80025f4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e17a      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03a      	beq.n	8002df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d019      	beq.n	8002dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7ff fc30 	bl	80025f4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff fc2c 	bl	80025f4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e15a      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 fad8 	bl	800336c <RCC_Delay>
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7ff fc16 	bl	80025f4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	e00f      	b.n	8002dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff fc12 	bl	80025f4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d908      	bls.n	8002dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e140      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	42420000 	.word	0x42420000
 8002de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e9      	bne.n	8002dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a6 	beq.w	8002f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b97      	ldr	r3, [pc, #604]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b94      	ldr	r3, [pc, #592]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a93      	ldr	r2, [pc, #588]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b91      	ldr	r3, [pc, #580]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b8e      	ldr	r3, [pc, #568]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a8a      	ldr	r2, [pc, #552]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff fbd3 	bl	80025f4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7ff fbcf 	bl	80025f4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0fd      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x312>
 8002e78:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e02d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a72      	ldr	r2, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	e01c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d10c      	bne.n	8002eca <HAL_RCC_OscConfig+0x356>
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a69      	ldr	r2, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e00b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a66      	ldr	r2, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7ff fb83 	bl	80025f4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7ff fb7f 	bl	80025f4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0ab      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ee      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x37e>
 8002f14:	e014      	b.n	8002f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7ff fb6d 	bl	80025f4 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7ff fb69 	bl	80025f4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e095      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8081 	beq.w	800305e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d061      	beq.n	800302c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d146      	bne.n	8002ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_OscConfig+0x4fc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7ff fb3d 	bl	80025f4 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7ff fb39 	bl	80025f4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e067      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	492d      	ldr	r1, [pc, #180]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a19      	ldr	r1, [r3, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	4927      	ldr	r1, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x4fc>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff fb0d 	bl	80025f4 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7ff fb09 	bl	80025f4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e037      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x46a>
 8002ffc:	e02f      	b.n	800305e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RCC_OscConfig+0x4fc>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff faf6 	bl	80025f4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7ff faf2 	bl	80025f4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e020      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x498>
 800302a:	e018      	b.n	800305e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e013      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	429a      	cmp	r2, r3
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	40007000 	.word	0x40007000
 8003070:	42420060 	.word	0x42420060

08003074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d0      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d910      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	4965      	ldr	r1, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d040      	beq.n	8003194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e073      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4936      	ldr	r1, [pc, #216]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7ff fa46 	bl	80025f4 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7ff fa42 	bl	80025f4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e053      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d210      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 0207 	bic.w	r2, r3, #7
 80031aa:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f821 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	490a      	ldr	r1, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1cc>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1d0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f9a4 	bl	8002570 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40022000 	.word	0x40022000
 8003238:	40021000 	.word	0x40021000
 800323c:	08007dc8 	.word	0x08007dc8
 8003240:	20000000 	.word	0x20000000
 8003244:	20000004 	.word	0x20000004

08003248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	b490      	push	{r4, r7}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003250:	1d3c      	adds	r4, r7, #4
 8003252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003258:	f240 2301 	movw	r3, #513	; 0x201
 800325c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x40>
 8003282:	2b08      	cmp	r3, #8
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x46>
 8003286:	e02d      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328a:	623b      	str	r3, [r7, #32]
      break;
 800328c:	e02d      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800329a:	4413      	add	r3, r2
 800329c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0c5b      	lsrs	r3, r3, #17
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ba:	4413      	add	r3, r2
 80032bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c6:	fb02 f203 	mul.w	r2, r2, r3
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	e004      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	623b      	str	r3, [r7, #32]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e6:	623b      	str	r3, [r7, #32]
      break;
 80032e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ea:	6a3b      	ldr	r3, [r7, #32]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc90      	pop	{r4, r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	08007db8 	.word	0x08007db8
 80032fc:	40021000 	.word	0x40021000
 8003300:	007a1200 	.word	0x007a1200
 8003304:	003d0900 	.word	0x003d0900

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_RCC_GetHCLKFreq+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	20000000 	.word	0x20000000

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003320:	f7ff fff2 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	08007dd8 	.word	0x08007dd8

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003348:	f7ff ffde 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	08007dd8 	.word	0x08007dd8

0800336c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <RCC_Delay+0x34>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <RCC_Delay+0x38>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a5b      	lsrs	r3, r3, #9
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003388:	bf00      	nop
  }
  while (Delay --);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	60fa      	str	r2, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f9      	bne.n	8003388 <RCC_Delay+0x1c>
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000000 	.word	0x20000000
 80033a4:	10624dd3 	.word	0x10624dd3

080033a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e041      	b.n	800343e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fed2 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 fa70 	bl	80038cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d001      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e03a      	b.n	80034d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_TIM_Base_Start_IT+0x98>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00e      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x58>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d009      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x58>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x58>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d111      	bne.n	80034c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d010      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	e007      	b.n	80034d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800

080034ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9b1 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9a4 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f9b3 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0204 	mvn.w	r2, #4
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f987 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f97a 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f989 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0208 	mvn.w	r2, #8
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2204      	movs	r2, #4
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f95d 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f950 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f95f 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b10      	cmp	r3, #16
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f933 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f926 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f935 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10e      	bne.n	8003670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0201 	mvn.w	r2, #1
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fa3c 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa77 	bl	8003b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8f9 	bl	80038ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0220 	mvn.w	r2, #32
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa42 	bl	8003b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIM_ConfigClockSource+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e0b3      	b.n	800387c <HAL_TIM_ConfigClockSource+0x180>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	d03e      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0xd0>
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003752:	f200 8087 	bhi.w	8003864 <HAL_TIM_ConfigClockSource+0x168>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	f000 8085 	beq.w	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	d87f      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 8003764:	2b70      	cmp	r3, #112	; 0x70
 8003766:	d01a      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xa2>
 8003768:	2b70      	cmp	r3, #112	; 0x70
 800376a:	d87b      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 800376c:	2b60      	cmp	r3, #96	; 0x60
 800376e:	d050      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x116>
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d877      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 8003774:	2b50      	cmp	r3, #80	; 0x50
 8003776:	d03c      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0xf6>
 8003778:	2b50      	cmp	r3, #80	; 0x50
 800377a:	d873      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d058      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x136>
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d86f      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d064      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x156>
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d86b      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d060      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x156>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d867      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x156>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d05a      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800379c:	e062      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f000 f966 	bl	8003a7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	609a      	str	r2, [r3, #8]
      break;
 80037ca:	e04e      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6899      	ldr	r1, [r3, #8]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f000 f94f 	bl	8003a7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ee:	609a      	str	r2, [r3, #8]
      break;
 80037f0:	e03b      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	461a      	mov	r2, r3
 8003800:	f000 f8c6 	bl	8003990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2150      	movs	r1, #80	; 0x50
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f91d 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003810:	e02b      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	461a      	mov	r2, r3
 8003820:	f000 f8e4 	bl	80039ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2160      	movs	r1, #96	; 0x60
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f90d 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003830:	e01b      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	461a      	mov	r2, r3
 8003840:	f000 f8a6 	bl	8003990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f8fd 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003850:	e00b      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f000 f8f4 	bl	8003a4a <TIM_ITRx_SetConfig>
        break;
 8003862:	e002      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0xb8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x30>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x30>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a26      	ldr	r2, [pc, #152]	; (8003988 <TIM_Base_SetConfig+0xbc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x30>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a25      	ldr	r2, [pc, #148]	; (800398c <TIM_Base_SetConfig+0xc0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <TIM_Base_SetConfig+0xb8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0x62>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0x62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <TIM_Base_SetConfig+0xbc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0x62>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <TIM_Base_SetConfig+0xc0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a07      	ldr	r2, [pc, #28]	; (8003984 <TIM_Base_SetConfig+0xb8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800

08003990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 030a 	bic.w	r3, r3, #10
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 0210 	bic.w	r2, r3, #16
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f043 0307 	orr.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	021a      	lsls	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e046      	b.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d009      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10c      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800

08003b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e03f      	b.n	8003c2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe fafe 	bl	80021c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f905 	bl	8003df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b08a      	sub	sp, #40	; 0x28
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d17c      	bne.n	8003d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_Transmit+0x2c>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e075      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x3e>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e06e      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2221      	movs	r2, #33	; 0x21
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8a:	f7fe fcb3 	bl	80025f4 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_UART_Transmit+0x82>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e003      	b.n	8003cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc8:	e02a      	b.n	8003d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f840 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e036      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e007      	b.n	8003d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1cf      	bne.n	8003cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f810 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6a:	e02c      	b.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d72:	d028      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7a:	f7fe fc3b 	bl	80025f4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d21d      	bcs.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d0c3      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e2a:	f023 030c 	bic.w	r3, r3, #12
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <UART_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d103      	bne.n	8003e60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7ff fa74 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	e002      	b.n	8003e66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7ff fa5c 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8003e64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <UART_SetConfig+0x118>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	0119      	lsls	r1, r3, #4
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <UART_SetConfig+0x118>)
 8003e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2064      	movs	r0, #100	; 0x64
 8003ea6:	fb00 f303 	mul.w	r3, r0, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	3332      	adds	r3, #50	; 0x32
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <UART_SetConfig+0x118>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebc:	4419      	add	r1, r3
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <UART_SetConfig+0x118>)
 8003ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2064      	movs	r0, #100	; 0x64
 8003ede:	fb00 f303 	mul.w	r3, r0, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	3332      	adds	r3, #50	; 0x32
 8003ee8:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <UART_SetConfig+0x118>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	440a      	add	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40013800 	.word	0x40013800
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <atoi>:
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f000 bd38 	b.w	8004984 <strtol>

08003f14 <__errno>:
 8003f14:	4b01      	ldr	r3, [pc, #4]	; (8003f1c <__errno+0x8>)
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2600      	movs	r6, #0
 8003f24:	4d0c      	ldr	r5, [pc, #48]	; (8003f58 <__libc_init_array+0x38>)
 8003f26:	4c0d      	ldr	r4, [pc, #52]	; (8003f5c <__libc_init_array+0x3c>)
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	f003 ff14 	bl	8007d5c <_init>
 8003f34:	2600      	movs	r6, #0
 8003f36:	4d0a      	ldr	r5, [pc, #40]	; (8003f60 <__libc_init_array+0x40>)
 8003f38:	4c0a      	ldr	r4, [pc, #40]	; (8003f64 <__libc_init_array+0x44>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08008208 	.word	0x08008208
 8003f5c:	08008208 	.word	0x08008208
 8003f60:	08008208 	.word	0x08008208
 8003f64:	0800820c 	.word	0x0800820c

08003f68 <memset>:
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4402      	add	r2, r0
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d100      	bne.n	8003f72 <memset+0xa>
 8003f70:	4770      	bx	lr
 8003f72:	f803 1b01 	strb.w	r1, [r3], #1
 8003f76:	e7f9      	b.n	8003f6c <memset+0x4>

08003f78 <__cvt>:
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7e:	461f      	mov	r7, r3
 8003f80:	bfbb      	ittet	lt
 8003f82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f86:	461f      	movlt	r7, r3
 8003f88:	2300      	movge	r3, #0
 8003f8a:	232d      	movlt	r3, #45	; 0x2d
 8003f8c:	b088      	sub	sp, #32
 8003f8e:	4614      	mov	r4, r2
 8003f90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f94:	7013      	strb	r3, [r2, #0]
 8003f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f98:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f9c:	f023 0820 	bic.w	r8, r3, #32
 8003fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fa4:	d005      	beq.n	8003fb2 <__cvt+0x3a>
 8003fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003faa:	d100      	bne.n	8003fae <__cvt+0x36>
 8003fac:	3501      	adds	r5, #1
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e000      	b.n	8003fb4 <__cvt+0x3c>
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	aa07      	add	r2, sp, #28
 8003fb6:	9204      	str	r2, [sp, #16]
 8003fb8:	aa06      	add	r2, sp, #24
 8003fba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fbe:	e9cd 3500 	strd	r3, r5, [sp]
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	f000 fdaf 	bl	8004b28 <_dtoa_r>
 8003fca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fce:	4606      	mov	r6, r0
 8003fd0:	d102      	bne.n	8003fd8 <__cvt+0x60>
 8003fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	d522      	bpl.n	800401e <__cvt+0xa6>
 8003fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fdc:	eb06 0905 	add.w	r9, r6, r5
 8003fe0:	d110      	bne.n	8004004 <__cvt+0x8c>
 8003fe2:	7833      	ldrb	r3, [r6, #0]
 8003fe4:	2b30      	cmp	r3, #48	; 0x30
 8003fe6:	d10a      	bne.n	8003ffe <__cvt+0x86>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2300      	movs	r3, #0
 8003fec:	4620      	mov	r0, r4
 8003fee:	4639      	mov	r1, r7
 8003ff0:	f7fc fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8003ff4:	b918      	cbnz	r0, 8003ffe <__cvt+0x86>
 8003ff6:	f1c5 0501 	rsb	r5, r5, #1
 8003ffa:	f8ca 5000 	str.w	r5, [sl]
 8003ffe:	f8da 3000 	ldr.w	r3, [sl]
 8004002:	4499      	add	r9, r3
 8004004:	2200      	movs	r2, #0
 8004006:	2300      	movs	r3, #0
 8004008:	4620      	mov	r0, r4
 800400a:	4639      	mov	r1, r7
 800400c:	f7fc fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8004010:	b108      	cbz	r0, 8004016 <__cvt+0x9e>
 8004012:	f8cd 901c 	str.w	r9, [sp, #28]
 8004016:	2230      	movs	r2, #48	; 0x30
 8004018:	9b07      	ldr	r3, [sp, #28]
 800401a:	454b      	cmp	r3, r9
 800401c:	d307      	bcc.n	800402e <__cvt+0xb6>
 800401e:	4630      	mov	r0, r6
 8004020:	9b07      	ldr	r3, [sp, #28]
 8004022:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004024:	1b9b      	subs	r3, r3, r6
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	b008      	add	sp, #32
 800402a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402e:	1c59      	adds	r1, r3, #1
 8004030:	9107      	str	r1, [sp, #28]
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e7f0      	b.n	8004018 <__cvt+0xa0>

08004036 <__exponent>:
 8004036:	4603      	mov	r3, r0
 8004038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800403a:	2900      	cmp	r1, #0
 800403c:	f803 2b02 	strb.w	r2, [r3], #2
 8004040:	bfb6      	itet	lt
 8004042:	222d      	movlt	r2, #45	; 0x2d
 8004044:	222b      	movge	r2, #43	; 0x2b
 8004046:	4249      	neglt	r1, r1
 8004048:	2909      	cmp	r1, #9
 800404a:	7042      	strb	r2, [r0, #1]
 800404c:	dd2b      	ble.n	80040a6 <__exponent+0x70>
 800404e:	f10d 0407 	add.w	r4, sp, #7
 8004052:	46a4      	mov	ip, r4
 8004054:	270a      	movs	r7, #10
 8004056:	fb91 f6f7 	sdiv	r6, r1, r7
 800405a:	460a      	mov	r2, r1
 800405c:	46a6      	mov	lr, r4
 800405e:	fb07 1516 	mls	r5, r7, r6, r1
 8004062:	2a63      	cmp	r2, #99	; 0x63
 8004064:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004068:	4631      	mov	r1, r6
 800406a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800406e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004072:	dcf0      	bgt.n	8004056 <__exponent+0x20>
 8004074:	3130      	adds	r1, #48	; 0x30
 8004076:	f1ae 0502 	sub.w	r5, lr, #2
 800407a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800407e:	4629      	mov	r1, r5
 8004080:	1c44      	adds	r4, r0, #1
 8004082:	4561      	cmp	r1, ip
 8004084:	d30a      	bcc.n	800409c <__exponent+0x66>
 8004086:	f10d 0209 	add.w	r2, sp, #9
 800408a:	eba2 020e 	sub.w	r2, r2, lr
 800408e:	4565      	cmp	r5, ip
 8004090:	bf88      	it	hi
 8004092:	2200      	movhi	r2, #0
 8004094:	4413      	add	r3, r2
 8004096:	1a18      	subs	r0, r3, r0
 8004098:	b003      	add	sp, #12
 800409a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040a0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040a4:	e7ed      	b.n	8004082 <__exponent+0x4c>
 80040a6:	2330      	movs	r3, #48	; 0x30
 80040a8:	3130      	adds	r1, #48	; 0x30
 80040aa:	7083      	strb	r3, [r0, #2]
 80040ac:	70c1      	strb	r1, [r0, #3]
 80040ae:	1d03      	adds	r3, r0, #4
 80040b0:	e7f1      	b.n	8004096 <__exponent+0x60>
	...

080040b4 <_printf_float>:
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	b091      	sub	sp, #68	; 0x44
 80040ba:	460c      	mov	r4, r1
 80040bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80040c0:	4616      	mov	r6, r2
 80040c2:	461f      	mov	r7, r3
 80040c4:	4605      	mov	r5, r0
 80040c6:	f001 fb1d 	bl	8005704 <_localeconv_r>
 80040ca:	6803      	ldr	r3, [r0, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	9309      	str	r3, [sp, #36]	; 0x24
 80040d0:	f7fc f83e 	bl	8000150 <strlen>
 80040d4:	2300      	movs	r3, #0
 80040d6:	930e      	str	r3, [sp, #56]	; 0x38
 80040d8:	f8d8 3000 	ldr.w	r3, [r8]
 80040dc:	900a      	str	r0, [sp, #40]	; 0x28
 80040de:	3307      	adds	r3, #7
 80040e0:	f023 0307 	bic.w	r3, r3, #7
 80040e4:	f103 0208 	add.w	r2, r3, #8
 80040e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040ec:	f8d4 b000 	ldr.w	fp, [r4]
 80040f0:	f8c8 2000 	str.w	r2, [r8]
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040fc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004100:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004104:	930b      	str	r3, [sp, #44]	; 0x2c
 8004106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800410a:	4640      	mov	r0, r8
 800410c:	4b9c      	ldr	r3, [pc, #624]	; (8004380 <_printf_float+0x2cc>)
 800410e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004110:	f7fc fc7c 	bl	8000a0c <__aeabi_dcmpun>
 8004114:	bb70      	cbnz	r0, 8004174 <_printf_float+0xc0>
 8004116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800411a:	4640      	mov	r0, r8
 800411c:	4b98      	ldr	r3, [pc, #608]	; (8004380 <_printf_float+0x2cc>)
 800411e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004120:	f7fc fc56 	bl	80009d0 <__aeabi_dcmple>
 8004124:	bb30      	cbnz	r0, 8004174 <_printf_float+0xc0>
 8004126:	2200      	movs	r2, #0
 8004128:	2300      	movs	r3, #0
 800412a:	4640      	mov	r0, r8
 800412c:	4651      	mov	r1, sl
 800412e:	f7fc fc45 	bl	80009bc <__aeabi_dcmplt>
 8004132:	b110      	cbz	r0, 800413a <_printf_float+0x86>
 8004134:	232d      	movs	r3, #45	; 0x2d
 8004136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <_printf_float+0x2d0>)
 800413c:	4892      	ldr	r0, [pc, #584]	; (8004388 <_printf_float+0x2d4>)
 800413e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004142:	bf94      	ite	ls
 8004144:	4698      	movls	r8, r3
 8004146:	4680      	movhi	r8, r0
 8004148:	2303      	movs	r3, #3
 800414a:	f04f 0a00 	mov.w	sl, #0
 800414e:	6123      	str	r3, [r4, #16]
 8004150:	f02b 0304 	bic.w	r3, fp, #4
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	4633      	mov	r3, r6
 8004158:	4621      	mov	r1, r4
 800415a:	4628      	mov	r0, r5
 800415c:	9700      	str	r7, [sp, #0]
 800415e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004160:	f000 f9d4 	bl	800450c <_printf_common>
 8004164:	3001      	adds	r0, #1
 8004166:	f040 8090 	bne.w	800428a <_printf_float+0x1d6>
 800416a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800416e:	b011      	add	sp, #68	; 0x44
 8004170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004174:	4642      	mov	r2, r8
 8004176:	4653      	mov	r3, sl
 8004178:	4640      	mov	r0, r8
 800417a:	4651      	mov	r1, sl
 800417c:	f7fc fc46 	bl	8000a0c <__aeabi_dcmpun>
 8004180:	b148      	cbz	r0, 8004196 <_printf_float+0xe2>
 8004182:	f1ba 0f00 	cmp.w	sl, #0
 8004186:	bfb8      	it	lt
 8004188:	232d      	movlt	r3, #45	; 0x2d
 800418a:	4880      	ldr	r0, [pc, #512]	; (800438c <_printf_float+0x2d8>)
 800418c:	bfb8      	it	lt
 800418e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <_printf_float+0x2dc>)
 8004194:	e7d3      	b.n	800413e <_printf_float+0x8a>
 8004196:	6863      	ldr	r3, [r4, #4]
 8004198:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	d142      	bne.n	8004226 <_printf_float+0x172>
 80041a0:	2306      	movs	r3, #6
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	9206      	str	r2, [sp, #24]
 80041a8:	aa0e      	add	r2, sp, #56	; 0x38
 80041aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80041ae:	aa0d      	add	r2, sp, #52	; 0x34
 80041b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80041b4:	9203      	str	r2, [sp, #12]
 80041b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80041ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	4642      	mov	r2, r8
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	4653      	mov	r3, sl
 80041ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80041cc:	f7ff fed4 	bl	8003f78 <__cvt>
 80041d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041d2:	4680      	mov	r8, r0
 80041d4:	2947      	cmp	r1, #71	; 0x47
 80041d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041d8:	d108      	bne.n	80041ec <_printf_float+0x138>
 80041da:	1cc8      	adds	r0, r1, #3
 80041dc:	db02      	blt.n	80041e4 <_printf_float+0x130>
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	4299      	cmp	r1, r3
 80041e2:	dd40      	ble.n	8004266 <_printf_float+0x1b2>
 80041e4:	f1a9 0902 	sub.w	r9, r9, #2
 80041e8:	fa5f f989 	uxtb.w	r9, r9
 80041ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041f0:	d81f      	bhi.n	8004232 <_printf_float+0x17e>
 80041f2:	464a      	mov	r2, r9
 80041f4:	3901      	subs	r1, #1
 80041f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041fa:	910d      	str	r1, [sp, #52]	; 0x34
 80041fc:	f7ff ff1b 	bl	8004036 <__exponent>
 8004200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004202:	4682      	mov	sl, r0
 8004204:	1813      	adds	r3, r2, r0
 8004206:	2a01      	cmp	r2, #1
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	dc02      	bgt.n	8004212 <_printf_float+0x15e>
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	07d2      	lsls	r2, r2, #31
 8004210:	d501      	bpl.n	8004216 <_printf_float+0x162>
 8004212:	3301      	adds	r3, #1
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800421a:	2b00      	cmp	r3, #0
 800421c:	d09b      	beq.n	8004156 <_printf_float+0xa2>
 800421e:	232d      	movs	r3, #45	; 0x2d
 8004220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004224:	e797      	b.n	8004156 <_printf_float+0xa2>
 8004226:	2947      	cmp	r1, #71	; 0x47
 8004228:	d1bc      	bne.n	80041a4 <_printf_float+0xf0>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ba      	bne.n	80041a4 <_printf_float+0xf0>
 800422e:	2301      	movs	r3, #1
 8004230:	e7b7      	b.n	80041a2 <_printf_float+0xee>
 8004232:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004236:	d118      	bne.n	800426a <_printf_float+0x1b6>
 8004238:	2900      	cmp	r1, #0
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	dd0b      	ble.n	8004256 <_printf_float+0x1a2>
 800423e:	6121      	str	r1, [r4, #16]
 8004240:	b913      	cbnz	r3, 8004248 <_printf_float+0x194>
 8004242:	6822      	ldr	r2, [r4, #0]
 8004244:	07d0      	lsls	r0, r2, #31
 8004246:	d502      	bpl.n	800424e <_printf_float+0x19a>
 8004248:	3301      	adds	r3, #1
 800424a:	440b      	add	r3, r1
 800424c:	6123      	str	r3, [r4, #16]
 800424e:	f04f 0a00 	mov.w	sl, #0
 8004252:	65a1      	str	r1, [r4, #88]	; 0x58
 8004254:	e7df      	b.n	8004216 <_printf_float+0x162>
 8004256:	b913      	cbnz	r3, 800425e <_printf_float+0x1aa>
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	07d2      	lsls	r2, r2, #31
 800425c:	d501      	bpl.n	8004262 <_printf_float+0x1ae>
 800425e:	3302      	adds	r3, #2
 8004260:	e7f4      	b.n	800424c <_printf_float+0x198>
 8004262:	2301      	movs	r3, #1
 8004264:	e7f2      	b.n	800424c <_printf_float+0x198>
 8004266:	f04f 0967 	mov.w	r9, #103	; 0x67
 800426a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800426c:	4299      	cmp	r1, r3
 800426e:	db05      	blt.n	800427c <_printf_float+0x1c8>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	6121      	str	r1, [r4, #16]
 8004274:	07d8      	lsls	r0, r3, #31
 8004276:	d5ea      	bpl.n	800424e <_printf_float+0x19a>
 8004278:	1c4b      	adds	r3, r1, #1
 800427a:	e7e7      	b.n	800424c <_printf_float+0x198>
 800427c:	2900      	cmp	r1, #0
 800427e:	bfcc      	ite	gt
 8004280:	2201      	movgt	r2, #1
 8004282:	f1c1 0202 	rsble	r2, r1, #2
 8004286:	4413      	add	r3, r2
 8004288:	e7e0      	b.n	800424c <_printf_float+0x198>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	055a      	lsls	r2, r3, #21
 800428e:	d407      	bmi.n	80042a0 <_printf_float+0x1ec>
 8004290:	6923      	ldr	r3, [r4, #16]
 8004292:	4642      	mov	r2, r8
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	d12b      	bne.n	80042f6 <_printf_float+0x242>
 800429e:	e764      	b.n	800416a <_printf_float+0xb6>
 80042a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042a4:	f240 80dd 	bls.w	8004462 <_printf_float+0x3ae>
 80042a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042ac:	2200      	movs	r2, #0
 80042ae:	2300      	movs	r3, #0
 80042b0:	f7fc fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d033      	beq.n	8004320 <_printf_float+0x26c>
 80042b8:	2301      	movs	r3, #1
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	4a35      	ldr	r2, [pc, #212]	; (8004394 <_printf_float+0x2e0>)
 80042c0:	47b8      	blx	r7
 80042c2:	3001      	adds	r0, #1
 80042c4:	f43f af51 	beq.w	800416a <_printf_float+0xb6>
 80042c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042cc:	429a      	cmp	r2, r3
 80042ce:	db02      	blt.n	80042d6 <_printf_float+0x222>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	07d8      	lsls	r0, r3, #31
 80042d4:	d50f      	bpl.n	80042f6 <_printf_float+0x242>
 80042d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f af42 	beq.w	800416a <_printf_float+0xb6>
 80042e6:	f04f 0800 	mov.w	r8, #0
 80042ea:	f104 091a 	add.w	r9, r4, #26
 80042ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042f0:	3b01      	subs	r3, #1
 80042f2:	4543      	cmp	r3, r8
 80042f4:	dc09      	bgt.n	800430a <_printf_float+0x256>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	079b      	lsls	r3, r3, #30
 80042fa:	f100 8102 	bmi.w	8004502 <_printf_float+0x44e>
 80042fe:	68e0      	ldr	r0, [r4, #12]
 8004300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004302:	4298      	cmp	r0, r3
 8004304:	bfb8      	it	lt
 8004306:	4618      	movlt	r0, r3
 8004308:	e731      	b.n	800416e <_printf_float+0xba>
 800430a:	2301      	movs	r3, #1
 800430c:	464a      	mov	r2, r9
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f af28 	beq.w	800416a <_printf_float+0xb6>
 800431a:	f108 0801 	add.w	r8, r8, #1
 800431e:	e7e6      	b.n	80042ee <_printf_float+0x23a>
 8004320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004322:	2b00      	cmp	r3, #0
 8004324:	dc38      	bgt.n	8004398 <_printf_float+0x2e4>
 8004326:	2301      	movs	r3, #1
 8004328:	4631      	mov	r1, r6
 800432a:	4628      	mov	r0, r5
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <_printf_float+0x2e0>)
 800432e:	47b8      	blx	r7
 8004330:	3001      	adds	r0, #1
 8004332:	f43f af1a 	beq.w	800416a <_printf_float+0xb6>
 8004336:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800433a:	4313      	orrs	r3, r2
 800433c:	d102      	bne.n	8004344 <_printf_float+0x290>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	07d9      	lsls	r1, r3, #31
 8004342:	d5d8      	bpl.n	80042f6 <_printf_float+0x242>
 8004344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	f43f af0b 	beq.w	800416a <_printf_float+0xb6>
 8004354:	f04f 0900 	mov.w	r9, #0
 8004358:	f104 0a1a 	add.w	sl, r4, #26
 800435c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800435e:	425b      	negs	r3, r3
 8004360:	454b      	cmp	r3, r9
 8004362:	dc01      	bgt.n	8004368 <_printf_float+0x2b4>
 8004364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004366:	e794      	b.n	8004292 <_printf_float+0x1de>
 8004368:	2301      	movs	r3, #1
 800436a:	4652      	mov	r2, sl
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f aef9 	beq.w	800416a <_printf_float+0xb6>
 8004378:	f109 0901 	add.w	r9, r9, #1
 800437c:	e7ee      	b.n	800435c <_printf_float+0x2a8>
 800437e:	bf00      	nop
 8004380:	7fefffff 	.word	0x7fefffff
 8004384:	08007de4 	.word	0x08007de4
 8004388:	08007de8 	.word	0x08007de8
 800438c:	08007df0 	.word	0x08007df0
 8004390:	08007dec 	.word	0x08007dec
 8004394:	08007df4 	.word	0x08007df4
 8004398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800439a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800439c:	429a      	cmp	r2, r3
 800439e:	bfa8      	it	ge
 80043a0:	461a      	movge	r2, r3
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	4691      	mov	r9, r2
 80043a6:	dc37      	bgt.n	8004418 <_printf_float+0x364>
 80043a8:	f04f 0b00 	mov.w	fp, #0
 80043ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043b0:	f104 021a 	add.w	r2, r4, #26
 80043b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80043b8:	ebaa 0309 	sub.w	r3, sl, r9
 80043bc:	455b      	cmp	r3, fp
 80043be:	dc33      	bgt.n	8004428 <_printf_float+0x374>
 80043c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043c4:	429a      	cmp	r2, r3
 80043c6:	db3b      	blt.n	8004440 <_printf_float+0x38c>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	07da      	lsls	r2, r3, #31
 80043cc:	d438      	bmi.n	8004440 <_printf_float+0x38c>
 80043ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043d2:	eba2 030a 	sub.w	r3, r2, sl
 80043d6:	eba2 0901 	sub.w	r9, r2, r1
 80043da:	4599      	cmp	r9, r3
 80043dc:	bfa8      	it	ge
 80043de:	4699      	movge	r9, r3
 80043e0:	f1b9 0f00 	cmp.w	r9, #0
 80043e4:	dc34      	bgt.n	8004450 <_printf_float+0x39c>
 80043e6:	f04f 0800 	mov.w	r8, #0
 80043ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043ee:	f104 0a1a 	add.w	sl, r4, #26
 80043f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	eba3 0309 	sub.w	r3, r3, r9
 80043fc:	4543      	cmp	r3, r8
 80043fe:	f77f af7a 	ble.w	80042f6 <_printf_float+0x242>
 8004402:	2301      	movs	r3, #1
 8004404:	4652      	mov	r2, sl
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	f43f aeac 	beq.w	800416a <_printf_float+0xb6>
 8004412:	f108 0801 	add.w	r8, r8, #1
 8004416:	e7ec      	b.n	80043f2 <_printf_float+0x33e>
 8004418:	4613      	mov	r3, r2
 800441a:	4631      	mov	r1, r6
 800441c:	4642      	mov	r2, r8
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	d1c0      	bne.n	80043a8 <_printf_float+0x2f4>
 8004426:	e6a0      	b.n	800416a <_printf_float+0xb6>
 8004428:	2301      	movs	r3, #1
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f ae99 	beq.w	800416a <_printf_float+0xb6>
 8004438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800443a:	f10b 0b01 	add.w	fp, fp, #1
 800443e:	e7b9      	b.n	80043b4 <_printf_float+0x300>
 8004440:	4631      	mov	r1, r6
 8004442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	d1bf      	bne.n	80043ce <_printf_float+0x31a>
 800444e:	e68c      	b.n	800416a <_printf_float+0xb6>
 8004450:	464b      	mov	r3, r9
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	eb08 020a 	add.w	r2, r8, sl
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	d1c2      	bne.n	80043e6 <_printf_float+0x332>
 8004460:	e683      	b.n	800416a <_printf_float+0xb6>
 8004462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004464:	2a01      	cmp	r2, #1
 8004466:	dc01      	bgt.n	800446c <_printf_float+0x3b8>
 8004468:	07db      	lsls	r3, r3, #31
 800446a:	d537      	bpl.n	80044dc <_printf_float+0x428>
 800446c:	2301      	movs	r3, #1
 800446e:	4642      	mov	r2, r8
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	47b8      	blx	r7
 8004476:	3001      	adds	r0, #1
 8004478:	f43f ae77 	beq.w	800416a <_printf_float+0xb6>
 800447c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004480:	4631      	mov	r1, r6
 8004482:	4628      	mov	r0, r5
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	f43f ae6f 	beq.w	800416a <_printf_float+0xb6>
 800448c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004490:	2200      	movs	r2, #0
 8004492:	2300      	movs	r3, #0
 8004494:	f7fc fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8004498:	b9d8      	cbnz	r0, 80044d2 <_printf_float+0x41e>
 800449a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800449c:	f108 0201 	add.w	r2, r8, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	4631      	mov	r1, r6
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b8      	blx	r7
 80044a8:	3001      	adds	r0, #1
 80044aa:	d10e      	bne.n	80044ca <_printf_float+0x416>
 80044ac:	e65d      	b.n	800416a <_printf_float+0xb6>
 80044ae:	2301      	movs	r3, #1
 80044b0:	464a      	mov	r2, r9
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b8      	blx	r7
 80044b8:	3001      	adds	r0, #1
 80044ba:	f43f ae56 	beq.w	800416a <_printf_float+0xb6>
 80044be:	f108 0801 	add.w	r8, r8, #1
 80044c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044c4:	3b01      	subs	r3, #1
 80044c6:	4543      	cmp	r3, r8
 80044c8:	dcf1      	bgt.n	80044ae <_printf_float+0x3fa>
 80044ca:	4653      	mov	r3, sl
 80044cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044d0:	e6e0      	b.n	8004294 <_printf_float+0x1e0>
 80044d2:	f04f 0800 	mov.w	r8, #0
 80044d6:	f104 091a 	add.w	r9, r4, #26
 80044da:	e7f2      	b.n	80044c2 <_printf_float+0x40e>
 80044dc:	2301      	movs	r3, #1
 80044de:	4642      	mov	r2, r8
 80044e0:	e7df      	b.n	80044a2 <_printf_float+0x3ee>
 80044e2:	2301      	movs	r3, #1
 80044e4:	464a      	mov	r2, r9
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f ae3c 	beq.w	800416a <_printf_float+0xb6>
 80044f2:	f108 0801 	add.w	r8, r8, #1
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044fa:	1a5b      	subs	r3, r3, r1
 80044fc:	4543      	cmp	r3, r8
 80044fe:	dcf0      	bgt.n	80044e2 <_printf_float+0x42e>
 8004500:	e6fd      	b.n	80042fe <_printf_float+0x24a>
 8004502:	f04f 0800 	mov.w	r8, #0
 8004506:	f104 0919 	add.w	r9, r4, #25
 800450a:	e7f4      	b.n	80044f6 <_printf_float+0x442>

0800450c <_printf_common>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	4616      	mov	r6, r2
 8004512:	4699      	mov	r9, r3
 8004514:	688a      	ldr	r2, [r1, #8]
 8004516:	690b      	ldr	r3, [r1, #16]
 8004518:	4607      	mov	r7, r0
 800451a:	4293      	cmp	r3, r2
 800451c:	bfb8      	it	lt
 800451e:	4613      	movlt	r3, r2
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004526:	460c      	mov	r4, r1
 8004528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800452c:	b10a      	cbz	r2, 8004532 <_printf_common+0x26>
 800452e:	3301      	adds	r3, #1
 8004530:	6033      	str	r3, [r6, #0]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	0699      	lsls	r1, r3, #26
 8004536:	bf42      	ittt	mi
 8004538:	6833      	ldrmi	r3, [r6, #0]
 800453a:	3302      	addmi	r3, #2
 800453c:	6033      	strmi	r3, [r6, #0]
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	f015 0506 	ands.w	r5, r5, #6
 8004544:	d106      	bne.n	8004554 <_printf_common+0x48>
 8004546:	f104 0a19 	add.w	sl, r4, #25
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	6832      	ldr	r2, [r6, #0]
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	42ab      	cmp	r3, r5
 8004552:	dc28      	bgt.n	80045a6 <_printf_common+0x9a>
 8004554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004558:	1e13      	subs	r3, r2, #0
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	bf18      	it	ne
 800455e:	2301      	movne	r3, #1
 8004560:	0692      	lsls	r2, r2, #26
 8004562:	d42d      	bmi.n	80045c0 <_printf_common+0xb4>
 8004564:	4649      	mov	r1, r9
 8004566:	4638      	mov	r0, r7
 8004568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800456c:	47c0      	blx	r8
 800456e:	3001      	adds	r0, #1
 8004570:	d020      	beq.n	80045b4 <_printf_common+0xa8>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	68e5      	ldr	r5, [r4, #12]
 8004576:	f003 0306 	and.w	r3, r3, #6
 800457a:	2b04      	cmp	r3, #4
 800457c:	bf18      	it	ne
 800457e:	2500      	movne	r5, #0
 8004580:	6832      	ldr	r2, [r6, #0]
 8004582:	f04f 0600 	mov.w	r6, #0
 8004586:	68a3      	ldr	r3, [r4, #8]
 8004588:	bf08      	it	eq
 800458a:	1aad      	subeq	r5, r5, r2
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	bf08      	it	eq
 8004590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004594:	4293      	cmp	r3, r2
 8004596:	bfc4      	itt	gt
 8004598:	1a9b      	subgt	r3, r3, r2
 800459a:	18ed      	addgt	r5, r5, r3
 800459c:	341a      	adds	r4, #26
 800459e:	42b5      	cmp	r5, r6
 80045a0:	d11a      	bne.n	80045d8 <_printf_common+0xcc>
 80045a2:	2000      	movs	r0, #0
 80045a4:	e008      	b.n	80045b8 <_printf_common+0xac>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4652      	mov	r2, sl
 80045aa:	4649      	mov	r1, r9
 80045ac:	4638      	mov	r0, r7
 80045ae:	47c0      	blx	r8
 80045b0:	3001      	adds	r0, #1
 80045b2:	d103      	bne.n	80045bc <_printf_common+0xb0>
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045bc:	3501      	adds	r5, #1
 80045be:	e7c4      	b.n	800454a <_printf_common+0x3e>
 80045c0:	2030      	movs	r0, #48	; 0x30
 80045c2:	18e1      	adds	r1, r4, r3
 80045c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ce:	4422      	add	r2, r4
 80045d0:	3302      	adds	r3, #2
 80045d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045d6:	e7c5      	b.n	8004564 <_printf_common+0x58>
 80045d8:	2301      	movs	r3, #1
 80045da:	4622      	mov	r2, r4
 80045dc:	4649      	mov	r1, r9
 80045de:	4638      	mov	r0, r7
 80045e0:	47c0      	blx	r8
 80045e2:	3001      	adds	r0, #1
 80045e4:	d0e6      	beq.n	80045b4 <_printf_common+0xa8>
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7d9      	b.n	800459e <_printf_common+0x92>
	...

080045ec <_printf_i>:
 80045ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	460c      	mov	r4, r1
 80045f2:	7e27      	ldrb	r7, [r4, #24]
 80045f4:	4691      	mov	r9, r2
 80045f6:	2f78      	cmp	r7, #120	; 0x78
 80045f8:	4680      	mov	r8, r0
 80045fa:	469a      	mov	sl, r3
 80045fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004602:	d807      	bhi.n	8004614 <_printf_i+0x28>
 8004604:	2f62      	cmp	r7, #98	; 0x62
 8004606:	d80a      	bhi.n	800461e <_printf_i+0x32>
 8004608:	2f00      	cmp	r7, #0
 800460a:	f000 80d9 	beq.w	80047c0 <_printf_i+0x1d4>
 800460e:	2f58      	cmp	r7, #88	; 0x58
 8004610:	f000 80a4 	beq.w	800475c <_printf_i+0x170>
 8004614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800461c:	e03a      	b.n	8004694 <_printf_i+0xa8>
 800461e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004622:	2b15      	cmp	r3, #21
 8004624:	d8f6      	bhi.n	8004614 <_printf_i+0x28>
 8004626:	a001      	add	r0, pc, #4	; (adr r0, 800462c <_printf_i+0x40>)
 8004628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800462c:	08004685 	.word	0x08004685
 8004630:	08004699 	.word	0x08004699
 8004634:	08004615 	.word	0x08004615
 8004638:	08004615 	.word	0x08004615
 800463c:	08004615 	.word	0x08004615
 8004640:	08004615 	.word	0x08004615
 8004644:	08004699 	.word	0x08004699
 8004648:	08004615 	.word	0x08004615
 800464c:	08004615 	.word	0x08004615
 8004650:	08004615 	.word	0x08004615
 8004654:	08004615 	.word	0x08004615
 8004658:	080047a7 	.word	0x080047a7
 800465c:	080046c9 	.word	0x080046c9
 8004660:	08004789 	.word	0x08004789
 8004664:	08004615 	.word	0x08004615
 8004668:	08004615 	.word	0x08004615
 800466c:	080047c9 	.word	0x080047c9
 8004670:	08004615 	.word	0x08004615
 8004674:	080046c9 	.word	0x080046c9
 8004678:	08004615 	.word	0x08004615
 800467c:	08004615 	.word	0x08004615
 8004680:	08004791 	.word	0x08004791
 8004684:	680b      	ldr	r3, [r1, #0]
 8004686:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	600a      	str	r2, [r1, #0]
 8004690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004694:	2301      	movs	r3, #1
 8004696:	e0a4      	b.n	80047e2 <_printf_i+0x1f6>
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	6808      	ldr	r0, [r1, #0]
 800469c:	062e      	lsls	r6, r5, #24
 800469e:	f100 0304 	add.w	r3, r0, #4
 80046a2:	d50a      	bpl.n	80046ba <_printf_i+0xce>
 80046a4:	6805      	ldr	r5, [r0, #0]
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	da03      	bge.n	80046b4 <_printf_i+0xc8>
 80046ac:	232d      	movs	r3, #45	; 0x2d
 80046ae:	426d      	negs	r5, r5
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b4:	230a      	movs	r3, #10
 80046b6:	485e      	ldr	r0, [pc, #376]	; (8004830 <_printf_i+0x244>)
 80046b8:	e019      	b.n	80046ee <_printf_i+0x102>
 80046ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046be:	6805      	ldr	r5, [r0, #0]
 80046c0:	600b      	str	r3, [r1, #0]
 80046c2:	bf18      	it	ne
 80046c4:	b22d      	sxthne	r5, r5
 80046c6:	e7ef      	b.n	80046a8 <_printf_i+0xbc>
 80046c8:	680b      	ldr	r3, [r1, #0]
 80046ca:	6825      	ldr	r5, [r4, #0]
 80046cc:	1d18      	adds	r0, r3, #4
 80046ce:	6008      	str	r0, [r1, #0]
 80046d0:	0628      	lsls	r0, r5, #24
 80046d2:	d501      	bpl.n	80046d8 <_printf_i+0xec>
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	e002      	b.n	80046de <_printf_i+0xf2>
 80046d8:	0669      	lsls	r1, r5, #25
 80046da:	d5fb      	bpl.n	80046d4 <_printf_i+0xe8>
 80046dc:	881d      	ldrh	r5, [r3, #0]
 80046de:	2f6f      	cmp	r7, #111	; 0x6f
 80046e0:	bf0c      	ite	eq
 80046e2:	2308      	moveq	r3, #8
 80046e4:	230a      	movne	r3, #10
 80046e6:	4852      	ldr	r0, [pc, #328]	; (8004830 <_printf_i+0x244>)
 80046e8:	2100      	movs	r1, #0
 80046ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ee:	6866      	ldr	r6, [r4, #4]
 80046f0:	2e00      	cmp	r6, #0
 80046f2:	bfa8      	it	ge
 80046f4:	6821      	ldrge	r1, [r4, #0]
 80046f6:	60a6      	str	r6, [r4, #8]
 80046f8:	bfa4      	itt	ge
 80046fa:	f021 0104 	bicge.w	r1, r1, #4
 80046fe:	6021      	strge	r1, [r4, #0]
 8004700:	b90d      	cbnz	r5, 8004706 <_printf_i+0x11a>
 8004702:	2e00      	cmp	r6, #0
 8004704:	d04d      	beq.n	80047a2 <_printf_i+0x1b6>
 8004706:	4616      	mov	r6, r2
 8004708:	fbb5 f1f3 	udiv	r1, r5, r3
 800470c:	fb03 5711 	mls	r7, r3, r1, r5
 8004710:	5dc7      	ldrb	r7, [r0, r7]
 8004712:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004716:	462f      	mov	r7, r5
 8004718:	42bb      	cmp	r3, r7
 800471a:	460d      	mov	r5, r1
 800471c:	d9f4      	bls.n	8004708 <_printf_i+0x11c>
 800471e:	2b08      	cmp	r3, #8
 8004720:	d10b      	bne.n	800473a <_printf_i+0x14e>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	07df      	lsls	r7, r3, #31
 8004726:	d508      	bpl.n	800473a <_printf_i+0x14e>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6861      	ldr	r1, [r4, #4]
 800472c:	4299      	cmp	r1, r3
 800472e:	bfde      	ittt	le
 8004730:	2330      	movle	r3, #48	; 0x30
 8004732:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004736:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800473a:	1b92      	subs	r2, r2, r6
 800473c:	6122      	str	r2, [r4, #16]
 800473e:	464b      	mov	r3, r9
 8004740:	4621      	mov	r1, r4
 8004742:	4640      	mov	r0, r8
 8004744:	f8cd a000 	str.w	sl, [sp]
 8004748:	aa03      	add	r2, sp, #12
 800474a:	f7ff fedf 	bl	800450c <_printf_common>
 800474e:	3001      	adds	r0, #1
 8004750:	d14c      	bne.n	80047ec <_printf_i+0x200>
 8004752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004756:	b004      	add	sp, #16
 8004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475c:	4834      	ldr	r0, [pc, #208]	; (8004830 <_printf_i+0x244>)
 800475e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004762:	680e      	ldr	r6, [r1, #0]
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f856 5b04 	ldr.w	r5, [r6], #4
 800476a:	061f      	lsls	r7, r3, #24
 800476c:	600e      	str	r6, [r1, #0]
 800476e:	d514      	bpl.n	800479a <_printf_i+0x1ae>
 8004770:	07d9      	lsls	r1, r3, #31
 8004772:	bf44      	itt	mi
 8004774:	f043 0320 	orrmi.w	r3, r3, #32
 8004778:	6023      	strmi	r3, [r4, #0]
 800477a:	b91d      	cbnz	r5, 8004784 <_printf_i+0x198>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f023 0320 	bic.w	r3, r3, #32
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	2310      	movs	r3, #16
 8004786:	e7af      	b.n	80046e8 <_printf_i+0xfc>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	f043 0320 	orr.w	r3, r3, #32
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	2378      	movs	r3, #120	; 0x78
 8004792:	4828      	ldr	r0, [pc, #160]	; (8004834 <_printf_i+0x248>)
 8004794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004798:	e7e3      	b.n	8004762 <_printf_i+0x176>
 800479a:	065e      	lsls	r6, r3, #25
 800479c:	bf48      	it	mi
 800479e:	b2ad      	uxthmi	r5, r5
 80047a0:	e7e6      	b.n	8004770 <_printf_i+0x184>
 80047a2:	4616      	mov	r6, r2
 80047a4:	e7bb      	b.n	800471e <_printf_i+0x132>
 80047a6:	680b      	ldr	r3, [r1, #0]
 80047a8:	6826      	ldr	r6, [r4, #0]
 80047aa:	1d1d      	adds	r5, r3, #4
 80047ac:	6960      	ldr	r0, [r4, #20]
 80047ae:	600d      	str	r5, [r1, #0]
 80047b0:	0635      	lsls	r5, r6, #24
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	d501      	bpl.n	80047ba <_printf_i+0x1ce>
 80047b6:	6018      	str	r0, [r3, #0]
 80047b8:	e002      	b.n	80047c0 <_printf_i+0x1d4>
 80047ba:	0671      	lsls	r1, r6, #25
 80047bc:	d5fb      	bpl.n	80047b6 <_printf_i+0x1ca>
 80047be:	8018      	strh	r0, [r3, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	4616      	mov	r6, r2
 80047c4:	6123      	str	r3, [r4, #16]
 80047c6:	e7ba      	b.n	800473e <_printf_i+0x152>
 80047c8:	680b      	ldr	r3, [r1, #0]
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	600a      	str	r2, [r1, #0]
 80047ce:	681e      	ldr	r6, [r3, #0]
 80047d0:	2100      	movs	r1, #0
 80047d2:	4630      	mov	r0, r6
 80047d4:	6862      	ldr	r2, [r4, #4]
 80047d6:	f000 ffa1 	bl	800571c <memchr>
 80047da:	b108      	cbz	r0, 80047e0 <_printf_i+0x1f4>
 80047dc:	1b80      	subs	r0, r0, r6
 80047de:	6060      	str	r0, [r4, #4]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	2300      	movs	r3, #0
 80047e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ea:	e7a8      	b.n	800473e <_printf_i+0x152>
 80047ec:	4632      	mov	r2, r6
 80047ee:	4649      	mov	r1, r9
 80047f0:	4640      	mov	r0, r8
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	47d0      	blx	sl
 80047f6:	3001      	adds	r0, #1
 80047f8:	d0ab      	beq.n	8004752 <_printf_i+0x166>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	079b      	lsls	r3, r3, #30
 80047fe:	d413      	bmi.n	8004828 <_printf_i+0x23c>
 8004800:	68e0      	ldr	r0, [r4, #12]
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	4298      	cmp	r0, r3
 8004806:	bfb8      	it	lt
 8004808:	4618      	movlt	r0, r3
 800480a:	e7a4      	b.n	8004756 <_printf_i+0x16a>
 800480c:	2301      	movs	r3, #1
 800480e:	4632      	mov	r2, r6
 8004810:	4649      	mov	r1, r9
 8004812:	4640      	mov	r0, r8
 8004814:	47d0      	blx	sl
 8004816:	3001      	adds	r0, #1
 8004818:	d09b      	beq.n	8004752 <_printf_i+0x166>
 800481a:	3501      	adds	r5, #1
 800481c:	68e3      	ldr	r3, [r4, #12]
 800481e:	9903      	ldr	r1, [sp, #12]
 8004820:	1a5b      	subs	r3, r3, r1
 8004822:	42ab      	cmp	r3, r5
 8004824:	dcf2      	bgt.n	800480c <_printf_i+0x220>
 8004826:	e7eb      	b.n	8004800 <_printf_i+0x214>
 8004828:	2500      	movs	r5, #0
 800482a:	f104 0619 	add.w	r6, r4, #25
 800482e:	e7f5      	b.n	800481c <_printf_i+0x230>
 8004830:	08007df6 	.word	0x08007df6
 8004834:	08007e07 	.word	0x08007e07

08004838 <siprintf>:
 8004838:	b40e      	push	{r1, r2, r3}
 800483a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800483e:	b500      	push	{lr}
 8004840:	b09c      	sub	sp, #112	; 0x70
 8004842:	ab1d      	add	r3, sp, #116	; 0x74
 8004844:	9002      	str	r0, [sp, #8]
 8004846:	9006      	str	r0, [sp, #24]
 8004848:	9107      	str	r1, [sp, #28]
 800484a:	9104      	str	r1, [sp, #16]
 800484c:	4808      	ldr	r0, [pc, #32]	; (8004870 <siprintf+0x38>)
 800484e:	4909      	ldr	r1, [pc, #36]	; (8004874 <siprintf+0x3c>)
 8004850:	f853 2b04 	ldr.w	r2, [r3], #4
 8004854:	9105      	str	r1, [sp, #20]
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	a902      	add	r1, sp, #8
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	f001 fc0c 	bl	8006078 <_svfiprintf_r>
 8004860:	2200      	movs	r2, #0
 8004862:	9b02      	ldr	r3, [sp, #8]
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	b01c      	add	sp, #112	; 0x70
 8004868:	f85d eb04 	ldr.w	lr, [sp], #4
 800486c:	b003      	add	sp, #12
 800486e:	4770      	bx	lr
 8004870:	2000000c 	.word	0x2000000c
 8004874:	ffff0208 	.word	0xffff0208

08004878 <_strtol_l.isra.0>:
 8004878:	2b01      	cmp	r3, #1
 800487a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487e:	4686      	mov	lr, r0
 8004880:	d001      	beq.n	8004886 <_strtol_l.isra.0+0xe>
 8004882:	2b24      	cmp	r3, #36	; 0x24
 8004884:	d906      	bls.n	8004894 <_strtol_l.isra.0+0x1c>
 8004886:	f7ff fb45 	bl	8003f14 <__errno>
 800488a:	2316      	movs	r3, #22
 800488c:	6003      	str	r3, [r0, #0]
 800488e:	2000      	movs	r0, #0
 8004890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004894:	468c      	mov	ip, r1
 8004896:	4e3a      	ldr	r6, [pc, #232]	; (8004980 <_strtol_l.isra.0+0x108>)
 8004898:	4660      	mov	r0, ip
 800489a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800489e:	5da5      	ldrb	r5, [r4, r6]
 80048a0:	f015 0508 	ands.w	r5, r5, #8
 80048a4:	d1f8      	bne.n	8004898 <_strtol_l.isra.0+0x20>
 80048a6:	2c2d      	cmp	r4, #45	; 0x2d
 80048a8:	d133      	bne.n	8004912 <_strtol_l.isra.0+0x9a>
 80048aa:	f04f 0801 	mov.w	r8, #1
 80048ae:	f89c 4000 	ldrb.w	r4, [ip]
 80048b2:	f100 0c02 	add.w	ip, r0, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d05d      	beq.n	8004976 <_strtol_l.isra.0+0xfe>
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d10c      	bne.n	80048d8 <_strtol_l.isra.0+0x60>
 80048be:	2c30      	cmp	r4, #48	; 0x30
 80048c0:	d10a      	bne.n	80048d8 <_strtol_l.isra.0+0x60>
 80048c2:	f89c 0000 	ldrb.w	r0, [ip]
 80048c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80048ca:	2858      	cmp	r0, #88	; 0x58
 80048cc:	d14e      	bne.n	800496c <_strtol_l.isra.0+0xf4>
 80048ce:	2310      	movs	r3, #16
 80048d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80048d4:	f10c 0c02 	add.w	ip, ip, #2
 80048d8:	2500      	movs	r5, #0
 80048da:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80048de:	3f01      	subs	r7, #1
 80048e0:	fbb7 f9f3 	udiv	r9, r7, r3
 80048e4:	4628      	mov	r0, r5
 80048e6:	fb03 7a19 	mls	sl, r3, r9, r7
 80048ea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80048ee:	2e09      	cmp	r6, #9
 80048f0:	d818      	bhi.n	8004924 <_strtol_l.isra.0+0xac>
 80048f2:	4634      	mov	r4, r6
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	dd24      	ble.n	8004942 <_strtol_l.isra.0+0xca>
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	db1f      	blt.n	800493c <_strtol_l.isra.0+0xc4>
 80048fc:	4581      	cmp	r9, r0
 80048fe:	d31d      	bcc.n	800493c <_strtol_l.isra.0+0xc4>
 8004900:	d101      	bne.n	8004906 <_strtol_l.isra.0+0x8e>
 8004902:	45a2      	cmp	sl, r4
 8004904:	db1a      	blt.n	800493c <_strtol_l.isra.0+0xc4>
 8004906:	2501      	movs	r5, #1
 8004908:	fb00 4003 	mla	r0, r0, r3, r4
 800490c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004910:	e7eb      	b.n	80048ea <_strtol_l.isra.0+0x72>
 8004912:	2c2b      	cmp	r4, #43	; 0x2b
 8004914:	bf08      	it	eq
 8004916:	f89c 4000 	ldrbeq.w	r4, [ip]
 800491a:	46a8      	mov	r8, r5
 800491c:	bf08      	it	eq
 800491e:	f100 0c02 	addeq.w	ip, r0, #2
 8004922:	e7c8      	b.n	80048b6 <_strtol_l.isra.0+0x3e>
 8004924:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004928:	2e19      	cmp	r6, #25
 800492a:	d801      	bhi.n	8004930 <_strtol_l.isra.0+0xb8>
 800492c:	3c37      	subs	r4, #55	; 0x37
 800492e:	e7e1      	b.n	80048f4 <_strtol_l.isra.0+0x7c>
 8004930:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004934:	2e19      	cmp	r6, #25
 8004936:	d804      	bhi.n	8004942 <_strtol_l.isra.0+0xca>
 8004938:	3c57      	subs	r4, #87	; 0x57
 800493a:	e7db      	b.n	80048f4 <_strtol_l.isra.0+0x7c>
 800493c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004940:	e7e4      	b.n	800490c <_strtol_l.isra.0+0x94>
 8004942:	2d00      	cmp	r5, #0
 8004944:	da08      	bge.n	8004958 <_strtol_l.isra.0+0xe0>
 8004946:	2322      	movs	r3, #34	; 0x22
 8004948:	4638      	mov	r0, r7
 800494a:	f8ce 3000 	str.w	r3, [lr]
 800494e:	2a00      	cmp	r2, #0
 8004950:	d09e      	beq.n	8004890 <_strtol_l.isra.0+0x18>
 8004952:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8004956:	e007      	b.n	8004968 <_strtol_l.isra.0+0xf0>
 8004958:	f1b8 0f00 	cmp.w	r8, #0
 800495c:	d000      	beq.n	8004960 <_strtol_l.isra.0+0xe8>
 800495e:	4240      	negs	r0, r0
 8004960:	2a00      	cmp	r2, #0
 8004962:	d095      	beq.n	8004890 <_strtol_l.isra.0+0x18>
 8004964:	2d00      	cmp	r5, #0
 8004966:	d1f4      	bne.n	8004952 <_strtol_l.isra.0+0xda>
 8004968:	6011      	str	r1, [r2, #0]
 800496a:	e791      	b.n	8004890 <_strtol_l.isra.0+0x18>
 800496c:	2430      	movs	r4, #48	; 0x30
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1b2      	bne.n	80048d8 <_strtol_l.isra.0+0x60>
 8004972:	2308      	movs	r3, #8
 8004974:	e7b0      	b.n	80048d8 <_strtol_l.isra.0+0x60>
 8004976:	2c30      	cmp	r4, #48	; 0x30
 8004978:	d0a3      	beq.n	80048c2 <_strtol_l.isra.0+0x4a>
 800497a:	230a      	movs	r3, #10
 800497c:	e7ac      	b.n	80048d8 <_strtol_l.isra.0+0x60>
 800497e:	bf00      	nop
 8004980:	08007e19 	.word	0x08007e19

08004984 <strtol>:
 8004984:	4613      	mov	r3, r2
 8004986:	460a      	mov	r2, r1
 8004988:	4601      	mov	r1, r0
 800498a:	4802      	ldr	r0, [pc, #8]	; (8004994 <strtol+0x10>)
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f7ff bf73 	b.w	8004878 <_strtol_l.isra.0>
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c

08004998 <_vsniprintf_r>:
 8004998:	b530      	push	{r4, r5, lr}
 800499a:	1e14      	subs	r4, r2, #0
 800499c:	4605      	mov	r5, r0
 800499e:	b09b      	sub	sp, #108	; 0x6c
 80049a0:	4618      	mov	r0, r3
 80049a2:	da05      	bge.n	80049b0 <_vsniprintf_r+0x18>
 80049a4:	238b      	movs	r3, #139	; 0x8b
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	b01b      	add	sp, #108	; 0x6c
 80049ae:	bd30      	pop	{r4, r5, pc}
 80049b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80049b8:	bf0c      	ite	eq
 80049ba:	4623      	moveq	r3, r4
 80049bc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80049c0:	9302      	str	r3, [sp, #8]
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049c8:	4602      	mov	r2, r0
 80049ca:	9100      	str	r1, [sp, #0]
 80049cc:	9104      	str	r1, [sp, #16]
 80049ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80049d2:	4669      	mov	r1, sp
 80049d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049d6:	4628      	mov	r0, r5
 80049d8:	f001 fb4e 	bl	8006078 <_svfiprintf_r>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	bfbc      	itt	lt
 80049e0:	238b      	movlt	r3, #139	; 0x8b
 80049e2:	602b      	strlt	r3, [r5, #0]
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	d0e1      	beq.n	80049ac <_vsniprintf_r+0x14>
 80049e8:	2200      	movs	r2, #0
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e7dd      	b.n	80049ac <_vsniprintf_r+0x14>

080049f0 <vsniprintf>:
 80049f0:	b507      	push	{r0, r1, r2, lr}
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	460a      	mov	r2, r1
 80049f8:	4601      	mov	r1, r0
 80049fa:	4803      	ldr	r0, [pc, #12]	; (8004a08 <vsniprintf+0x18>)
 80049fc:	6800      	ldr	r0, [r0, #0]
 80049fe:	f7ff ffcb 	bl	8004998 <_vsniprintf_r>
 8004a02:	b003      	add	sp, #12
 8004a04:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <quorem>:
 8004a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	6903      	ldr	r3, [r0, #16]
 8004a12:	690c      	ldr	r4, [r1, #16]
 8004a14:	4607      	mov	r7, r0
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	f2c0 8083 	blt.w	8004b22 <quorem+0x116>
 8004a1c:	3c01      	subs	r4, #1
 8004a1e:	f100 0514 	add.w	r5, r0, #20
 8004a22:	f101 0814 	add.w	r8, r1, #20
 8004a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a34:	3301      	adds	r3, #1
 8004a36:	429a      	cmp	r2, r3
 8004a38:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a44:	d332      	bcc.n	8004aac <quorem+0xa0>
 8004a46:	f04f 0e00 	mov.w	lr, #0
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	46ac      	mov	ip, r5
 8004a4e:	46f2      	mov	sl, lr
 8004a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a54:	b293      	uxth	r3, r2
 8004a56:	fb06 e303 	mla	r3, r6, r3, lr
 8004a5a:	0c12      	lsrs	r2, r2, #16
 8004a5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a60:	fb06 e202 	mla	r2, r6, r2, lr
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ebaa 0303 	sub.w	r3, sl, r3
 8004a6a:	f8dc a000 	ldr.w	sl, [ip]
 8004a6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a72:	fa1f fa8a 	uxth.w	sl, sl
 8004a76:	4453      	add	r3, sl
 8004a78:	fa1f fa82 	uxth.w	sl, r2
 8004a7c:	f8dc 2000 	ldr.w	r2, [ip]
 8004a80:	4581      	cmp	r9, r0
 8004a82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004a86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a94:	f84c 3b04 	str.w	r3, [ip], #4
 8004a98:	d2da      	bcs.n	8004a50 <quorem+0x44>
 8004a9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a9e:	b92b      	cbnz	r3, 8004aac <quorem+0xa0>
 8004aa0:	9b01      	ldr	r3, [sp, #4]
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	429d      	cmp	r5, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	d32f      	bcc.n	8004b0a <quorem+0xfe>
 8004aaa:	613c      	str	r4, [r7, #16]
 8004aac:	4638      	mov	r0, r7
 8004aae:	f001 f8cb 	bl	8005c48 <__mcmp>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	db25      	blt.n	8004b02 <quorem+0xf6>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f04f 0c00 	mov.w	ip, #0
 8004abc:	3601      	adds	r6, #1
 8004abe:	f858 1b04 	ldr.w	r1, [r8], #4
 8004ac2:	f8d0 e000 	ldr.w	lr, [r0]
 8004ac6:	b28b      	uxth	r3, r1
 8004ac8:	ebac 0303 	sub.w	r3, ip, r3
 8004acc:	fa1f f28e 	uxth.w	r2, lr
 8004ad0:	4413      	add	r3, r2
 8004ad2:	0c0a      	lsrs	r2, r1, #16
 8004ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ae2:	45c1      	cmp	r9, r8
 8004ae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ae8:	f840 3b04 	str.w	r3, [r0], #4
 8004aec:	d2e7      	bcs.n	8004abe <quorem+0xb2>
 8004aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004af6:	b922      	cbnz	r2, 8004b02 <quorem+0xf6>
 8004af8:	3b04      	subs	r3, #4
 8004afa:	429d      	cmp	r5, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	d30a      	bcc.n	8004b16 <quorem+0x10a>
 8004b00:	613c      	str	r4, [r7, #16]
 8004b02:	4630      	mov	r0, r6
 8004b04:	b003      	add	sp, #12
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	d1cb      	bne.n	8004aaa <quorem+0x9e>
 8004b12:	3c01      	subs	r4, #1
 8004b14:	e7c6      	b.n	8004aa4 <quorem+0x98>
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	3b04      	subs	r3, #4
 8004b1a:	2a00      	cmp	r2, #0
 8004b1c:	d1f0      	bne.n	8004b00 <quorem+0xf4>
 8004b1e:	3c01      	subs	r4, #1
 8004b20:	e7eb      	b.n	8004afa <quorem+0xee>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e7ee      	b.n	8004b04 <quorem+0xf8>
	...

08004b28 <_dtoa_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	461f      	mov	r7, r3
 8004b30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004b32:	b099      	sub	sp, #100	; 0x64
 8004b34:	4605      	mov	r5, r0
 8004b36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004b3e:	b974      	cbnz	r4, 8004b5e <_dtoa_r+0x36>
 8004b40:	2010      	movs	r0, #16
 8004b42:	f000 fde3 	bl	800570c <malloc>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6268      	str	r0, [r5, #36]	; 0x24
 8004b4a:	b920      	cbnz	r0, 8004b56 <_dtoa_r+0x2e>
 8004b4c:	21ea      	movs	r1, #234	; 0xea
 8004b4e:	4bae      	ldr	r3, [pc, #696]	; (8004e08 <_dtoa_r+0x2e0>)
 8004b50:	48ae      	ldr	r0, [pc, #696]	; (8004e0c <_dtoa_r+0x2e4>)
 8004b52:	f001 fba1 	bl	8006298 <__assert_func>
 8004b56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b5a:	6004      	str	r4, [r0, #0]
 8004b5c:	60c4      	str	r4, [r0, #12]
 8004b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	b151      	cbz	r1, 8004b7a <_dtoa_r+0x52>
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	2301      	movs	r3, #1
 8004b68:	4093      	lsls	r3, r2
 8004b6a:	604a      	str	r2, [r1, #4]
 8004b6c:	608b      	str	r3, [r1, #8]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 fe30 	bl	80057d4 <_Bfree>
 8004b74:	2200      	movs	r2, #0
 8004b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	1e3b      	subs	r3, r7, #0
 8004b7c:	bfaf      	iteee	ge
 8004b7e:	2300      	movge	r3, #0
 8004b80:	2201      	movlt	r2, #1
 8004b82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b86:	9305      	strlt	r3, [sp, #20]
 8004b88:	bfa8      	it	ge
 8004b8a:	f8c8 3000 	strge.w	r3, [r8]
 8004b8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b92:	4b9f      	ldr	r3, [pc, #636]	; (8004e10 <_dtoa_r+0x2e8>)
 8004b94:	bfb8      	it	lt
 8004b96:	f8c8 2000 	strlt.w	r2, [r8]
 8004b9a:	ea33 0309 	bics.w	r3, r3, r9
 8004b9e:	d119      	bne.n	8004bd4 <_dtoa_r+0xac>
 8004ba0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ba4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bac:	4333      	orrs	r3, r6
 8004bae:	f000 8580 	beq.w	80056b2 <_dtoa_r+0xb8a>
 8004bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bb4:	b953      	cbnz	r3, 8004bcc <_dtoa_r+0xa4>
 8004bb6:	4b97      	ldr	r3, [pc, #604]	; (8004e14 <_dtoa_r+0x2ec>)
 8004bb8:	e022      	b.n	8004c00 <_dtoa_r+0xd8>
 8004bba:	4b97      	ldr	r3, [pc, #604]	; (8004e18 <_dtoa_r+0x2f0>)
 8004bbc:	9308      	str	r3, [sp, #32]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	9808      	ldr	r0, [sp, #32]
 8004bc6:	b019      	add	sp, #100	; 0x64
 8004bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bcc:	4b91      	ldr	r3, [pc, #580]	; (8004e14 <_dtoa_r+0x2ec>)
 8004bce:	9308      	str	r3, [sp, #32]
 8004bd0:	3303      	adds	r3, #3
 8004bd2:	e7f5      	b.n	8004bc0 <_dtoa_r+0x98>
 8004bd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004bd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004be0:	2200      	movs	r2, #0
 8004be2:	2300      	movs	r3, #0
 8004be4:	f7fb fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8004be8:	4680      	mov	r8, r0
 8004bea:	b158      	cbz	r0, 8004c04 <_dtoa_r+0xdc>
 8004bec:	2301      	movs	r3, #1
 8004bee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8559 	beq.w	80056ac <_dtoa_r+0xb84>
 8004bfa:	4888      	ldr	r0, [pc, #544]	; (8004e1c <_dtoa_r+0x2f4>)
 8004bfc:	6018      	str	r0, [r3, #0]
 8004bfe:	1e43      	subs	r3, r0, #1
 8004c00:	9308      	str	r3, [sp, #32]
 8004c02:	e7df      	b.n	8004bc4 <_dtoa_r+0x9c>
 8004c04:	ab16      	add	r3, sp, #88	; 0x58
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	ab17      	add	r3, sp, #92	; 0x5c
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c12:	f001 f8c5 	bl	8005da0 <__d2b>
 8004c16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004c1a:	4682      	mov	sl, r0
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	d07e      	beq.n	8004d1e <_dtoa_r+0x1f6>
 8004c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004c32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004c36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4b78      	ldr	r3, [pc, #480]	; (8004e20 <_dtoa_r+0x2f8>)
 8004c3e:	f7fb fa93 	bl	8000168 <__aeabi_dsub>
 8004c42:	a36b      	add	r3, pc, #428	; (adr r3, 8004df0 <_dtoa_r+0x2c8>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb fc46 	bl	80004d8 <__aeabi_dmul>
 8004c4c:	a36a      	add	r3, pc, #424	; (adr r3, 8004df8 <_dtoa_r+0x2d0>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb fa8b 	bl	800016c <__adddf3>
 8004c56:	4606      	mov	r6, r0
 8004c58:	4620      	mov	r0, r4
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	f7fb fbd2 	bl	8000404 <__aeabi_i2d>
 8004c60:	a367      	add	r3, pc, #412	; (adr r3, 8004e00 <_dtoa_r+0x2d8>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fc37 	bl	80004d8 <__aeabi_dmul>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4639      	mov	r1, r7
 8004c72:	f7fb fa7b 	bl	800016c <__adddf3>
 8004c76:	4606      	mov	r6, r0
 8004c78:	460f      	mov	r7, r1
 8004c7a:	f7fb fedd 	bl	8000a38 <__aeabi_d2iz>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4681      	mov	r9, r0
 8004c82:	2300      	movs	r3, #0
 8004c84:	4630      	mov	r0, r6
 8004c86:	4639      	mov	r1, r7
 8004c88:	f7fb fe98 	bl	80009bc <__aeabi_dcmplt>
 8004c8c:	b148      	cbz	r0, 8004ca2 <_dtoa_r+0x17a>
 8004c8e:	4648      	mov	r0, r9
 8004c90:	f7fb fbb8 	bl	8000404 <__aeabi_i2d>
 8004c94:	4632      	mov	r2, r6
 8004c96:	463b      	mov	r3, r7
 8004c98:	f7fb fe86 	bl	80009a8 <__aeabi_dcmpeq>
 8004c9c:	b908      	cbnz	r0, 8004ca2 <_dtoa_r+0x17a>
 8004c9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004ca2:	f1b9 0f16 	cmp.w	r9, #22
 8004ca6:	d857      	bhi.n	8004d58 <_dtoa_r+0x230>
 8004ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cac:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <_dtoa_r+0x2fc>)
 8004cae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f7fb fe81 	bl	80009bc <__aeabi_dcmplt>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d04e      	beq.n	8004d5c <_dtoa_r+0x234>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004cc8:	1b1c      	subs	r4, r3, r4
 8004cca:	1e63      	subs	r3, r4, #1
 8004ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cce:	bf49      	itett	mi
 8004cd0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004cd4:	2300      	movpl	r3, #0
 8004cd6:	9306      	strmi	r3, [sp, #24]
 8004cd8:	2300      	movmi	r3, #0
 8004cda:	bf54      	ite	pl
 8004cdc:	9306      	strpl	r3, [sp, #24]
 8004cde:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ce0:	f1b9 0f00 	cmp.w	r9, #0
 8004ce4:	db3c      	blt.n	8004d60 <_dtoa_r+0x238>
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004cec:	444b      	add	r3, r9
 8004cee:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8004cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d86c      	bhi.n	8004dd4 <_dtoa_r+0x2ac>
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	bfc4      	itt	gt
 8004cfe:	3b04      	subgt	r3, #4
 8004d00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004d02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d04:	bfc8      	it	gt
 8004d06:	2400      	movgt	r4, #0
 8004d08:	f1a3 0302 	sub.w	r3, r3, #2
 8004d0c:	bfd8      	it	le
 8004d0e:	2401      	movle	r4, #1
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	f200 808b 	bhi.w	8004e2c <_dtoa_r+0x304>
 8004d16:	e8df f003 	tbb	[pc, r3]
 8004d1a:	4f2d      	.short	0x4f2d
 8004d1c:	5b4d      	.short	0x5b4d
 8004d1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004d22:	441c      	add	r4, r3
 8004d24:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	bfc3      	ittte	gt
 8004d2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004d34:	fa09 f303 	lslgt.w	r3, r9, r3
 8004d38:	f1c3 0320 	rsble	r3, r3, #32
 8004d3c:	bfc6      	itte	gt
 8004d3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d42:	4318      	orrgt	r0, r3
 8004d44:	fa06 f003 	lslle.w	r0, r6, r3
 8004d48:	f7fb fb4c 	bl	80003e4 <__aeabi_ui2d>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004d52:	3c01      	subs	r4, #1
 8004d54:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d56:	e770      	b.n	8004c3a <_dtoa_r+0x112>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e7b3      	b.n	8004cc4 <_dtoa_r+0x19c>
 8004d5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d5e:	e7b2      	b.n	8004cc6 <_dtoa_r+0x19e>
 8004d60:	9b06      	ldr	r3, [sp, #24]
 8004d62:	eba3 0309 	sub.w	r3, r3, r9
 8004d66:	9306      	str	r3, [sp, #24]
 8004d68:	f1c9 0300 	rsb	r3, r9, #0
 8004d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8004d6e:	2300      	movs	r3, #0
 8004d70:	930e      	str	r3, [sp, #56]	; 0x38
 8004d72:	e7bf      	b.n	8004cf4 <_dtoa_r+0x1cc>
 8004d74:	2300      	movs	r3, #0
 8004d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dc59      	bgt.n	8004e32 <_dtoa_r+0x30a>
 8004d7e:	f04f 0b01 	mov.w	fp, #1
 8004d82:	465b      	mov	r3, fp
 8004d84:	f8cd b008 	str.w	fp, [sp, #8]
 8004d88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d90:	6042      	str	r2, [r0, #4]
 8004d92:	2204      	movs	r2, #4
 8004d94:	f102 0614 	add.w	r6, r2, #20
 8004d98:	429e      	cmp	r6, r3
 8004d9a:	6841      	ldr	r1, [r0, #4]
 8004d9c:	d94f      	bls.n	8004e3e <_dtoa_r+0x316>
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 fcd8 	bl	8005754 <_Balloc>
 8004da4:	9008      	str	r0, [sp, #32]
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d14d      	bne.n	8004e46 <_dtoa_r+0x31e>
 8004daa:	4602      	mov	r2, r0
 8004dac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <_dtoa_r+0x300>)
 8004db2:	e6cd      	b.n	8004b50 <_dtoa_r+0x28>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e7de      	b.n	8004d76 <_dtoa_r+0x24e>
 8004db8:	2300      	movs	r3, #0
 8004dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dbe:	eb09 0b03 	add.w	fp, r9, r3
 8004dc2:	f10b 0301 	add.w	r3, fp, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	bfb8      	it	lt
 8004dcc:	2301      	movlt	r3, #1
 8004dce:	e7dd      	b.n	8004d8c <_dtoa_r+0x264>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e7f2      	b.n	8004dba <_dtoa_r+0x292>
 8004dd4:	2401      	movs	r4, #1
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8004dda:	9322      	str	r3, [sp, #136]	; 0x88
 8004ddc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004de0:	2200      	movs	r2, #0
 8004de2:	2312      	movs	r3, #18
 8004de4:	f8cd b008 	str.w	fp, [sp, #8]
 8004de8:	9223      	str	r2, [sp, #140]	; 0x8c
 8004dea:	e7cf      	b.n	8004d8c <_dtoa_r+0x264>
 8004dec:	f3af 8000 	nop.w
 8004df0:	636f4361 	.word	0x636f4361
 8004df4:	3fd287a7 	.word	0x3fd287a7
 8004df8:	8b60c8b3 	.word	0x8b60c8b3
 8004dfc:	3fc68a28 	.word	0x3fc68a28
 8004e00:	509f79fb 	.word	0x509f79fb
 8004e04:	3fd34413 	.word	0x3fd34413
 8004e08:	08007f26 	.word	0x08007f26
 8004e0c:	08007f3d 	.word	0x08007f3d
 8004e10:	7ff00000 	.word	0x7ff00000
 8004e14:	08007f22 	.word	0x08007f22
 8004e18:	08007f19 	.word	0x08007f19
 8004e1c:	08007df5 	.word	0x08007df5
 8004e20:	3ff80000 	.word	0x3ff80000
 8004e24:	08008038 	.word	0x08008038
 8004e28:	08007f9c 	.word	0x08007f9c
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e30:	e7d4      	b.n	8004ddc <_dtoa_r+0x2b4>
 8004e32:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004e36:	465b      	mov	r3, fp
 8004e38:	f8cd b008 	str.w	fp, [sp, #8]
 8004e3c:	e7a6      	b.n	8004d8c <_dtoa_r+0x264>
 8004e3e:	3101      	adds	r1, #1
 8004e40:	6041      	str	r1, [r0, #4]
 8004e42:	0052      	lsls	r2, r2, #1
 8004e44:	e7a6      	b.n	8004d94 <_dtoa_r+0x26c>
 8004e46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e48:	9a08      	ldr	r2, [sp, #32]
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	9b02      	ldr	r3, [sp, #8]
 8004e4e:	2b0e      	cmp	r3, #14
 8004e50:	f200 80a8 	bhi.w	8004fa4 <_dtoa_r+0x47c>
 8004e54:	2c00      	cmp	r4, #0
 8004e56:	f000 80a5 	beq.w	8004fa4 <_dtoa_r+0x47c>
 8004e5a:	f1b9 0f00 	cmp.w	r9, #0
 8004e5e:	dd34      	ble.n	8004eca <_dtoa_r+0x3a2>
 8004e60:	4a9a      	ldr	r2, [pc, #616]	; (80050cc <_dtoa_r+0x5a4>)
 8004e62:	f009 030f 	and.w	r3, r9, #15
 8004e66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e6a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004e6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e76:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004e7a:	d016      	beq.n	8004eaa <_dtoa_r+0x382>
 8004e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e80:	4b93      	ldr	r3, [pc, #588]	; (80050d0 <_dtoa_r+0x5a8>)
 8004e82:	2703      	movs	r7, #3
 8004e84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e88:	f7fb fc50 	bl	800072c <__aeabi_ddiv>
 8004e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e90:	f004 040f 	and.w	r4, r4, #15
 8004e94:	4e8e      	ldr	r6, [pc, #568]	; (80050d0 <_dtoa_r+0x5a8>)
 8004e96:	b954      	cbnz	r4, 8004eae <_dtoa_r+0x386>
 8004e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ea0:	f7fb fc44 	bl	800072c <__aeabi_ddiv>
 8004ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ea8:	e029      	b.n	8004efe <_dtoa_r+0x3d6>
 8004eaa:	2702      	movs	r7, #2
 8004eac:	e7f2      	b.n	8004e94 <_dtoa_r+0x36c>
 8004eae:	07e1      	lsls	r1, r4, #31
 8004eb0:	d508      	bpl.n	8004ec4 <_dtoa_r+0x39c>
 8004eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004eba:	f7fb fb0d 	bl	80004d8 <__aeabi_dmul>
 8004ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ec2:	3701      	adds	r7, #1
 8004ec4:	1064      	asrs	r4, r4, #1
 8004ec6:	3608      	adds	r6, #8
 8004ec8:	e7e5      	b.n	8004e96 <_dtoa_r+0x36e>
 8004eca:	f000 80a5 	beq.w	8005018 <_dtoa_r+0x4f0>
 8004ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ed2:	f1c9 0400 	rsb	r4, r9, #0
 8004ed6:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <_dtoa_r+0x5a4>)
 8004ed8:	f004 020f 	and.w	r2, r4, #15
 8004edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb faf8 	bl	80004d8 <__aeabi_dmul>
 8004ee8:	2702      	movs	r7, #2
 8004eea:	2300      	movs	r3, #0
 8004eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ef0:	4e77      	ldr	r6, [pc, #476]	; (80050d0 <_dtoa_r+0x5a8>)
 8004ef2:	1124      	asrs	r4, r4, #4
 8004ef4:	2c00      	cmp	r4, #0
 8004ef6:	f040 8084 	bne.w	8005002 <_dtoa_r+0x4da>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1d2      	bne.n	8004ea4 <_dtoa_r+0x37c>
 8004efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 808b 	beq.w	800501c <_dtoa_r+0x4f4>
 8004f06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <_dtoa_r+0x5ac>)
 8004f16:	f7fb fd51 	bl	80009bc <__aeabi_dcmplt>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d07e      	beq.n	800501c <_dtoa_r+0x4f4>
 8004f1e:	9b02      	ldr	r3, [sp, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d07b      	beq.n	800501c <_dtoa_r+0x4f4>
 8004f24:	f1bb 0f00 	cmp.w	fp, #0
 8004f28:	dd38      	ble.n	8004f9c <_dtoa_r+0x474>
 8004f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <_dtoa_r+0x5b0>)
 8004f32:	f7fb fad1 	bl	80004d8 <__aeabi_dmul>
 8004f36:	465c      	mov	r4, fp
 8004f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f3c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8004f40:	3701      	adds	r7, #1
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7fb fa5e 	bl	8000404 <__aeabi_i2d>
 8004f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f4c:	f7fb fac4 	bl	80004d8 <__aeabi_dmul>
 8004f50:	2200      	movs	r2, #0
 8004f52:	4b62      	ldr	r3, [pc, #392]	; (80050dc <_dtoa_r+0x5b4>)
 8004f54:	f7fb f90a 	bl	800016c <__adddf3>
 8004f58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f60:	9611      	str	r6, [sp, #68]	; 0x44
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	d15d      	bne.n	8005022 <_dtoa_r+0x4fa>
 8004f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	; (80050e0 <_dtoa_r+0x5b8>)
 8004f6e:	f7fb f8fb 	bl	8000168 <__aeabi_dsub>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f7a:	4633      	mov	r3, r6
 8004f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f7e:	f7fb fd3b 	bl	80009f8 <__aeabi_dcmpgt>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f040 829e 	bne.w	80054c4 <_dtoa_r+0x99c>
 8004f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f92:	f7fb fd13 	bl	80009bc <__aeabi_dcmplt>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f040 8292 	bne.w	80054c0 <_dtoa_r+0x998>
 8004f9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004fa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f2c0 8153 	blt.w	8005252 <_dtoa_r+0x72a>
 8004fac:	f1b9 0f0e 	cmp.w	r9, #14
 8004fb0:	f300 814f 	bgt.w	8005252 <_dtoa_r+0x72a>
 8004fb4:	4b45      	ldr	r3, [pc, #276]	; (80050cc <_dtoa_r+0x5a4>)
 8004fb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004fba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f280 80db 	bge.w	8005180 <_dtoa_r+0x658>
 8004fca:	9b02      	ldr	r3, [sp, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f300 80d7 	bgt.w	8005180 <_dtoa_r+0x658>
 8004fd2:	f040 8274 	bne.w	80054be <_dtoa_r+0x996>
 8004fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4b40      	ldr	r3, [pc, #256]	; (80050e0 <_dtoa_r+0x5b8>)
 8004fde:	f7fb fa7b 	bl	80004d8 <__aeabi_dmul>
 8004fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe6:	f7fb fcfd 	bl	80009e4 <__aeabi_dcmpge>
 8004fea:	9c02      	ldr	r4, [sp, #8]
 8004fec:	4626      	mov	r6, r4
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f040 824a 	bne.w	8005488 <_dtoa_r+0x960>
 8004ff4:	2331      	movs	r3, #49	; 0x31
 8004ff6:	9f08      	ldr	r7, [sp, #32]
 8004ff8:	f109 0901 	add.w	r9, r9, #1
 8004ffc:	f807 3b01 	strb.w	r3, [r7], #1
 8005000:	e246      	b.n	8005490 <_dtoa_r+0x968>
 8005002:	07e2      	lsls	r2, r4, #31
 8005004:	d505      	bpl.n	8005012 <_dtoa_r+0x4ea>
 8005006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800500a:	f7fb fa65 	bl	80004d8 <__aeabi_dmul>
 800500e:	2301      	movs	r3, #1
 8005010:	3701      	adds	r7, #1
 8005012:	1064      	asrs	r4, r4, #1
 8005014:	3608      	adds	r6, #8
 8005016:	e76d      	b.n	8004ef4 <_dtoa_r+0x3cc>
 8005018:	2702      	movs	r7, #2
 800501a:	e770      	b.n	8004efe <_dtoa_r+0x3d6>
 800501c:	46c8      	mov	r8, r9
 800501e:	9c02      	ldr	r4, [sp, #8]
 8005020:	e78f      	b.n	8004f42 <_dtoa_r+0x41a>
 8005022:	9908      	ldr	r1, [sp, #32]
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <_dtoa_r+0x5a4>)
 8005026:	4421      	add	r1, r4
 8005028:	9112      	str	r1, [sp, #72]	; 0x48
 800502a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800502c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005030:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005034:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005038:	2900      	cmp	r1, #0
 800503a:	d055      	beq.n	80050e8 <_dtoa_r+0x5c0>
 800503c:	2000      	movs	r0, #0
 800503e:	4929      	ldr	r1, [pc, #164]	; (80050e4 <_dtoa_r+0x5bc>)
 8005040:	f7fb fb74 	bl	800072c <__aeabi_ddiv>
 8005044:	463b      	mov	r3, r7
 8005046:	4632      	mov	r2, r6
 8005048:	f7fb f88e 	bl	8000168 <__aeabi_dsub>
 800504c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005050:	9f08      	ldr	r7, [sp, #32]
 8005052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005056:	f7fb fcef 	bl	8000a38 <__aeabi_d2iz>
 800505a:	4604      	mov	r4, r0
 800505c:	f7fb f9d2 	bl	8000404 <__aeabi_i2d>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005068:	f7fb f87e 	bl	8000168 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	3430      	adds	r4, #48	; 0x30
 8005072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800507a:	f807 4b01 	strb.w	r4, [r7], #1
 800507e:	f7fb fc9d 	bl	80009bc <__aeabi_dcmplt>
 8005082:	2800      	cmp	r0, #0
 8005084:	d174      	bne.n	8005170 <_dtoa_r+0x648>
 8005086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800508a:	2000      	movs	r0, #0
 800508c:	4911      	ldr	r1, [pc, #68]	; (80050d4 <_dtoa_r+0x5ac>)
 800508e:	f7fb f86b 	bl	8000168 <__aeabi_dsub>
 8005092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005096:	f7fb fc91 	bl	80009bc <__aeabi_dcmplt>
 800509a:	2800      	cmp	r0, #0
 800509c:	f040 80b6 	bne.w	800520c <_dtoa_r+0x6e4>
 80050a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050a2:	429f      	cmp	r7, r3
 80050a4:	f43f af7a 	beq.w	8004f9c <_dtoa_r+0x474>
 80050a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ac:	2200      	movs	r2, #0
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <_dtoa_r+0x5b0>)
 80050b0:	f7fb fa12 	bl	80004d8 <__aeabi_dmul>
 80050b4:	2200      	movs	r2, #0
 80050b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <_dtoa_r+0x5b0>)
 80050c0:	f7fb fa0a 	bl	80004d8 <__aeabi_dmul>
 80050c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050c8:	e7c3      	b.n	8005052 <_dtoa_r+0x52a>
 80050ca:	bf00      	nop
 80050cc:	08008038 	.word	0x08008038
 80050d0:	08008010 	.word	0x08008010
 80050d4:	3ff00000 	.word	0x3ff00000
 80050d8:	40240000 	.word	0x40240000
 80050dc:	401c0000 	.word	0x401c0000
 80050e0:	40140000 	.word	0x40140000
 80050e4:	3fe00000 	.word	0x3fe00000
 80050e8:	4630      	mov	r0, r6
 80050ea:	4639      	mov	r1, r7
 80050ec:	f7fb f9f4 	bl	80004d8 <__aeabi_dmul>
 80050f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050f6:	9c08      	ldr	r4, [sp, #32]
 80050f8:	9314      	str	r3, [sp, #80]	; 0x50
 80050fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050fe:	f7fb fc9b 	bl	8000a38 <__aeabi_d2iz>
 8005102:	9015      	str	r0, [sp, #84]	; 0x54
 8005104:	f7fb f97e 	bl	8000404 <__aeabi_i2d>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005110:	f7fb f82a 	bl	8000168 <__aeabi_dsub>
 8005114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005116:	4606      	mov	r6, r0
 8005118:	3330      	adds	r3, #48	; 0x30
 800511a:	f804 3b01 	strb.w	r3, [r4], #1
 800511e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005120:	460f      	mov	r7, r1
 8005122:	429c      	cmp	r4, r3
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	d124      	bne.n	8005174 <_dtoa_r+0x64c>
 800512a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800512e:	4bb3      	ldr	r3, [pc, #716]	; (80053fc <_dtoa_r+0x8d4>)
 8005130:	f7fb f81c 	bl	800016c <__adddf3>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb fc5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005140:	2800      	cmp	r0, #0
 8005142:	d162      	bne.n	800520a <_dtoa_r+0x6e2>
 8005144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005148:	2000      	movs	r0, #0
 800514a:	49ac      	ldr	r1, [pc, #688]	; (80053fc <_dtoa_r+0x8d4>)
 800514c:	f7fb f80c 	bl	8000168 <__aeabi_dsub>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4630      	mov	r0, r6
 8005156:	4639      	mov	r1, r7
 8005158:	f7fb fc30 	bl	80009bc <__aeabi_dcmplt>
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f af1d 	beq.w	8004f9c <_dtoa_r+0x474>
 8005162:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005164:	1e7b      	subs	r3, r7, #1
 8005166:	9314      	str	r3, [sp, #80]	; 0x50
 8005168:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800516c:	2b30      	cmp	r3, #48	; 0x30
 800516e:	d0f8      	beq.n	8005162 <_dtoa_r+0x63a>
 8005170:	46c1      	mov	r9, r8
 8005172:	e03a      	b.n	80051ea <_dtoa_r+0x6c2>
 8005174:	4ba2      	ldr	r3, [pc, #648]	; (8005400 <_dtoa_r+0x8d8>)
 8005176:	f7fb f9af 	bl	80004d8 <__aeabi_dmul>
 800517a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800517e:	e7bc      	b.n	80050fa <_dtoa_r+0x5d2>
 8005180:	9f08      	ldr	r7, [sp, #32]
 8005182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800518a:	f7fb facf 	bl	800072c <__aeabi_ddiv>
 800518e:	f7fb fc53 	bl	8000a38 <__aeabi_d2iz>
 8005192:	4604      	mov	r4, r0
 8005194:	f7fb f936 	bl	8000404 <__aeabi_i2d>
 8005198:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800519c:	f7fb f99c 	bl	80004d8 <__aeabi_dmul>
 80051a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80051a4:	460b      	mov	r3, r1
 80051a6:	4602      	mov	r2, r0
 80051a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ac:	f7fa ffdc 	bl	8000168 <__aeabi_dsub>
 80051b0:	f807 6b01 	strb.w	r6, [r7], #1
 80051b4:	9e08      	ldr	r6, [sp, #32]
 80051b6:	9b02      	ldr	r3, [sp, #8]
 80051b8:	1bbe      	subs	r6, r7, r6
 80051ba:	42b3      	cmp	r3, r6
 80051bc:	d13a      	bne.n	8005234 <_dtoa_r+0x70c>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	f7fa ffd3 	bl	800016c <__adddf3>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051d2:	f7fb fc11 	bl	80009f8 <__aeabi_dcmpgt>
 80051d6:	bb58      	cbnz	r0, 8005230 <_dtoa_r+0x708>
 80051d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e0:	f7fb fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80051e4:	b108      	cbz	r0, 80051ea <_dtoa_r+0x6c2>
 80051e6:	07e1      	lsls	r1, r4, #31
 80051e8:	d422      	bmi.n	8005230 <_dtoa_r+0x708>
 80051ea:	4628      	mov	r0, r5
 80051ec:	4651      	mov	r1, sl
 80051ee:	f000 faf1 	bl	80057d4 <_Bfree>
 80051f2:	2300      	movs	r3, #0
 80051f4:	703b      	strb	r3, [r7, #0]
 80051f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80051f8:	f109 0001 	add.w	r0, r9, #1
 80051fc:	6018      	str	r0, [r3, #0]
 80051fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005200:	2b00      	cmp	r3, #0
 8005202:	f43f acdf 	beq.w	8004bc4 <_dtoa_r+0x9c>
 8005206:	601f      	str	r7, [r3, #0]
 8005208:	e4dc      	b.n	8004bc4 <_dtoa_r+0x9c>
 800520a:	4627      	mov	r7, r4
 800520c:	463b      	mov	r3, r7
 800520e:	461f      	mov	r7, r3
 8005210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005214:	2a39      	cmp	r2, #57	; 0x39
 8005216:	d107      	bne.n	8005228 <_dtoa_r+0x700>
 8005218:	9a08      	ldr	r2, [sp, #32]
 800521a:	429a      	cmp	r2, r3
 800521c:	d1f7      	bne.n	800520e <_dtoa_r+0x6e6>
 800521e:	2230      	movs	r2, #48	; 0x30
 8005220:	9908      	ldr	r1, [sp, #32]
 8005222:	f108 0801 	add.w	r8, r8, #1
 8005226:	700a      	strb	r2, [r1, #0]
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	3201      	adds	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e79f      	b.n	8005170 <_dtoa_r+0x648>
 8005230:	46c8      	mov	r8, r9
 8005232:	e7eb      	b.n	800520c <_dtoa_r+0x6e4>
 8005234:	2200      	movs	r2, #0
 8005236:	4b72      	ldr	r3, [pc, #456]	; (8005400 <_dtoa_r+0x8d8>)
 8005238:	f7fb f94e 	bl	80004d8 <__aeabi_dmul>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005244:	2200      	movs	r2, #0
 8005246:	2300      	movs	r3, #0
 8005248:	f7fb fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800524c:	2800      	cmp	r0, #0
 800524e:	d098      	beq.n	8005182 <_dtoa_r+0x65a>
 8005250:	e7cb      	b.n	80051ea <_dtoa_r+0x6c2>
 8005252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005254:	2a00      	cmp	r2, #0
 8005256:	f000 80cd 	beq.w	80053f4 <_dtoa_r+0x8cc>
 800525a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800525c:	2a01      	cmp	r2, #1
 800525e:	f300 80af 	bgt.w	80053c0 <_dtoa_r+0x898>
 8005262:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005264:	2a00      	cmp	r2, #0
 8005266:	f000 80a7 	beq.w	80053b8 <_dtoa_r+0x890>
 800526a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800526e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005270:	9f06      	ldr	r7, [sp, #24]
 8005272:	9a06      	ldr	r2, [sp, #24]
 8005274:	2101      	movs	r1, #1
 8005276:	441a      	add	r2, r3
 8005278:	9206      	str	r2, [sp, #24]
 800527a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527c:	4628      	mov	r0, r5
 800527e:	441a      	add	r2, r3
 8005280:	9209      	str	r2, [sp, #36]	; 0x24
 8005282:	f000 fb61 	bl	8005948 <__i2b>
 8005286:	4606      	mov	r6, r0
 8005288:	2f00      	cmp	r7, #0
 800528a:	dd0c      	ble.n	80052a6 <_dtoa_r+0x77e>
 800528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	dd09      	ble.n	80052a6 <_dtoa_r+0x77e>
 8005292:	42bb      	cmp	r3, r7
 8005294:	bfa8      	it	ge
 8005296:	463b      	movge	r3, r7
 8005298:	9a06      	ldr	r2, [sp, #24]
 800529a:	1aff      	subs	r7, r7, r3
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	9206      	str	r2, [sp, #24]
 80052a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	9309      	str	r3, [sp, #36]	; 0x24
 80052a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a8:	b1f3      	cbz	r3, 80052e8 <_dtoa_r+0x7c0>
 80052aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a9 	beq.w	8005404 <_dtoa_r+0x8dc>
 80052b2:	2c00      	cmp	r4, #0
 80052b4:	dd10      	ble.n	80052d8 <_dtoa_r+0x7b0>
 80052b6:	4631      	mov	r1, r6
 80052b8:	4622      	mov	r2, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fbfe 	bl	8005abc <__pow5mult>
 80052c0:	4652      	mov	r2, sl
 80052c2:	4601      	mov	r1, r0
 80052c4:	4606      	mov	r6, r0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 fb54 	bl	8005974 <__multiply>
 80052cc:	4680      	mov	r8, r0
 80052ce:	4651      	mov	r1, sl
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fa7f 	bl	80057d4 <_Bfree>
 80052d6:	46c2      	mov	sl, r8
 80052d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052da:	1b1a      	subs	r2, r3, r4
 80052dc:	d004      	beq.n	80052e8 <_dtoa_r+0x7c0>
 80052de:	4651      	mov	r1, sl
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 fbeb 	bl	8005abc <__pow5mult>
 80052e6:	4682      	mov	sl, r0
 80052e8:	2101      	movs	r1, #1
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 fb2c 	bl	8005948 <__i2b>
 80052f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f2:	4604      	mov	r4, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f340 8087 	ble.w	8005408 <_dtoa_r+0x8e0>
 80052fa:	461a      	mov	r2, r3
 80052fc:	4601      	mov	r1, r0
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fbdc 	bl	8005abc <__pow5mult>
 8005304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005306:	4604      	mov	r4, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	f340 8080 	ble.w	800540e <_dtoa_r+0x8e6>
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005318:	6918      	ldr	r0, [r3, #16]
 800531a:	f000 fac7 	bl	80058ac <__hi0bits>
 800531e:	f1c0 0020 	rsb	r0, r0, #32
 8005322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005324:	4418      	add	r0, r3
 8005326:	f010 001f 	ands.w	r0, r0, #31
 800532a:	f000 8092 	beq.w	8005452 <_dtoa_r+0x92a>
 800532e:	f1c0 0320 	rsb	r3, r0, #32
 8005332:	2b04      	cmp	r3, #4
 8005334:	f340 808a 	ble.w	800544c <_dtoa_r+0x924>
 8005338:	f1c0 001c 	rsb	r0, r0, #28
 800533c:	9b06      	ldr	r3, [sp, #24]
 800533e:	4407      	add	r7, r0
 8005340:	4403      	add	r3, r0
 8005342:	9306      	str	r3, [sp, #24]
 8005344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005346:	4403      	add	r3, r0
 8005348:	9309      	str	r3, [sp, #36]	; 0x24
 800534a:	9b06      	ldr	r3, [sp, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	dd05      	ble.n	800535c <_dtoa_r+0x834>
 8005350:	4651      	mov	r1, sl
 8005352:	461a      	mov	r2, r3
 8005354:	4628      	mov	r0, r5
 8005356:	f000 fc0b 	bl	8005b70 <__lshift>
 800535a:	4682      	mov	sl, r0
 800535c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	dd05      	ble.n	800536e <_dtoa_r+0x846>
 8005362:	4621      	mov	r1, r4
 8005364:	461a      	mov	r2, r3
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fc02 	bl	8005b70 <__lshift>
 800536c:	4604      	mov	r4, r0
 800536e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d070      	beq.n	8005456 <_dtoa_r+0x92e>
 8005374:	4621      	mov	r1, r4
 8005376:	4650      	mov	r0, sl
 8005378:	f000 fc66 	bl	8005c48 <__mcmp>
 800537c:	2800      	cmp	r0, #0
 800537e:	da6a      	bge.n	8005456 <_dtoa_r+0x92e>
 8005380:	2300      	movs	r3, #0
 8005382:	4651      	mov	r1, sl
 8005384:	220a      	movs	r2, #10
 8005386:	4628      	mov	r0, r5
 8005388:	f000 fa46 	bl	8005818 <__multadd>
 800538c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538e:	4682      	mov	sl, r0
 8005390:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8193 	beq.w	80056c0 <_dtoa_r+0xb98>
 800539a:	4631      	mov	r1, r6
 800539c:	2300      	movs	r3, #0
 800539e:	220a      	movs	r2, #10
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fa39 	bl	8005818 <__multadd>
 80053a6:	f1bb 0f00 	cmp.w	fp, #0
 80053aa:	4606      	mov	r6, r0
 80053ac:	f300 8093 	bgt.w	80054d6 <_dtoa_r+0x9ae>
 80053b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	dc57      	bgt.n	8005466 <_dtoa_r+0x93e>
 80053b6:	e08e      	b.n	80054d6 <_dtoa_r+0x9ae>
 80053b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053be:	e756      	b.n	800526e <_dtoa_r+0x746>
 80053c0:	9b02      	ldr	r3, [sp, #8]
 80053c2:	1e5c      	subs	r4, r3, #1
 80053c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	bfb7      	itett	lt
 80053ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80053cc:	1b1c      	subge	r4, r3, r4
 80053ce:	1ae2      	sublt	r2, r4, r3
 80053d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80053d2:	bfbe      	ittt	lt
 80053d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80053d6:	189b      	addlt	r3, r3, r2
 80053d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80053da:	9b02      	ldr	r3, [sp, #8]
 80053dc:	bfb8      	it	lt
 80053de:	2400      	movlt	r4, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bfbb      	ittet	lt
 80053e4:	9b06      	ldrlt	r3, [sp, #24]
 80053e6:	9a02      	ldrlt	r2, [sp, #8]
 80053e8:	9f06      	ldrge	r7, [sp, #24]
 80053ea:	1a9f      	sublt	r7, r3, r2
 80053ec:	bfac      	ite	ge
 80053ee:	9b02      	ldrge	r3, [sp, #8]
 80053f0:	2300      	movlt	r3, #0
 80053f2:	e73e      	b.n	8005272 <_dtoa_r+0x74a>
 80053f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053f6:	9f06      	ldr	r7, [sp, #24]
 80053f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80053fa:	e745      	b.n	8005288 <_dtoa_r+0x760>
 80053fc:	3fe00000 	.word	0x3fe00000
 8005400:	40240000 	.word	0x40240000
 8005404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005406:	e76a      	b.n	80052de <_dtoa_r+0x7b6>
 8005408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800540a:	2b01      	cmp	r3, #1
 800540c:	dc19      	bgt.n	8005442 <_dtoa_r+0x91a>
 800540e:	9b04      	ldr	r3, [sp, #16]
 8005410:	b9bb      	cbnz	r3, 8005442 <_dtoa_r+0x91a>
 8005412:	9b05      	ldr	r3, [sp, #20]
 8005414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005418:	b99b      	cbnz	r3, 8005442 <_dtoa_r+0x91a>
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005420:	0d1b      	lsrs	r3, r3, #20
 8005422:	051b      	lsls	r3, r3, #20
 8005424:	b183      	cbz	r3, 8005448 <_dtoa_r+0x920>
 8005426:	f04f 0801 	mov.w	r8, #1
 800542a:	9b06      	ldr	r3, [sp, #24]
 800542c:	3301      	adds	r3, #1
 800542e:	9306      	str	r3, [sp, #24]
 8005430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	9309      	str	r3, [sp, #36]	; 0x24
 8005436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f af6a 	bne.w	8005312 <_dtoa_r+0x7ea>
 800543e:	2001      	movs	r0, #1
 8005440:	e76f      	b.n	8005322 <_dtoa_r+0x7fa>
 8005442:	f04f 0800 	mov.w	r8, #0
 8005446:	e7f6      	b.n	8005436 <_dtoa_r+0x90e>
 8005448:	4698      	mov	r8, r3
 800544a:	e7f4      	b.n	8005436 <_dtoa_r+0x90e>
 800544c:	f43f af7d 	beq.w	800534a <_dtoa_r+0x822>
 8005450:	4618      	mov	r0, r3
 8005452:	301c      	adds	r0, #28
 8005454:	e772      	b.n	800533c <_dtoa_r+0x814>
 8005456:	9b02      	ldr	r3, [sp, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc36      	bgt.n	80054ca <_dtoa_r+0x9a2>
 800545c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800545e:	2b02      	cmp	r3, #2
 8005460:	dd33      	ble.n	80054ca <_dtoa_r+0x9a2>
 8005462:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005466:	f1bb 0f00 	cmp.w	fp, #0
 800546a:	d10d      	bne.n	8005488 <_dtoa_r+0x960>
 800546c:	4621      	mov	r1, r4
 800546e:	465b      	mov	r3, fp
 8005470:	2205      	movs	r2, #5
 8005472:	4628      	mov	r0, r5
 8005474:	f000 f9d0 	bl	8005818 <__multadd>
 8005478:	4601      	mov	r1, r0
 800547a:	4604      	mov	r4, r0
 800547c:	4650      	mov	r0, sl
 800547e:	f000 fbe3 	bl	8005c48 <__mcmp>
 8005482:	2800      	cmp	r0, #0
 8005484:	f73f adb6 	bgt.w	8004ff4 <_dtoa_r+0x4cc>
 8005488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800548a:	9f08      	ldr	r7, [sp, #32]
 800548c:	ea6f 0903 	mvn.w	r9, r3
 8005490:	f04f 0800 	mov.w	r8, #0
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f99c 	bl	80057d4 <_Bfree>
 800549c:	2e00      	cmp	r6, #0
 800549e:	f43f aea4 	beq.w	80051ea <_dtoa_r+0x6c2>
 80054a2:	f1b8 0f00 	cmp.w	r8, #0
 80054a6:	d005      	beq.n	80054b4 <_dtoa_r+0x98c>
 80054a8:	45b0      	cmp	r8, r6
 80054aa:	d003      	beq.n	80054b4 <_dtoa_r+0x98c>
 80054ac:	4641      	mov	r1, r8
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 f990 	bl	80057d4 <_Bfree>
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f98c 	bl	80057d4 <_Bfree>
 80054bc:	e695      	b.n	80051ea <_dtoa_r+0x6c2>
 80054be:	2400      	movs	r4, #0
 80054c0:	4626      	mov	r6, r4
 80054c2:	e7e1      	b.n	8005488 <_dtoa_r+0x960>
 80054c4:	46c1      	mov	r9, r8
 80054c6:	4626      	mov	r6, r4
 80054c8:	e594      	b.n	8004ff4 <_dtoa_r+0x4cc>
 80054ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80fc 	beq.w	80056ce <_dtoa_r+0xba6>
 80054d6:	2f00      	cmp	r7, #0
 80054d8:	dd05      	ble.n	80054e6 <_dtoa_r+0x9be>
 80054da:	4631      	mov	r1, r6
 80054dc:	463a      	mov	r2, r7
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fb46 	bl	8005b70 <__lshift>
 80054e4:	4606      	mov	r6, r0
 80054e6:	f1b8 0f00 	cmp.w	r8, #0
 80054ea:	d05c      	beq.n	80055a6 <_dtoa_r+0xa7e>
 80054ec:	4628      	mov	r0, r5
 80054ee:	6871      	ldr	r1, [r6, #4]
 80054f0:	f000 f930 	bl	8005754 <_Balloc>
 80054f4:	4607      	mov	r7, r0
 80054f6:	b928      	cbnz	r0, 8005504 <_dtoa_r+0x9dc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80054fe:	4b7e      	ldr	r3, [pc, #504]	; (80056f8 <_dtoa_r+0xbd0>)
 8005500:	f7ff bb26 	b.w	8004b50 <_dtoa_r+0x28>
 8005504:	6932      	ldr	r2, [r6, #16]
 8005506:	f106 010c 	add.w	r1, r6, #12
 800550a:	3202      	adds	r2, #2
 800550c:	0092      	lsls	r2, r2, #2
 800550e:	300c      	adds	r0, #12
 8005510:	f000 f912 	bl	8005738 <memcpy>
 8005514:	2201      	movs	r2, #1
 8005516:	4639      	mov	r1, r7
 8005518:	4628      	mov	r0, r5
 800551a:	f000 fb29 	bl	8005b70 <__lshift>
 800551e:	46b0      	mov	r8, r6
 8005520:	4606      	mov	r6, r0
 8005522:	9b08      	ldr	r3, [sp, #32]
 8005524:	3301      	adds	r3, #1
 8005526:	9302      	str	r3, [sp, #8]
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	445b      	add	r3, fp
 800552c:	930a      	str	r3, [sp, #40]	; 0x28
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	9309      	str	r3, [sp, #36]	; 0x24
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	4621      	mov	r1, r4
 800553a:	4650      	mov	r0, sl
 800553c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005540:	f7ff fa64 	bl	8004a0c <quorem>
 8005544:	4603      	mov	r3, r0
 8005546:	4641      	mov	r1, r8
 8005548:	3330      	adds	r3, #48	; 0x30
 800554a:	9004      	str	r0, [sp, #16]
 800554c:	4650      	mov	r0, sl
 800554e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005550:	f000 fb7a 	bl	8005c48 <__mcmp>
 8005554:	4632      	mov	r2, r6
 8005556:	9006      	str	r0, [sp, #24]
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fb90 	bl	8005c80 <__mdiff>
 8005560:	68c2      	ldr	r2, [r0, #12]
 8005562:	4607      	mov	r7, r0
 8005564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005566:	bb02      	cbnz	r2, 80055aa <_dtoa_r+0xa82>
 8005568:	4601      	mov	r1, r0
 800556a:	4650      	mov	r0, sl
 800556c:	f000 fb6c 	bl	8005c48 <__mcmp>
 8005570:	4602      	mov	r2, r0
 8005572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005574:	4639      	mov	r1, r7
 8005576:	4628      	mov	r0, r5
 8005578:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800557c:	f000 f92a 	bl	80057d4 <_Bfree>
 8005580:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005584:	9f02      	ldr	r7, [sp, #8]
 8005586:	ea43 0102 	orr.w	r1, r3, r2
 800558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558c:	430b      	orrs	r3, r1
 800558e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005590:	d10d      	bne.n	80055ae <_dtoa_r+0xa86>
 8005592:	2b39      	cmp	r3, #57	; 0x39
 8005594:	d027      	beq.n	80055e6 <_dtoa_r+0xabe>
 8005596:	9a06      	ldr	r2, [sp, #24]
 8005598:	2a00      	cmp	r2, #0
 800559a:	dd01      	ble.n	80055a0 <_dtoa_r+0xa78>
 800559c:	9b04      	ldr	r3, [sp, #16]
 800559e:	3331      	adds	r3, #49	; 0x31
 80055a0:	f88b 3000 	strb.w	r3, [fp]
 80055a4:	e776      	b.n	8005494 <_dtoa_r+0x96c>
 80055a6:	4630      	mov	r0, r6
 80055a8:	e7b9      	b.n	800551e <_dtoa_r+0x9f6>
 80055aa:	2201      	movs	r2, #1
 80055ac:	e7e2      	b.n	8005574 <_dtoa_r+0xa4c>
 80055ae:	9906      	ldr	r1, [sp, #24]
 80055b0:	2900      	cmp	r1, #0
 80055b2:	db04      	blt.n	80055be <_dtoa_r+0xa96>
 80055b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80055b6:	4301      	orrs	r1, r0
 80055b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ba:	4301      	orrs	r1, r0
 80055bc:	d120      	bne.n	8005600 <_dtoa_r+0xad8>
 80055be:	2a00      	cmp	r2, #0
 80055c0:	ddee      	ble.n	80055a0 <_dtoa_r+0xa78>
 80055c2:	4651      	mov	r1, sl
 80055c4:	2201      	movs	r2, #1
 80055c6:	4628      	mov	r0, r5
 80055c8:	9302      	str	r3, [sp, #8]
 80055ca:	f000 fad1 	bl	8005b70 <__lshift>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4682      	mov	sl, r0
 80055d2:	f000 fb39 	bl	8005c48 <__mcmp>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	9b02      	ldr	r3, [sp, #8]
 80055da:	dc02      	bgt.n	80055e2 <_dtoa_r+0xaba>
 80055dc:	d1e0      	bne.n	80055a0 <_dtoa_r+0xa78>
 80055de:	07da      	lsls	r2, r3, #31
 80055e0:	d5de      	bpl.n	80055a0 <_dtoa_r+0xa78>
 80055e2:	2b39      	cmp	r3, #57	; 0x39
 80055e4:	d1da      	bne.n	800559c <_dtoa_r+0xa74>
 80055e6:	2339      	movs	r3, #57	; 0x39
 80055e8:	f88b 3000 	strb.w	r3, [fp]
 80055ec:	463b      	mov	r3, r7
 80055ee:	461f      	mov	r7, r3
 80055f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	2a39      	cmp	r2, #57	; 0x39
 80055f8:	d050      	beq.n	800569c <_dtoa_r+0xb74>
 80055fa:	3201      	adds	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e749      	b.n	8005494 <_dtoa_r+0x96c>
 8005600:	2a00      	cmp	r2, #0
 8005602:	dd03      	ble.n	800560c <_dtoa_r+0xae4>
 8005604:	2b39      	cmp	r3, #57	; 0x39
 8005606:	d0ee      	beq.n	80055e6 <_dtoa_r+0xabe>
 8005608:	3301      	adds	r3, #1
 800560a:	e7c9      	b.n	80055a0 <_dtoa_r+0xa78>
 800560c:	9a02      	ldr	r2, [sp, #8]
 800560e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005610:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005614:	428a      	cmp	r2, r1
 8005616:	d02a      	beq.n	800566e <_dtoa_r+0xb46>
 8005618:	4651      	mov	r1, sl
 800561a:	2300      	movs	r3, #0
 800561c:	220a      	movs	r2, #10
 800561e:	4628      	mov	r0, r5
 8005620:	f000 f8fa 	bl	8005818 <__multadd>
 8005624:	45b0      	cmp	r8, r6
 8005626:	4682      	mov	sl, r0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f04f 020a 	mov.w	r2, #10
 8005630:	4641      	mov	r1, r8
 8005632:	4628      	mov	r0, r5
 8005634:	d107      	bne.n	8005646 <_dtoa_r+0xb1e>
 8005636:	f000 f8ef 	bl	8005818 <__multadd>
 800563a:	4680      	mov	r8, r0
 800563c:	4606      	mov	r6, r0
 800563e:	9b02      	ldr	r3, [sp, #8]
 8005640:	3301      	adds	r3, #1
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	e777      	b.n	8005536 <_dtoa_r+0xa0e>
 8005646:	f000 f8e7 	bl	8005818 <__multadd>
 800564a:	4631      	mov	r1, r6
 800564c:	4680      	mov	r8, r0
 800564e:	2300      	movs	r3, #0
 8005650:	220a      	movs	r2, #10
 8005652:	4628      	mov	r0, r5
 8005654:	f000 f8e0 	bl	8005818 <__multadd>
 8005658:	4606      	mov	r6, r0
 800565a:	e7f0      	b.n	800563e <_dtoa_r+0xb16>
 800565c:	f1bb 0f00 	cmp.w	fp, #0
 8005660:	bfcc      	ite	gt
 8005662:	465f      	movgt	r7, fp
 8005664:	2701      	movle	r7, #1
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	9a08      	ldr	r2, [sp, #32]
 800566c:	4417      	add	r7, r2
 800566e:	4651      	mov	r1, sl
 8005670:	2201      	movs	r2, #1
 8005672:	4628      	mov	r0, r5
 8005674:	9302      	str	r3, [sp, #8]
 8005676:	f000 fa7b 	bl	8005b70 <__lshift>
 800567a:	4621      	mov	r1, r4
 800567c:	4682      	mov	sl, r0
 800567e:	f000 fae3 	bl	8005c48 <__mcmp>
 8005682:	2800      	cmp	r0, #0
 8005684:	dcb2      	bgt.n	80055ec <_dtoa_r+0xac4>
 8005686:	d102      	bne.n	800568e <_dtoa_r+0xb66>
 8005688:	9b02      	ldr	r3, [sp, #8]
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d4ae      	bmi.n	80055ec <_dtoa_r+0xac4>
 800568e:	463b      	mov	r3, r7
 8005690:	461f      	mov	r7, r3
 8005692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005696:	2a30      	cmp	r2, #48	; 0x30
 8005698:	d0fa      	beq.n	8005690 <_dtoa_r+0xb68>
 800569a:	e6fb      	b.n	8005494 <_dtoa_r+0x96c>
 800569c:	9a08      	ldr	r2, [sp, #32]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d1a5      	bne.n	80055ee <_dtoa_r+0xac6>
 80056a2:	2331      	movs	r3, #49	; 0x31
 80056a4:	f109 0901 	add.w	r9, r9, #1
 80056a8:	7013      	strb	r3, [r2, #0]
 80056aa:	e6f3      	b.n	8005494 <_dtoa_r+0x96c>
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <_dtoa_r+0xbd4>)
 80056ae:	f7ff baa7 	b.w	8004c00 <_dtoa_r+0xd8>
 80056b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f47f aa80 	bne.w	8004bba <_dtoa_r+0x92>
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <_dtoa_r+0xbd8>)
 80056bc:	f7ff baa0 	b.w	8004c00 <_dtoa_r+0xd8>
 80056c0:	f1bb 0f00 	cmp.w	fp, #0
 80056c4:	dc03      	bgt.n	80056ce <_dtoa_r+0xba6>
 80056c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	f73f aecc 	bgt.w	8005466 <_dtoa_r+0x93e>
 80056ce:	9f08      	ldr	r7, [sp, #32]
 80056d0:	4621      	mov	r1, r4
 80056d2:	4650      	mov	r0, sl
 80056d4:	f7ff f99a 	bl	8004a0c <quorem>
 80056d8:	9a08      	ldr	r2, [sp, #32]
 80056da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80056de:	f807 3b01 	strb.w	r3, [r7], #1
 80056e2:	1aba      	subs	r2, r7, r2
 80056e4:	4593      	cmp	fp, r2
 80056e6:	ddb9      	ble.n	800565c <_dtoa_r+0xb34>
 80056e8:	4651      	mov	r1, sl
 80056ea:	2300      	movs	r3, #0
 80056ec:	220a      	movs	r2, #10
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f892 	bl	8005818 <__multadd>
 80056f4:	4682      	mov	sl, r0
 80056f6:	e7eb      	b.n	80056d0 <_dtoa_r+0xba8>
 80056f8:	08007f9c 	.word	0x08007f9c
 80056fc:	08007df4 	.word	0x08007df4
 8005700:	08007f19 	.word	0x08007f19

08005704 <_localeconv_r>:
 8005704:	4800      	ldr	r0, [pc, #0]	; (8005708 <_localeconv_r+0x4>)
 8005706:	4770      	bx	lr
 8005708:	20000160 	.word	0x20000160

0800570c <malloc>:
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <malloc+0xc>)
 800570e:	4601      	mov	r1, r0
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f000 bbfb 	b.w	8005f0c <_malloc_r>
 8005716:	bf00      	nop
 8005718:	2000000c 	.word	0x2000000c

0800571c <memchr>:
 800571c:	4603      	mov	r3, r0
 800571e:	b510      	push	{r4, lr}
 8005720:	b2c9      	uxtb	r1, r1
 8005722:	4402      	add	r2, r0
 8005724:	4293      	cmp	r3, r2
 8005726:	4618      	mov	r0, r3
 8005728:	d101      	bne.n	800572e <memchr+0x12>
 800572a:	2000      	movs	r0, #0
 800572c:	e003      	b.n	8005736 <memchr+0x1a>
 800572e:	7804      	ldrb	r4, [r0, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	428c      	cmp	r4, r1
 8005734:	d1f6      	bne.n	8005724 <memchr+0x8>
 8005736:	bd10      	pop	{r4, pc}

08005738 <memcpy>:
 8005738:	440a      	add	r2, r1
 800573a:	4291      	cmp	r1, r2
 800573c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005740:	d100      	bne.n	8005744 <memcpy+0xc>
 8005742:	4770      	bx	lr
 8005744:	b510      	push	{r4, lr}
 8005746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800574a:	4291      	cmp	r1, r2
 800574c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005750:	d1f9      	bne.n	8005746 <memcpy+0xe>
 8005752:	bd10      	pop	{r4, pc}

08005754 <_Balloc>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	b976      	cbnz	r6, 800577c <_Balloc+0x28>
 800575e:	2010      	movs	r0, #16
 8005760:	f7ff ffd4 	bl	800570c <malloc>
 8005764:	4602      	mov	r2, r0
 8005766:	6260      	str	r0, [r4, #36]	; 0x24
 8005768:	b920      	cbnz	r0, 8005774 <_Balloc+0x20>
 800576a:	2166      	movs	r1, #102	; 0x66
 800576c:	4b17      	ldr	r3, [pc, #92]	; (80057cc <_Balloc+0x78>)
 800576e:	4818      	ldr	r0, [pc, #96]	; (80057d0 <_Balloc+0x7c>)
 8005770:	f000 fd92 	bl	8006298 <__assert_func>
 8005774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005778:	6006      	str	r6, [r0, #0]
 800577a:	60c6      	str	r6, [r0, #12]
 800577c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800577e:	68f3      	ldr	r3, [r6, #12]
 8005780:	b183      	cbz	r3, 80057a4 <_Balloc+0x50>
 8005782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800578a:	b9b8      	cbnz	r0, 80057bc <_Balloc+0x68>
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f605 	lsl.w	r6, r1, r5
 8005792:	1d72      	adds	r2, r6, #5
 8005794:	4620      	mov	r0, r4
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	f000 fb5e 	bl	8005e58 <_calloc_r>
 800579c:	b160      	cbz	r0, 80057b8 <_Balloc+0x64>
 800579e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057a2:	e00e      	b.n	80057c2 <_Balloc+0x6e>
 80057a4:	2221      	movs	r2, #33	; 0x21
 80057a6:	2104      	movs	r1, #4
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fb55 	bl	8005e58 <_calloc_r>
 80057ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b0:	60f0      	str	r0, [r6, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e4      	bne.n	8005782 <_Balloc+0x2e>
 80057b8:	2000      	movs	r0, #0
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	6802      	ldr	r2, [r0, #0]
 80057be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057c2:	2300      	movs	r3, #0
 80057c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057c8:	e7f7      	b.n	80057ba <_Balloc+0x66>
 80057ca:	bf00      	nop
 80057cc:	08007f26 	.word	0x08007f26
 80057d0:	08007fad 	.word	0x08007fad

080057d4 <_Bfree>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057d8:	4605      	mov	r5, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	b976      	cbnz	r6, 80057fc <_Bfree+0x28>
 80057de:	2010      	movs	r0, #16
 80057e0:	f7ff ff94 	bl	800570c <malloc>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6268      	str	r0, [r5, #36]	; 0x24
 80057e8:	b920      	cbnz	r0, 80057f4 <_Bfree+0x20>
 80057ea:	218a      	movs	r1, #138	; 0x8a
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <_Bfree+0x3c>)
 80057ee:	4809      	ldr	r0, [pc, #36]	; (8005814 <_Bfree+0x40>)
 80057f0:	f000 fd52 	bl	8006298 <__assert_func>
 80057f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057f8:	6006      	str	r6, [r0, #0]
 80057fa:	60c6      	str	r6, [r0, #12]
 80057fc:	b13c      	cbz	r4, 800580e <_Bfree+0x3a>
 80057fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005800:	6862      	ldr	r2, [r4, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005808:	6021      	str	r1, [r4, #0]
 800580a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	08007f26 	.word	0x08007f26
 8005814:	08007fad 	.word	0x08007fad

08005818 <__multadd>:
 8005818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581c:	4698      	mov	r8, r3
 800581e:	460c      	mov	r4, r1
 8005820:	2300      	movs	r3, #0
 8005822:	690e      	ldr	r6, [r1, #16]
 8005824:	4607      	mov	r7, r0
 8005826:	f101 0014 	add.w	r0, r1, #20
 800582a:	6805      	ldr	r5, [r0, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	b2a9      	uxth	r1, r5
 8005830:	fb02 8101 	mla	r1, r2, r1, r8
 8005834:	0c2d      	lsrs	r5, r5, #16
 8005836:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800583a:	fb02 c505 	mla	r5, r2, r5, ip
 800583e:	b289      	uxth	r1, r1
 8005840:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005844:	429e      	cmp	r6, r3
 8005846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800584a:	f840 1b04 	str.w	r1, [r0], #4
 800584e:	dcec      	bgt.n	800582a <__multadd+0x12>
 8005850:	f1b8 0f00 	cmp.w	r8, #0
 8005854:	d022      	beq.n	800589c <__multadd+0x84>
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	42b3      	cmp	r3, r6
 800585a:	dc19      	bgt.n	8005890 <__multadd+0x78>
 800585c:	6861      	ldr	r1, [r4, #4]
 800585e:	4638      	mov	r0, r7
 8005860:	3101      	adds	r1, #1
 8005862:	f7ff ff77 	bl	8005754 <_Balloc>
 8005866:	4605      	mov	r5, r0
 8005868:	b928      	cbnz	r0, 8005876 <__multadd+0x5e>
 800586a:	4602      	mov	r2, r0
 800586c:	21b5      	movs	r1, #181	; 0xb5
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <__multadd+0x8c>)
 8005870:	480d      	ldr	r0, [pc, #52]	; (80058a8 <__multadd+0x90>)
 8005872:	f000 fd11 	bl	8006298 <__assert_func>
 8005876:	6922      	ldr	r2, [r4, #16]
 8005878:	f104 010c 	add.w	r1, r4, #12
 800587c:	3202      	adds	r2, #2
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	300c      	adds	r0, #12
 8005882:	f7ff ff59 	bl	8005738 <memcpy>
 8005886:	4621      	mov	r1, r4
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ffa3 	bl	80057d4 <_Bfree>
 800588e:	462c      	mov	r4, r5
 8005890:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005894:	3601      	adds	r6, #1
 8005896:	f8c3 8014 	str.w	r8, [r3, #20]
 800589a:	6126      	str	r6, [r4, #16]
 800589c:	4620      	mov	r0, r4
 800589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a2:	bf00      	nop
 80058a4:	08007f9c 	.word	0x08007f9c
 80058a8:	08007fad 	.word	0x08007fad

080058ac <__hi0bits>:
 80058ac:	0c02      	lsrs	r2, r0, #16
 80058ae:	0412      	lsls	r2, r2, #16
 80058b0:	4603      	mov	r3, r0
 80058b2:	b9ca      	cbnz	r2, 80058e8 <__hi0bits+0x3c>
 80058b4:	0403      	lsls	r3, r0, #16
 80058b6:	2010      	movs	r0, #16
 80058b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80058bc:	bf04      	itt	eq
 80058be:	021b      	lsleq	r3, r3, #8
 80058c0:	3008      	addeq	r0, #8
 80058c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80058c6:	bf04      	itt	eq
 80058c8:	011b      	lsleq	r3, r3, #4
 80058ca:	3004      	addeq	r0, #4
 80058cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80058d0:	bf04      	itt	eq
 80058d2:	009b      	lsleq	r3, r3, #2
 80058d4:	3002      	addeq	r0, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db05      	blt.n	80058e6 <__hi0bits+0x3a>
 80058da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80058de:	f100 0001 	add.w	r0, r0, #1
 80058e2:	bf08      	it	eq
 80058e4:	2020      	moveq	r0, #32
 80058e6:	4770      	bx	lr
 80058e8:	2000      	movs	r0, #0
 80058ea:	e7e5      	b.n	80058b8 <__hi0bits+0xc>

080058ec <__lo0bits>:
 80058ec:	6803      	ldr	r3, [r0, #0]
 80058ee:	4602      	mov	r2, r0
 80058f0:	f013 0007 	ands.w	r0, r3, #7
 80058f4:	d00b      	beq.n	800590e <__lo0bits+0x22>
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	d422      	bmi.n	8005940 <__lo0bits+0x54>
 80058fa:	0798      	lsls	r0, r3, #30
 80058fc:	bf49      	itett	mi
 80058fe:	085b      	lsrmi	r3, r3, #1
 8005900:	089b      	lsrpl	r3, r3, #2
 8005902:	2001      	movmi	r0, #1
 8005904:	6013      	strmi	r3, [r2, #0]
 8005906:	bf5c      	itt	pl
 8005908:	2002      	movpl	r0, #2
 800590a:	6013      	strpl	r3, [r2, #0]
 800590c:	4770      	bx	lr
 800590e:	b299      	uxth	r1, r3
 8005910:	b909      	cbnz	r1, 8005916 <__lo0bits+0x2a>
 8005912:	2010      	movs	r0, #16
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f013 0fff 	tst.w	r3, #255	; 0xff
 800591a:	bf04      	itt	eq
 800591c:	0a1b      	lsreq	r3, r3, #8
 800591e:	3008      	addeq	r0, #8
 8005920:	0719      	lsls	r1, r3, #28
 8005922:	bf04      	itt	eq
 8005924:	091b      	lsreq	r3, r3, #4
 8005926:	3004      	addeq	r0, #4
 8005928:	0799      	lsls	r1, r3, #30
 800592a:	bf04      	itt	eq
 800592c:	089b      	lsreq	r3, r3, #2
 800592e:	3002      	addeq	r0, #2
 8005930:	07d9      	lsls	r1, r3, #31
 8005932:	d403      	bmi.n	800593c <__lo0bits+0x50>
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	f100 0001 	add.w	r0, r0, #1
 800593a:	d003      	beq.n	8005944 <__lo0bits+0x58>
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4770      	bx	lr
 8005940:	2000      	movs	r0, #0
 8005942:	4770      	bx	lr
 8005944:	2020      	movs	r0, #32
 8005946:	4770      	bx	lr

08005948 <__i2b>:
 8005948:	b510      	push	{r4, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	2101      	movs	r1, #1
 800594e:	f7ff ff01 	bl	8005754 <_Balloc>
 8005952:	4602      	mov	r2, r0
 8005954:	b928      	cbnz	r0, 8005962 <__i2b+0x1a>
 8005956:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800595a:	4b04      	ldr	r3, [pc, #16]	; (800596c <__i2b+0x24>)
 800595c:	4804      	ldr	r0, [pc, #16]	; (8005970 <__i2b+0x28>)
 800595e:	f000 fc9b 	bl	8006298 <__assert_func>
 8005962:	2301      	movs	r3, #1
 8005964:	6144      	str	r4, [r0, #20]
 8005966:	6103      	str	r3, [r0, #16]
 8005968:	bd10      	pop	{r4, pc}
 800596a:	bf00      	nop
 800596c:	08007f9c 	.word	0x08007f9c
 8005970:	08007fad 	.word	0x08007fad

08005974 <__multiply>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	4614      	mov	r4, r2
 800597a:	690a      	ldr	r2, [r1, #16]
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	460d      	mov	r5, r1
 8005980:	429a      	cmp	r2, r3
 8005982:	bfbe      	ittt	lt
 8005984:	460b      	movlt	r3, r1
 8005986:	4625      	movlt	r5, r4
 8005988:	461c      	movlt	r4, r3
 800598a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800598e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005992:	68ab      	ldr	r3, [r5, #8]
 8005994:	6869      	ldr	r1, [r5, #4]
 8005996:	eb0a 0709 	add.w	r7, sl, r9
 800599a:	42bb      	cmp	r3, r7
 800599c:	b085      	sub	sp, #20
 800599e:	bfb8      	it	lt
 80059a0:	3101      	addlt	r1, #1
 80059a2:	f7ff fed7 	bl	8005754 <_Balloc>
 80059a6:	b930      	cbnz	r0, 80059b6 <__multiply+0x42>
 80059a8:	4602      	mov	r2, r0
 80059aa:	f240 115d 	movw	r1, #349	; 0x15d
 80059ae:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <__multiply+0x140>)
 80059b0:	4841      	ldr	r0, [pc, #260]	; (8005ab8 <__multiply+0x144>)
 80059b2:	f000 fc71 	bl	8006298 <__assert_func>
 80059b6:	f100 0614 	add.w	r6, r0, #20
 80059ba:	4633      	mov	r3, r6
 80059bc:	2200      	movs	r2, #0
 80059be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80059c2:	4543      	cmp	r3, r8
 80059c4:	d31e      	bcc.n	8005a04 <__multiply+0x90>
 80059c6:	f105 0c14 	add.w	ip, r5, #20
 80059ca:	f104 0314 	add.w	r3, r4, #20
 80059ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80059d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80059d6:	9202      	str	r2, [sp, #8]
 80059d8:	ebac 0205 	sub.w	r2, ip, r5
 80059dc:	3a15      	subs	r2, #21
 80059de:	f022 0203 	bic.w	r2, r2, #3
 80059e2:	3204      	adds	r2, #4
 80059e4:	f105 0115 	add.w	r1, r5, #21
 80059e8:	458c      	cmp	ip, r1
 80059ea:	bf38      	it	cc
 80059ec:	2204      	movcc	r2, #4
 80059ee:	9201      	str	r2, [sp, #4]
 80059f0:	9a02      	ldr	r2, [sp, #8]
 80059f2:	9303      	str	r3, [sp, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d808      	bhi.n	8005a0a <__multiply+0x96>
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	dc55      	bgt.n	8005aa8 <__multiply+0x134>
 80059fc:	6107      	str	r7, [r0, #16]
 80059fe:	b005      	add	sp, #20
 8005a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	f843 2b04 	str.w	r2, [r3], #4
 8005a08:	e7db      	b.n	80059c2 <__multiply+0x4e>
 8005a0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a0e:	f1ba 0f00 	cmp.w	sl, #0
 8005a12:	d020      	beq.n	8005a56 <__multiply+0xe2>
 8005a14:	46b1      	mov	r9, r6
 8005a16:	2200      	movs	r2, #0
 8005a18:	f105 0e14 	add.w	lr, r5, #20
 8005a1c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005a20:	f8d9 b000 	ldr.w	fp, [r9]
 8005a24:	b2a1      	uxth	r1, r4
 8005a26:	fa1f fb8b 	uxth.w	fp, fp
 8005a2a:	fb0a b101 	mla	r1, sl, r1, fp
 8005a2e:	4411      	add	r1, r2
 8005a30:	f8d9 2000 	ldr.w	r2, [r9]
 8005a34:	0c24      	lsrs	r4, r4, #16
 8005a36:	0c12      	lsrs	r2, r2, #16
 8005a38:	fb0a 2404 	mla	r4, sl, r4, r2
 8005a3c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005a40:	b289      	uxth	r1, r1
 8005a42:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005a46:	45f4      	cmp	ip, lr
 8005a48:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005a4c:	f849 1b04 	str.w	r1, [r9], #4
 8005a50:	d8e4      	bhi.n	8005a1c <__multiply+0xa8>
 8005a52:	9901      	ldr	r1, [sp, #4]
 8005a54:	5072      	str	r2, [r6, r1]
 8005a56:	9a03      	ldr	r2, [sp, #12]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a5e:	f1b9 0f00 	cmp.w	r9, #0
 8005a62:	d01f      	beq.n	8005aa4 <__multiply+0x130>
 8005a64:	46b6      	mov	lr, r6
 8005a66:	f04f 0a00 	mov.w	sl, #0
 8005a6a:	6834      	ldr	r4, [r6, #0]
 8005a6c:	f105 0114 	add.w	r1, r5, #20
 8005a70:	880a      	ldrh	r2, [r1, #0]
 8005a72:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005a76:	b2a4      	uxth	r4, r4
 8005a78:	fb09 b202 	mla	r2, r9, r2, fp
 8005a7c:	4492      	add	sl, r2
 8005a7e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005a82:	f84e 4b04 	str.w	r4, [lr], #4
 8005a86:	f851 4b04 	ldr.w	r4, [r1], #4
 8005a8a:	f8be 2000 	ldrh.w	r2, [lr]
 8005a8e:	0c24      	lsrs	r4, r4, #16
 8005a90:	fb09 2404 	mla	r4, r9, r4, r2
 8005a94:	458c      	cmp	ip, r1
 8005a96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005a9a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a9e:	d8e7      	bhi.n	8005a70 <__multiply+0xfc>
 8005aa0:	9a01      	ldr	r2, [sp, #4]
 8005aa2:	50b4      	str	r4, [r6, r2]
 8005aa4:	3604      	adds	r6, #4
 8005aa6:	e7a3      	b.n	80059f0 <__multiply+0x7c>
 8005aa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1a5      	bne.n	80059fc <__multiply+0x88>
 8005ab0:	3f01      	subs	r7, #1
 8005ab2:	e7a1      	b.n	80059f8 <__multiply+0x84>
 8005ab4:	08007f9c 	.word	0x08007f9c
 8005ab8:	08007fad 	.word	0x08007fad

08005abc <__pow5mult>:
 8005abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	f012 0203 	ands.w	r2, r2, #3
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	460f      	mov	r7, r1
 8005aca:	d007      	beq.n	8005adc <__pow5mult+0x20>
 8005acc:	4c25      	ldr	r4, [pc, #148]	; (8005b64 <__pow5mult+0xa8>)
 8005ace:	3a01      	subs	r2, #1
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ad6:	f7ff fe9f 	bl	8005818 <__multadd>
 8005ada:	4607      	mov	r7, r0
 8005adc:	10ad      	asrs	r5, r5, #2
 8005ade:	d03d      	beq.n	8005b5c <__pow5mult+0xa0>
 8005ae0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ae2:	b97c      	cbnz	r4, 8005b04 <__pow5mult+0x48>
 8005ae4:	2010      	movs	r0, #16
 8005ae6:	f7ff fe11 	bl	800570c <malloc>
 8005aea:	4602      	mov	r2, r0
 8005aec:	6270      	str	r0, [r6, #36]	; 0x24
 8005aee:	b928      	cbnz	r0, 8005afc <__pow5mult+0x40>
 8005af0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005af4:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <__pow5mult+0xac>)
 8005af6:	481d      	ldr	r0, [pc, #116]	; (8005b6c <__pow5mult+0xb0>)
 8005af8:	f000 fbce 	bl	8006298 <__assert_func>
 8005afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b00:	6004      	str	r4, [r0, #0]
 8005b02:	60c4      	str	r4, [r0, #12]
 8005b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b0c:	b94c      	cbnz	r4, 8005b22 <__pow5mult+0x66>
 8005b0e:	f240 2171 	movw	r1, #625	; 0x271
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ff18 	bl	8005948 <__i2b>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b20:	6003      	str	r3, [r0, #0]
 8005b22:	f04f 0900 	mov.w	r9, #0
 8005b26:	07eb      	lsls	r3, r5, #31
 8005b28:	d50a      	bpl.n	8005b40 <__pow5mult+0x84>
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7ff ff20 	bl	8005974 <__multiply>
 8005b34:	4680      	mov	r8, r0
 8005b36:	4639      	mov	r1, r7
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f7ff fe4b 	bl	80057d4 <_Bfree>
 8005b3e:	4647      	mov	r7, r8
 8005b40:	106d      	asrs	r5, r5, #1
 8005b42:	d00b      	beq.n	8005b5c <__pow5mult+0xa0>
 8005b44:	6820      	ldr	r0, [r4, #0]
 8005b46:	b938      	cbnz	r0, 8005b58 <__pow5mult+0x9c>
 8005b48:	4622      	mov	r2, r4
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f7ff ff11 	bl	8005974 <__multiply>
 8005b52:	6020      	str	r0, [r4, #0]
 8005b54:	f8c0 9000 	str.w	r9, [r0]
 8005b58:	4604      	mov	r4, r0
 8005b5a:	e7e4      	b.n	8005b26 <__pow5mult+0x6a>
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b62:	bf00      	nop
 8005b64:	08008100 	.word	0x08008100
 8005b68:	08007f26 	.word	0x08007f26
 8005b6c:	08007fad 	.word	0x08007fad

08005b70 <__lshift>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	460c      	mov	r4, r1
 8005b76:	4607      	mov	r7, r0
 8005b78:	4691      	mov	r9, r2
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	6849      	ldr	r1, [r1, #4]
 8005b7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b88:	f108 0601 	add.w	r6, r8, #1
 8005b8c:	42b3      	cmp	r3, r6
 8005b8e:	db0b      	blt.n	8005ba8 <__lshift+0x38>
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff fddf 	bl	8005754 <_Balloc>
 8005b96:	4605      	mov	r5, r0
 8005b98:	b948      	cbnz	r0, 8005bae <__lshift+0x3e>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ba0:	4b27      	ldr	r3, [pc, #156]	; (8005c40 <__lshift+0xd0>)
 8005ba2:	4828      	ldr	r0, [pc, #160]	; (8005c44 <__lshift+0xd4>)
 8005ba4:	f000 fb78 	bl	8006298 <__assert_func>
 8005ba8:	3101      	adds	r1, #1
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	e7ee      	b.n	8005b8c <__lshift+0x1c>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f100 0114 	add.w	r1, r0, #20
 8005bb4:	f100 0210 	add.w	r2, r0, #16
 8005bb8:	4618      	mov	r0, r3
 8005bba:	4553      	cmp	r3, sl
 8005bbc:	db33      	blt.n	8005c26 <__lshift+0xb6>
 8005bbe:	6920      	ldr	r0, [r4, #16]
 8005bc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bc4:	f104 0314 	add.w	r3, r4, #20
 8005bc8:	f019 091f 	ands.w	r9, r9, #31
 8005bcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005bd4:	d02b      	beq.n	8005c2e <__lshift+0xbe>
 8005bd6:	468a      	mov	sl, r1
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f1c9 0e20 	rsb	lr, r9, #32
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	fa00 f009 	lsl.w	r0, r0, r9
 8005be4:	4302      	orrs	r2, r0
 8005be6:	f84a 2b04 	str.w	r2, [sl], #4
 8005bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bee:	459c      	cmp	ip, r3
 8005bf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005bf4:	d8f3      	bhi.n	8005bde <__lshift+0x6e>
 8005bf6:	ebac 0304 	sub.w	r3, ip, r4
 8005bfa:	3b15      	subs	r3, #21
 8005bfc:	f023 0303 	bic.w	r3, r3, #3
 8005c00:	3304      	adds	r3, #4
 8005c02:	f104 0015 	add.w	r0, r4, #21
 8005c06:	4584      	cmp	ip, r0
 8005c08:	bf38      	it	cc
 8005c0a:	2304      	movcc	r3, #4
 8005c0c:	50ca      	str	r2, [r1, r3]
 8005c0e:	b10a      	cbz	r2, 8005c14 <__lshift+0xa4>
 8005c10:	f108 0602 	add.w	r6, r8, #2
 8005c14:	3e01      	subs	r6, #1
 8005c16:	4638      	mov	r0, r7
 8005c18:	4621      	mov	r1, r4
 8005c1a:	612e      	str	r6, [r5, #16]
 8005c1c:	f7ff fdda 	bl	80057d4 <_Bfree>
 8005c20:	4628      	mov	r0, r5
 8005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	e7c5      	b.n	8005bba <__lshift+0x4a>
 8005c2e:	3904      	subs	r1, #4
 8005c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c34:	459c      	cmp	ip, r3
 8005c36:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c3a:	d8f9      	bhi.n	8005c30 <__lshift+0xc0>
 8005c3c:	e7ea      	b.n	8005c14 <__lshift+0xa4>
 8005c3e:	bf00      	nop
 8005c40:	08007f9c 	.word	0x08007f9c
 8005c44:	08007fad 	.word	0x08007fad

08005c48 <__mcmp>:
 8005c48:	4603      	mov	r3, r0
 8005c4a:	690a      	ldr	r2, [r1, #16]
 8005c4c:	6900      	ldr	r0, [r0, #16]
 8005c4e:	b530      	push	{r4, r5, lr}
 8005c50:	1a80      	subs	r0, r0, r2
 8005c52:	d10d      	bne.n	8005c70 <__mcmp+0x28>
 8005c54:	3314      	adds	r3, #20
 8005c56:	3114      	adds	r1, #20
 8005c58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c68:	4295      	cmp	r5, r2
 8005c6a:	d002      	beq.n	8005c72 <__mcmp+0x2a>
 8005c6c:	d304      	bcc.n	8005c78 <__mcmp+0x30>
 8005c6e:	2001      	movs	r0, #1
 8005c70:	bd30      	pop	{r4, r5, pc}
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	d3f4      	bcc.n	8005c60 <__mcmp+0x18>
 8005c76:	e7fb      	b.n	8005c70 <__mcmp+0x28>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	e7f8      	b.n	8005c70 <__mcmp+0x28>
	...

08005c80 <__mdiff>:
 8005c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	460c      	mov	r4, r1
 8005c86:	4606      	mov	r6, r0
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4692      	mov	sl, r2
 8005c8e:	f7ff ffdb 	bl	8005c48 <__mcmp>
 8005c92:	1e05      	subs	r5, r0, #0
 8005c94:	d111      	bne.n	8005cba <__mdiff+0x3a>
 8005c96:	4629      	mov	r1, r5
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff fd5b 	bl	8005754 <_Balloc>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	b928      	cbnz	r0, 8005cae <__mdiff+0x2e>
 8005ca2:	f240 2132 	movw	r1, #562	; 0x232
 8005ca6:	4b3c      	ldr	r3, [pc, #240]	; (8005d98 <__mdiff+0x118>)
 8005ca8:	483c      	ldr	r0, [pc, #240]	; (8005d9c <__mdiff+0x11c>)
 8005caa:	f000 faf5 	bl	8006298 <__assert_func>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cba:	bfa4      	itt	ge
 8005cbc:	4653      	movge	r3, sl
 8005cbe:	46a2      	movge	sl, r4
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005cc6:	bfa6      	itte	ge
 8005cc8:	461c      	movge	r4, r3
 8005cca:	2500      	movge	r5, #0
 8005ccc:	2501      	movlt	r5, #1
 8005cce:	f7ff fd41 	bl	8005754 <_Balloc>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	b918      	cbnz	r0, 8005cde <__mdiff+0x5e>
 8005cd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005cda:	4b2f      	ldr	r3, [pc, #188]	; (8005d98 <__mdiff+0x118>)
 8005cdc:	e7e4      	b.n	8005ca8 <__mdiff+0x28>
 8005cde:	f100 0814 	add.w	r8, r0, #20
 8005ce2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005ce6:	60c5      	str	r5, [r0, #12]
 8005ce8:	f04f 0c00 	mov.w	ip, #0
 8005cec:	f10a 0514 	add.w	r5, sl, #20
 8005cf0:	f10a 0010 	add.w	r0, sl, #16
 8005cf4:	46c2      	mov	sl, r8
 8005cf6:	6926      	ldr	r6, [r4, #16]
 8005cf8:	f104 0914 	add.w	r9, r4, #20
 8005cfc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005d00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d04:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005d08:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d0c:	fa1f f18b 	uxth.w	r1, fp
 8005d10:	4461      	add	r1, ip
 8005d12:	fa1f fc83 	uxth.w	ip, r3
 8005d16:	0c1b      	lsrs	r3, r3, #16
 8005d18:	eba1 010c 	sub.w	r1, r1, ip
 8005d1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d20:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d24:	b289      	uxth	r1, r1
 8005d26:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005d2a:	454e      	cmp	r6, r9
 8005d2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d30:	f84a 3b04 	str.w	r3, [sl], #4
 8005d34:	d8e6      	bhi.n	8005d04 <__mdiff+0x84>
 8005d36:	1b33      	subs	r3, r6, r4
 8005d38:	3b15      	subs	r3, #21
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	3415      	adds	r4, #21
 8005d40:	3304      	adds	r3, #4
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	bf38      	it	cc
 8005d46:	2304      	movcc	r3, #4
 8005d48:	441d      	add	r5, r3
 8005d4a:	4443      	add	r3, r8
 8005d4c:	461e      	mov	r6, r3
 8005d4e:	462c      	mov	r4, r5
 8005d50:	4574      	cmp	r4, lr
 8005d52:	d30e      	bcc.n	8005d72 <__mdiff+0xf2>
 8005d54:	f10e 0103 	add.w	r1, lr, #3
 8005d58:	1b49      	subs	r1, r1, r5
 8005d5a:	f021 0103 	bic.w	r1, r1, #3
 8005d5e:	3d03      	subs	r5, #3
 8005d60:	45ae      	cmp	lr, r5
 8005d62:	bf38      	it	cc
 8005d64:	2100      	movcc	r1, #0
 8005d66:	4419      	add	r1, r3
 8005d68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005d6c:	b18b      	cbz	r3, 8005d92 <__mdiff+0x112>
 8005d6e:	6117      	str	r7, [r2, #16]
 8005d70:	e7a0      	b.n	8005cb4 <__mdiff+0x34>
 8005d72:	f854 8b04 	ldr.w	r8, [r4], #4
 8005d76:	fa1f f188 	uxth.w	r1, r8
 8005d7a:	4461      	add	r1, ip
 8005d7c:	1408      	asrs	r0, r1, #16
 8005d7e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005d82:	b289      	uxth	r1, r1
 8005d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d8c:	f846 1b04 	str.w	r1, [r6], #4
 8005d90:	e7de      	b.n	8005d50 <__mdiff+0xd0>
 8005d92:	3f01      	subs	r7, #1
 8005d94:	e7e8      	b.n	8005d68 <__mdiff+0xe8>
 8005d96:	bf00      	nop
 8005d98:	08007f9c 	.word	0x08007f9c
 8005d9c:	08007fad 	.word	0x08007fad

08005da0 <__d2b>:
 8005da0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005da4:	2101      	movs	r1, #1
 8005da6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005daa:	4690      	mov	r8, r2
 8005dac:	461d      	mov	r5, r3
 8005dae:	f7ff fcd1 	bl	8005754 <_Balloc>
 8005db2:	4604      	mov	r4, r0
 8005db4:	b930      	cbnz	r0, 8005dc4 <__d2b+0x24>
 8005db6:	4602      	mov	r2, r0
 8005db8:	f240 310a 	movw	r1, #778	; 0x30a
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <__d2b+0xb0>)
 8005dbe:	4825      	ldr	r0, [pc, #148]	; (8005e54 <__d2b+0xb4>)
 8005dc0:	f000 fa6a 	bl	8006298 <__assert_func>
 8005dc4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005dc8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005dcc:	bb2d      	cbnz	r5, 8005e1a <__d2b+0x7a>
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	f1b8 0300 	subs.w	r3, r8, #0
 8005dd4:	d026      	beq.n	8005e24 <__d2b+0x84>
 8005dd6:	4668      	mov	r0, sp
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	f7ff fd87 	bl	80058ec <__lo0bits>
 8005dde:	9900      	ldr	r1, [sp, #0]
 8005de0:	b1f0      	cbz	r0, 8005e20 <__d2b+0x80>
 8005de2:	9a01      	ldr	r2, [sp, #4]
 8005de4:	f1c0 0320 	rsb	r3, r0, #32
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	430b      	orrs	r3, r1
 8005dee:	40c2      	lsrs	r2, r0
 8005df0:	6163      	str	r3, [r4, #20]
 8005df2:	9201      	str	r2, [sp, #4]
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bf14      	ite	ne
 8005dfa:	2102      	movne	r1, #2
 8005dfc:	2101      	moveq	r1, #1
 8005dfe:	61a3      	str	r3, [r4, #24]
 8005e00:	6121      	str	r1, [r4, #16]
 8005e02:	b1c5      	cbz	r5, 8005e36 <__d2b+0x96>
 8005e04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e08:	4405      	add	r5, r0
 8005e0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e0e:	603d      	str	r5, [r7, #0]
 8005e10:	6030      	str	r0, [r6, #0]
 8005e12:	4620      	mov	r0, r4
 8005e14:	b002      	add	sp, #8
 8005e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1e:	e7d6      	b.n	8005dce <__d2b+0x2e>
 8005e20:	6161      	str	r1, [r4, #20]
 8005e22:	e7e7      	b.n	8005df4 <__d2b+0x54>
 8005e24:	a801      	add	r0, sp, #4
 8005e26:	f7ff fd61 	bl	80058ec <__lo0bits>
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	9b01      	ldr	r3, [sp, #4]
 8005e2e:	6121      	str	r1, [r4, #16]
 8005e30:	6163      	str	r3, [r4, #20]
 8005e32:	3020      	adds	r0, #32
 8005e34:	e7e5      	b.n	8005e02 <__d2b+0x62>
 8005e36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005e3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e3e:	6038      	str	r0, [r7, #0]
 8005e40:	6918      	ldr	r0, [r3, #16]
 8005e42:	f7ff fd33 	bl	80058ac <__hi0bits>
 8005e46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005e4a:	6031      	str	r1, [r6, #0]
 8005e4c:	e7e1      	b.n	8005e12 <__d2b+0x72>
 8005e4e:	bf00      	nop
 8005e50:	08007f9c 	.word	0x08007f9c
 8005e54:	08007fad 	.word	0x08007fad

08005e58 <_calloc_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	fb02 f501 	mul.w	r5, r2, r1
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f000 f854 	bl	8005f0c <_malloc_r>
 8005e64:	4604      	mov	r4, r0
 8005e66:	b118      	cbz	r0, 8005e70 <_calloc_r+0x18>
 8005e68:	462a      	mov	r2, r5
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f7fe f87c 	bl	8003f68 <memset>
 8005e70:	4620      	mov	r0, r4
 8005e72:	bd38      	pop	{r3, r4, r5, pc}

08005e74 <_free_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4605      	mov	r5, r0
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d043      	beq.n	8005f04 <_free_r+0x90>
 8005e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e80:	1f0c      	subs	r4, r1, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfb8      	it	lt
 8005e86:	18e4      	addlt	r4, r4, r3
 8005e88:	f000 fa62 	bl	8006350 <__malloc_lock>
 8005e8c:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <_free_r+0x94>)
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	4610      	mov	r0, r2
 8005e92:	b933      	cbnz	r3, 8005ea2 <_free_r+0x2e>
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	6014      	str	r4, [r2, #0]
 8005e98:	4628      	mov	r0, r5
 8005e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9e:	f000 ba5d 	b.w	800635c <__malloc_unlock>
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	d90a      	bls.n	8005ebc <_free_r+0x48>
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	1862      	adds	r2, r4, r1
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bf01      	itttt	eq
 8005eae:	681a      	ldreq	r2, [r3, #0]
 8005eb0:	685b      	ldreq	r3, [r3, #4]
 8005eb2:	1852      	addeq	r2, r2, r1
 8005eb4:	6022      	streq	r2, [r4, #0]
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	6004      	str	r4, [r0, #0]
 8005eba:	e7ed      	b.n	8005e98 <_free_r+0x24>
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	b10b      	cbz	r3, 8005ec6 <_free_r+0x52>
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	d9fa      	bls.n	8005ebc <_free_r+0x48>
 8005ec6:	6811      	ldr	r1, [r2, #0]
 8005ec8:	1850      	adds	r0, r2, r1
 8005eca:	42a0      	cmp	r0, r4
 8005ecc:	d10b      	bne.n	8005ee6 <_free_r+0x72>
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	4401      	add	r1, r0
 8005ed2:	1850      	adds	r0, r2, r1
 8005ed4:	4283      	cmp	r3, r0
 8005ed6:	6011      	str	r1, [r2, #0]
 8005ed8:	d1de      	bne.n	8005e98 <_free_r+0x24>
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4401      	add	r1, r0
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	6053      	str	r3, [r2, #4]
 8005ee4:	e7d8      	b.n	8005e98 <_free_r+0x24>
 8005ee6:	d902      	bls.n	8005eee <_free_r+0x7a>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	e7d4      	b.n	8005e98 <_free_r+0x24>
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	1821      	adds	r1, r4, r0
 8005ef2:	428b      	cmp	r3, r1
 8005ef4:	bf01      	itttt	eq
 8005ef6:	6819      	ldreq	r1, [r3, #0]
 8005ef8:	685b      	ldreq	r3, [r3, #4]
 8005efa:	1809      	addeq	r1, r1, r0
 8005efc:	6021      	streq	r1, [r4, #0]
 8005efe:	6063      	str	r3, [r4, #4]
 8005f00:	6054      	str	r4, [r2, #4]
 8005f02:	e7c9      	b.n	8005e98 <_free_r+0x24>
 8005f04:	bd38      	pop	{r3, r4, r5, pc}
 8005f06:	bf00      	nop
 8005f08:	200006ac 	.word	0x200006ac

08005f0c <_malloc_r>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	1ccd      	adds	r5, r1, #3
 8005f10:	f025 0503 	bic.w	r5, r5, #3
 8005f14:	3508      	adds	r5, #8
 8005f16:	2d0c      	cmp	r5, #12
 8005f18:	bf38      	it	cc
 8005f1a:	250c      	movcc	r5, #12
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	4606      	mov	r6, r0
 8005f20:	db01      	blt.n	8005f26 <_malloc_r+0x1a>
 8005f22:	42a9      	cmp	r1, r5
 8005f24:	d903      	bls.n	8005f2e <_malloc_r+0x22>
 8005f26:	230c      	movs	r3, #12
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f2e:	f000 fa0f 	bl	8006350 <__malloc_lock>
 8005f32:	4921      	ldr	r1, [pc, #132]	; (8005fb8 <_malloc_r+0xac>)
 8005f34:	680a      	ldr	r2, [r1, #0]
 8005f36:	4614      	mov	r4, r2
 8005f38:	b99c      	cbnz	r4, 8005f62 <_malloc_r+0x56>
 8005f3a:	4f20      	ldr	r7, [pc, #128]	; (8005fbc <_malloc_r+0xb0>)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	b923      	cbnz	r3, 8005f4a <_malloc_r+0x3e>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 f998 	bl	8006278 <_sbrk_r>
 8005f48:	6038      	str	r0, [r7, #0]
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 f993 	bl	8006278 <_sbrk_r>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	d123      	bne.n	8005f9e <_malloc_r+0x92>
 8005f56:	230c      	movs	r3, #12
 8005f58:	4630      	mov	r0, r6
 8005f5a:	6033      	str	r3, [r6, #0]
 8005f5c:	f000 f9fe 	bl	800635c <__malloc_unlock>
 8005f60:	e7e3      	b.n	8005f2a <_malloc_r+0x1e>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	1b5b      	subs	r3, r3, r5
 8005f66:	d417      	bmi.n	8005f98 <_malloc_r+0x8c>
 8005f68:	2b0b      	cmp	r3, #11
 8005f6a:	d903      	bls.n	8005f74 <_malloc_r+0x68>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	441c      	add	r4, r3
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	e004      	b.n	8005f7e <_malloc_r+0x72>
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	42a2      	cmp	r2, r4
 8005f78:	bf0c      	ite	eq
 8005f7a:	600b      	streq	r3, [r1, #0]
 8005f7c:	6053      	strne	r3, [r2, #4]
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f9ec 	bl	800635c <__malloc_unlock>
 8005f84:	f104 000b 	add.w	r0, r4, #11
 8005f88:	1d23      	adds	r3, r4, #4
 8005f8a:	f020 0007 	bic.w	r0, r0, #7
 8005f8e:	1ac2      	subs	r2, r0, r3
 8005f90:	d0cc      	beq.n	8005f2c <_malloc_r+0x20>
 8005f92:	1a1b      	subs	r3, r3, r0
 8005f94:	50a3      	str	r3, [r4, r2]
 8005f96:	e7c9      	b.n	8005f2c <_malloc_r+0x20>
 8005f98:	4622      	mov	r2, r4
 8005f9a:	6864      	ldr	r4, [r4, #4]
 8005f9c:	e7cc      	b.n	8005f38 <_malloc_r+0x2c>
 8005f9e:	1cc4      	adds	r4, r0, #3
 8005fa0:	f024 0403 	bic.w	r4, r4, #3
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d0e3      	beq.n	8005f70 <_malloc_r+0x64>
 8005fa8:	1a21      	subs	r1, r4, r0
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 f964 	bl	8006278 <_sbrk_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1dd      	bne.n	8005f70 <_malloc_r+0x64>
 8005fb4:	e7cf      	b.n	8005f56 <_malloc_r+0x4a>
 8005fb6:	bf00      	nop
 8005fb8:	200006ac 	.word	0x200006ac
 8005fbc:	200006b0 	.word	0x200006b0

08005fc0 <__ssputs_r>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	688e      	ldr	r6, [r1, #8]
 8005fc6:	4682      	mov	sl, r0
 8005fc8:	429e      	cmp	r6, r3
 8005fca:	460c      	mov	r4, r1
 8005fcc:	4690      	mov	r8, r2
 8005fce:	461f      	mov	r7, r3
 8005fd0:	d838      	bhi.n	8006044 <__ssputs_r+0x84>
 8005fd2:	898a      	ldrh	r2, [r1, #12]
 8005fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd8:	d032      	beq.n	8006040 <__ssputs_r+0x80>
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	6909      	ldr	r1, [r1, #16]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	eba5 0901 	sub.w	r9, r5, r1
 8005fe4:	6965      	ldr	r5, [r4, #20]
 8005fe6:	444b      	add	r3, r9
 8005fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff0:	106d      	asrs	r5, r5, #1
 8005ff2:	429d      	cmp	r5, r3
 8005ff4:	bf38      	it	cc
 8005ff6:	461d      	movcc	r5, r3
 8005ff8:	0553      	lsls	r3, r2, #21
 8005ffa:	d531      	bpl.n	8006060 <__ssputs_r+0xa0>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7ff ff85 	bl	8005f0c <_malloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	b950      	cbnz	r0, 800601c <__ssputs_r+0x5c>
 8006006:	230c      	movs	r3, #12
 8006008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800600c:	f8ca 3000 	str.w	r3, [sl]
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	464a      	mov	r2, r9
 800601e:	6921      	ldr	r1, [r4, #16]
 8006020:	f7ff fb8a 	bl	8005738 <memcpy>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	6126      	str	r6, [r4, #16]
 8006032:	444e      	add	r6, r9
 8006034:	6026      	str	r6, [r4, #0]
 8006036:	463e      	mov	r6, r7
 8006038:	6165      	str	r5, [r4, #20]
 800603a:	eba5 0509 	sub.w	r5, r5, r9
 800603e:	60a5      	str	r5, [r4, #8]
 8006040:	42be      	cmp	r6, r7
 8006042:	d900      	bls.n	8006046 <__ssputs_r+0x86>
 8006044:	463e      	mov	r6, r7
 8006046:	4632      	mov	r2, r6
 8006048:	4641      	mov	r1, r8
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	f000 f966 	bl	800631c <memmove>
 8006050:	68a3      	ldr	r3, [r4, #8]
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	1b9b      	subs	r3, r3, r6
 8006056:	4432      	add	r2, r6
 8006058:	2000      	movs	r0, #0
 800605a:	60a3      	str	r3, [r4, #8]
 800605c:	6022      	str	r2, [r4, #0]
 800605e:	e7db      	b.n	8006018 <__ssputs_r+0x58>
 8006060:	462a      	mov	r2, r5
 8006062:	f000 f981 	bl	8006368 <_realloc_r>
 8006066:	4606      	mov	r6, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d1e1      	bne.n	8006030 <__ssputs_r+0x70>
 800606c:	4650      	mov	r0, sl
 800606e:	6921      	ldr	r1, [r4, #16]
 8006070:	f7ff ff00 	bl	8005e74 <_free_r>
 8006074:	e7c7      	b.n	8006006 <__ssputs_r+0x46>
	...

08006078 <_svfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4698      	mov	r8, r3
 800607e:	898b      	ldrh	r3, [r1, #12]
 8006080:	4607      	mov	r7, r0
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	460d      	mov	r5, r1
 8006086:	4614      	mov	r4, r2
 8006088:	b09d      	sub	sp, #116	; 0x74
 800608a:	d50e      	bpl.n	80060aa <_svfiprintf_r+0x32>
 800608c:	690b      	ldr	r3, [r1, #16]
 800608e:	b963      	cbnz	r3, 80060aa <_svfiprintf_r+0x32>
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	f7ff ff3b 	bl	8005f0c <_malloc_r>
 8006096:	6028      	str	r0, [r5, #0]
 8006098:	6128      	str	r0, [r5, #16]
 800609a:	b920      	cbnz	r0, 80060a6 <_svfiprintf_r+0x2e>
 800609c:	230c      	movs	r3, #12
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a4:	e0d1      	b.n	800624a <_svfiprintf_r+0x1d2>
 80060a6:	2340      	movs	r3, #64	; 0x40
 80060a8:	616b      	str	r3, [r5, #20]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9309      	str	r3, [sp, #36]	; 0x24
 80060ae:	2320      	movs	r3, #32
 80060b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b4:	2330      	movs	r3, #48	; 0x30
 80060b6:	f04f 0901 	mov.w	r9, #1
 80060ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80060be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006264 <_svfiprintf_r+0x1ec>
 80060c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c6:	4623      	mov	r3, r4
 80060c8:	469a      	mov	sl, r3
 80060ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ce:	b10a      	cbz	r2, 80060d4 <_svfiprintf_r+0x5c>
 80060d0:	2a25      	cmp	r2, #37	; 0x25
 80060d2:	d1f9      	bne.n	80060c8 <_svfiprintf_r+0x50>
 80060d4:	ebba 0b04 	subs.w	fp, sl, r4
 80060d8:	d00b      	beq.n	80060f2 <_svfiprintf_r+0x7a>
 80060da:	465b      	mov	r3, fp
 80060dc:	4622      	mov	r2, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ff6d 	bl	8005fc0 <__ssputs_r>
 80060e6:	3001      	adds	r0, #1
 80060e8:	f000 80aa 	beq.w	8006240 <_svfiprintf_r+0x1c8>
 80060ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ee:	445a      	add	r2, fp
 80060f0:	9209      	str	r2, [sp, #36]	; 0x24
 80060f2:	f89a 3000 	ldrb.w	r3, [sl]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80a2 	beq.w	8006240 <_svfiprintf_r+0x1c8>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006106:	f10a 0a01 	add.w	sl, sl, #1
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	9307      	str	r3, [sp, #28]
 800610e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006112:	931a      	str	r3, [sp, #104]	; 0x68
 8006114:	4654      	mov	r4, sl
 8006116:	2205      	movs	r2, #5
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	4851      	ldr	r0, [pc, #324]	; (8006264 <_svfiprintf_r+0x1ec>)
 800611e:	f7ff fafd 	bl	800571c <memchr>
 8006122:	9a04      	ldr	r2, [sp, #16]
 8006124:	b9d8      	cbnz	r0, 800615e <_svfiprintf_r+0xe6>
 8006126:	06d0      	lsls	r0, r2, #27
 8006128:	bf44      	itt	mi
 800612a:	2320      	movmi	r3, #32
 800612c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006130:	0711      	lsls	r1, r2, #28
 8006132:	bf44      	itt	mi
 8006134:	232b      	movmi	r3, #43	; 0x2b
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613a:	f89a 3000 	ldrb.w	r3, [sl]
 800613e:	2b2a      	cmp	r3, #42	; 0x2a
 8006140:	d015      	beq.n	800616e <_svfiprintf_r+0xf6>
 8006142:	4654      	mov	r4, sl
 8006144:	2000      	movs	r0, #0
 8006146:	f04f 0c0a 	mov.w	ip, #10
 800614a:	9a07      	ldr	r2, [sp, #28]
 800614c:	4621      	mov	r1, r4
 800614e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006152:	3b30      	subs	r3, #48	; 0x30
 8006154:	2b09      	cmp	r3, #9
 8006156:	d94e      	bls.n	80061f6 <_svfiprintf_r+0x17e>
 8006158:	b1b0      	cbz	r0, 8006188 <_svfiprintf_r+0x110>
 800615a:	9207      	str	r2, [sp, #28]
 800615c:	e014      	b.n	8006188 <_svfiprintf_r+0x110>
 800615e:	eba0 0308 	sub.w	r3, r0, r8
 8006162:	fa09 f303 	lsl.w	r3, r9, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	46a2      	mov	sl, r4
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	e7d2      	b.n	8006114 <_svfiprintf_r+0x9c>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	1d19      	adds	r1, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	9103      	str	r1, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbb      	ittet	lt
 800617a:	425b      	neglt	r3, r3
 800617c:	f042 0202 	orrlt.w	r2, r2, #2
 8006180:	9307      	strge	r3, [sp, #28]
 8006182:	9307      	strlt	r3, [sp, #28]
 8006184:	bfb8      	it	lt
 8006186:	9204      	strlt	r2, [sp, #16]
 8006188:	7823      	ldrb	r3, [r4, #0]
 800618a:	2b2e      	cmp	r3, #46	; 0x2e
 800618c:	d10c      	bne.n	80061a8 <_svfiprintf_r+0x130>
 800618e:	7863      	ldrb	r3, [r4, #1]
 8006190:	2b2a      	cmp	r3, #42	; 0x2a
 8006192:	d135      	bne.n	8006200 <_svfiprintf_r+0x188>
 8006194:	9b03      	ldr	r3, [sp, #12]
 8006196:	3402      	adds	r4, #2
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	9203      	str	r2, [sp, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006274 <_svfiprintf_r+0x1fc>
 80061ac:	2203      	movs	r2, #3
 80061ae:	4650      	mov	r0, sl
 80061b0:	7821      	ldrb	r1, [r4, #0]
 80061b2:	f7ff fab3 	bl	800571c <memchr>
 80061b6:	b140      	cbz	r0, 80061ca <_svfiprintf_r+0x152>
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	eba0 000a 	sub.w	r0, r0, sl
 80061be:	fa03 f000 	lsl.w	r0, r3, r0
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	3401      	adds	r4, #1
 80061c6:	4303      	orrs	r3, r0
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ce:	2206      	movs	r2, #6
 80061d0:	4825      	ldr	r0, [pc, #148]	; (8006268 <_svfiprintf_r+0x1f0>)
 80061d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061d6:	f7ff faa1 	bl	800571c <memchr>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d038      	beq.n	8006250 <_svfiprintf_r+0x1d8>
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <_svfiprintf_r+0x1f4>)
 80061e0:	bb1b      	cbnz	r3, 800622a <_svfiprintf_r+0x1b2>
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	3307      	adds	r3, #7
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	3308      	adds	r3, #8
 80061ec:	9303      	str	r3, [sp, #12]
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	4433      	add	r3, r6
 80061f2:	9309      	str	r3, [sp, #36]	; 0x24
 80061f4:	e767      	b.n	80060c6 <_svfiprintf_r+0x4e>
 80061f6:	460c      	mov	r4, r1
 80061f8:	2001      	movs	r0, #1
 80061fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80061fe:	e7a5      	b.n	800614c <_svfiprintf_r+0xd4>
 8006200:	2300      	movs	r3, #0
 8006202:	f04f 0c0a 	mov.w	ip, #10
 8006206:	4619      	mov	r1, r3
 8006208:	3401      	adds	r4, #1
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	4620      	mov	r0, r4
 800620e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006212:	3a30      	subs	r2, #48	; 0x30
 8006214:	2a09      	cmp	r2, #9
 8006216:	d903      	bls.n	8006220 <_svfiprintf_r+0x1a8>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0c5      	beq.n	80061a8 <_svfiprintf_r+0x130>
 800621c:	9105      	str	r1, [sp, #20]
 800621e:	e7c3      	b.n	80061a8 <_svfiprintf_r+0x130>
 8006220:	4604      	mov	r4, r0
 8006222:	2301      	movs	r3, #1
 8006224:	fb0c 2101 	mla	r1, ip, r1, r2
 8006228:	e7f0      	b.n	800620c <_svfiprintf_r+0x194>
 800622a:	ab03      	add	r3, sp, #12
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	462a      	mov	r2, r5
 8006230:	4638      	mov	r0, r7
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <_svfiprintf_r+0x1f8>)
 8006234:	a904      	add	r1, sp, #16
 8006236:	f7fd ff3d 	bl	80040b4 <_printf_float>
 800623a:	1c42      	adds	r2, r0, #1
 800623c:	4606      	mov	r6, r0
 800623e:	d1d6      	bne.n	80061ee <_svfiprintf_r+0x176>
 8006240:	89ab      	ldrh	r3, [r5, #12]
 8006242:	065b      	lsls	r3, r3, #25
 8006244:	f53f af2c 	bmi.w	80060a0 <_svfiprintf_r+0x28>
 8006248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800624a:	b01d      	add	sp, #116	; 0x74
 800624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006250:	ab03      	add	r3, sp, #12
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	462a      	mov	r2, r5
 8006256:	4638      	mov	r0, r7
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <_svfiprintf_r+0x1f8>)
 800625a:	a904      	add	r1, sp, #16
 800625c:	f7fe f9c6 	bl	80045ec <_printf_i>
 8006260:	e7eb      	b.n	800623a <_svfiprintf_r+0x1c2>
 8006262:	bf00      	nop
 8006264:	0800810c 	.word	0x0800810c
 8006268:	08008116 	.word	0x08008116
 800626c:	080040b5 	.word	0x080040b5
 8006270:	08005fc1 	.word	0x08005fc1
 8006274:	08008112 	.word	0x08008112

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	2300      	movs	r3, #0
 800627c:	4d05      	ldr	r5, [pc, #20]	; (8006294 <_sbrk_r+0x1c>)
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fc f8fc 	bl	8002480 <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	200008c4 	.word	0x200008c4

08006298 <__assert_func>:
 8006298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800629a:	4614      	mov	r4, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <__assert_func+0x2c>)
 80062a0:	4605      	mov	r5, r0
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68d8      	ldr	r0, [r3, #12]
 80062a6:	b14c      	cbz	r4, 80062bc <__assert_func+0x24>
 80062a8:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <__assert_func+0x30>)
 80062aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062ae:	9100      	str	r1, [sp, #0]
 80062b0:	462b      	mov	r3, r5
 80062b2:	4906      	ldr	r1, [pc, #24]	; (80062cc <__assert_func+0x34>)
 80062b4:	f000 f80e 	bl	80062d4 <fiprintf>
 80062b8:	f000 faa2 	bl	8006800 <abort>
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <__assert_func+0x38>)
 80062be:	461c      	mov	r4, r3
 80062c0:	e7f3      	b.n	80062aa <__assert_func+0x12>
 80062c2:	bf00      	nop
 80062c4:	2000000c 	.word	0x2000000c
 80062c8:	0800811d 	.word	0x0800811d
 80062cc:	0800812a 	.word	0x0800812a
 80062d0:	08008158 	.word	0x08008158

080062d4 <fiprintf>:
 80062d4:	b40e      	push	{r1, r2, r3}
 80062d6:	b503      	push	{r0, r1, lr}
 80062d8:	4601      	mov	r1, r0
 80062da:	ab03      	add	r3, sp, #12
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <fiprintf+0x20>)
 80062de:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e2:	6800      	ldr	r0, [r0, #0]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	f000 f88d 	bl	8006404 <_vfiprintf_r>
 80062ea:	b002      	add	sp, #8
 80062ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80062f0:	b003      	add	sp, #12
 80062f2:	4770      	bx	lr
 80062f4:	2000000c 	.word	0x2000000c

080062f8 <__ascii_mbtowc>:
 80062f8:	b082      	sub	sp, #8
 80062fa:	b901      	cbnz	r1, 80062fe <__ascii_mbtowc+0x6>
 80062fc:	a901      	add	r1, sp, #4
 80062fe:	b142      	cbz	r2, 8006312 <__ascii_mbtowc+0x1a>
 8006300:	b14b      	cbz	r3, 8006316 <__ascii_mbtowc+0x1e>
 8006302:	7813      	ldrb	r3, [r2, #0]
 8006304:	600b      	str	r3, [r1, #0]
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	1e10      	subs	r0, r2, #0
 800630a:	bf18      	it	ne
 800630c:	2001      	movne	r0, #1
 800630e:	b002      	add	sp, #8
 8006310:	4770      	bx	lr
 8006312:	4610      	mov	r0, r2
 8006314:	e7fb      	b.n	800630e <__ascii_mbtowc+0x16>
 8006316:	f06f 0001 	mvn.w	r0, #1
 800631a:	e7f8      	b.n	800630e <__ascii_mbtowc+0x16>

0800631c <memmove>:
 800631c:	4288      	cmp	r0, r1
 800631e:	b510      	push	{r4, lr}
 8006320:	eb01 0402 	add.w	r4, r1, r2
 8006324:	d902      	bls.n	800632c <memmove+0x10>
 8006326:	4284      	cmp	r4, r0
 8006328:	4623      	mov	r3, r4
 800632a:	d807      	bhi.n	800633c <memmove+0x20>
 800632c:	1e43      	subs	r3, r0, #1
 800632e:	42a1      	cmp	r1, r4
 8006330:	d008      	beq.n	8006344 <memmove+0x28>
 8006332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800633a:	e7f8      	b.n	800632e <memmove+0x12>
 800633c:	4601      	mov	r1, r0
 800633e:	4402      	add	r2, r0
 8006340:	428a      	cmp	r2, r1
 8006342:	d100      	bne.n	8006346 <memmove+0x2a>
 8006344:	bd10      	pop	{r4, pc}
 8006346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800634a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800634e:	e7f7      	b.n	8006340 <memmove+0x24>

08006350 <__malloc_lock>:
 8006350:	4801      	ldr	r0, [pc, #4]	; (8006358 <__malloc_lock+0x8>)
 8006352:	f000 bc15 	b.w	8006b80 <__retarget_lock_acquire_recursive>
 8006356:	bf00      	nop
 8006358:	200008cc 	.word	0x200008cc

0800635c <__malloc_unlock>:
 800635c:	4801      	ldr	r0, [pc, #4]	; (8006364 <__malloc_unlock+0x8>)
 800635e:	f000 bc10 	b.w	8006b82 <__retarget_lock_release_recursive>
 8006362:	bf00      	nop
 8006364:	200008cc 	.word	0x200008cc

08006368 <_realloc_r>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	4607      	mov	r7, r0
 800636c:	4614      	mov	r4, r2
 800636e:	460e      	mov	r6, r1
 8006370:	b921      	cbnz	r1, 800637c <_realloc_r+0x14>
 8006372:	4611      	mov	r1, r2
 8006374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006378:	f7ff bdc8 	b.w	8005f0c <_malloc_r>
 800637c:	b922      	cbnz	r2, 8006388 <_realloc_r+0x20>
 800637e:	f7ff fd79 	bl	8005e74 <_free_r>
 8006382:	4625      	mov	r5, r4
 8006384:	4628      	mov	r0, r5
 8006386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006388:	f000 fc60 	bl	8006c4c <_malloc_usable_size_r>
 800638c:	42a0      	cmp	r0, r4
 800638e:	d20f      	bcs.n	80063b0 <_realloc_r+0x48>
 8006390:	4621      	mov	r1, r4
 8006392:	4638      	mov	r0, r7
 8006394:	f7ff fdba 	bl	8005f0c <_malloc_r>
 8006398:	4605      	mov	r5, r0
 800639a:	2800      	cmp	r0, #0
 800639c:	d0f2      	beq.n	8006384 <_realloc_r+0x1c>
 800639e:	4631      	mov	r1, r6
 80063a0:	4622      	mov	r2, r4
 80063a2:	f7ff f9c9 	bl	8005738 <memcpy>
 80063a6:	4631      	mov	r1, r6
 80063a8:	4638      	mov	r0, r7
 80063aa:	f7ff fd63 	bl	8005e74 <_free_r>
 80063ae:	e7e9      	b.n	8006384 <_realloc_r+0x1c>
 80063b0:	4635      	mov	r5, r6
 80063b2:	e7e7      	b.n	8006384 <_realloc_r+0x1c>

080063b4 <__sfputc_r>:
 80063b4:	6893      	ldr	r3, [r2, #8]
 80063b6:	b410      	push	{r4}
 80063b8:	3b01      	subs	r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	6093      	str	r3, [r2, #8]
 80063be:	da07      	bge.n	80063d0 <__sfputc_r+0x1c>
 80063c0:	6994      	ldr	r4, [r2, #24]
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	db01      	blt.n	80063ca <__sfputc_r+0x16>
 80063c6:	290a      	cmp	r1, #10
 80063c8:	d102      	bne.n	80063d0 <__sfputc_r+0x1c>
 80063ca:	bc10      	pop	{r4}
 80063cc:	f000 b94a 	b.w	8006664 <__swbuf_r>
 80063d0:	6813      	ldr	r3, [r2, #0]
 80063d2:	1c58      	adds	r0, r3, #1
 80063d4:	6010      	str	r0, [r2, #0]
 80063d6:	7019      	strb	r1, [r3, #0]
 80063d8:	4608      	mov	r0, r1
 80063da:	bc10      	pop	{r4}
 80063dc:	4770      	bx	lr

080063de <__sfputs_r>:
 80063de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e0:	4606      	mov	r6, r0
 80063e2:	460f      	mov	r7, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	18d5      	adds	r5, r2, r3
 80063e8:	42ac      	cmp	r4, r5
 80063ea:	d101      	bne.n	80063f0 <__sfputs_r+0x12>
 80063ec:	2000      	movs	r0, #0
 80063ee:	e007      	b.n	8006400 <__sfputs_r+0x22>
 80063f0:	463a      	mov	r2, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f8:	f7ff ffdc 	bl	80063b4 <__sfputc_r>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d1f3      	bne.n	80063e8 <__sfputs_r+0xa>
 8006400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006404 <_vfiprintf_r>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	460d      	mov	r5, r1
 800640a:	4614      	mov	r4, r2
 800640c:	4698      	mov	r8, r3
 800640e:	4606      	mov	r6, r0
 8006410:	b09d      	sub	sp, #116	; 0x74
 8006412:	b118      	cbz	r0, 800641c <_vfiprintf_r+0x18>
 8006414:	6983      	ldr	r3, [r0, #24]
 8006416:	b90b      	cbnz	r3, 800641c <_vfiprintf_r+0x18>
 8006418:	f000 fb14 	bl	8006a44 <__sinit>
 800641c:	4b89      	ldr	r3, [pc, #548]	; (8006644 <_vfiprintf_r+0x240>)
 800641e:	429d      	cmp	r5, r3
 8006420:	d11b      	bne.n	800645a <_vfiprintf_r+0x56>
 8006422:	6875      	ldr	r5, [r6, #4]
 8006424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006426:	07d9      	lsls	r1, r3, #31
 8006428:	d405      	bmi.n	8006436 <_vfiprintf_r+0x32>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	059a      	lsls	r2, r3, #22
 800642e:	d402      	bmi.n	8006436 <_vfiprintf_r+0x32>
 8006430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006432:	f000 fba5 	bl	8006b80 <__retarget_lock_acquire_recursive>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	d501      	bpl.n	8006440 <_vfiprintf_r+0x3c>
 800643c:	692b      	ldr	r3, [r5, #16]
 800643e:	b9eb      	cbnz	r3, 800647c <_vfiprintf_r+0x78>
 8006440:	4629      	mov	r1, r5
 8006442:	4630      	mov	r0, r6
 8006444:	f000 f96e 	bl	8006724 <__swsetup_r>
 8006448:	b1c0      	cbz	r0, 800647c <_vfiprintf_r+0x78>
 800644a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644c:	07dc      	lsls	r4, r3, #31
 800644e:	d50e      	bpl.n	800646e <_vfiprintf_r+0x6a>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006454:	b01d      	add	sp, #116	; 0x74
 8006456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <_vfiprintf_r+0x244>)
 800645c:	429d      	cmp	r5, r3
 800645e:	d101      	bne.n	8006464 <_vfiprintf_r+0x60>
 8006460:	68b5      	ldr	r5, [r6, #8]
 8006462:	e7df      	b.n	8006424 <_vfiprintf_r+0x20>
 8006464:	4b79      	ldr	r3, [pc, #484]	; (800664c <_vfiprintf_r+0x248>)
 8006466:	429d      	cmp	r5, r3
 8006468:	bf08      	it	eq
 800646a:	68f5      	ldreq	r5, [r6, #12]
 800646c:	e7da      	b.n	8006424 <_vfiprintf_r+0x20>
 800646e:	89ab      	ldrh	r3, [r5, #12]
 8006470:	0598      	lsls	r0, r3, #22
 8006472:	d4ed      	bmi.n	8006450 <_vfiprintf_r+0x4c>
 8006474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006476:	f000 fb84 	bl	8006b82 <__retarget_lock_release_recursive>
 800647a:	e7e9      	b.n	8006450 <_vfiprintf_r+0x4c>
 800647c:	2300      	movs	r3, #0
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	2320      	movs	r3, #32
 8006482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006486:	2330      	movs	r3, #48	; 0x30
 8006488:	f04f 0901 	mov.w	r9, #1
 800648c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006490:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006650 <_vfiprintf_r+0x24c>
 8006494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006498:	4623      	mov	r3, r4
 800649a:	469a      	mov	sl, r3
 800649c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064a0:	b10a      	cbz	r2, 80064a6 <_vfiprintf_r+0xa2>
 80064a2:	2a25      	cmp	r2, #37	; 0x25
 80064a4:	d1f9      	bne.n	800649a <_vfiprintf_r+0x96>
 80064a6:	ebba 0b04 	subs.w	fp, sl, r4
 80064aa:	d00b      	beq.n	80064c4 <_vfiprintf_r+0xc0>
 80064ac:	465b      	mov	r3, fp
 80064ae:	4622      	mov	r2, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff ff93 	bl	80063de <__sfputs_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	f000 80aa 	beq.w	8006612 <_vfiprintf_r+0x20e>
 80064be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c0:	445a      	add	r2, fp
 80064c2:	9209      	str	r2, [sp, #36]	; 0x24
 80064c4:	f89a 3000 	ldrb.w	r3, [sl]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80a2 	beq.w	8006612 <_vfiprintf_r+0x20e>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d8:	f10a 0a01 	add.w	sl, sl, #1
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	9307      	str	r3, [sp, #28]
 80064e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e4:	931a      	str	r3, [sp, #104]	; 0x68
 80064e6:	4654      	mov	r4, sl
 80064e8:	2205      	movs	r2, #5
 80064ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ee:	4858      	ldr	r0, [pc, #352]	; (8006650 <_vfiprintf_r+0x24c>)
 80064f0:	f7ff f914 	bl	800571c <memchr>
 80064f4:	9a04      	ldr	r2, [sp, #16]
 80064f6:	b9d8      	cbnz	r0, 8006530 <_vfiprintf_r+0x12c>
 80064f8:	06d1      	lsls	r1, r2, #27
 80064fa:	bf44      	itt	mi
 80064fc:	2320      	movmi	r3, #32
 80064fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006502:	0713      	lsls	r3, r2, #28
 8006504:	bf44      	itt	mi
 8006506:	232b      	movmi	r3, #43	; 0x2b
 8006508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800650c:	f89a 3000 	ldrb.w	r3, [sl]
 8006510:	2b2a      	cmp	r3, #42	; 0x2a
 8006512:	d015      	beq.n	8006540 <_vfiprintf_r+0x13c>
 8006514:	4654      	mov	r4, sl
 8006516:	2000      	movs	r0, #0
 8006518:	f04f 0c0a 	mov.w	ip, #10
 800651c:	9a07      	ldr	r2, [sp, #28]
 800651e:	4621      	mov	r1, r4
 8006520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006524:	3b30      	subs	r3, #48	; 0x30
 8006526:	2b09      	cmp	r3, #9
 8006528:	d94e      	bls.n	80065c8 <_vfiprintf_r+0x1c4>
 800652a:	b1b0      	cbz	r0, 800655a <_vfiprintf_r+0x156>
 800652c:	9207      	str	r2, [sp, #28]
 800652e:	e014      	b.n	800655a <_vfiprintf_r+0x156>
 8006530:	eba0 0308 	sub.w	r3, r0, r8
 8006534:	fa09 f303 	lsl.w	r3, r9, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	46a2      	mov	sl, r4
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	e7d2      	b.n	80064e6 <_vfiprintf_r+0xe2>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	1d19      	adds	r1, r3, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	9103      	str	r1, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	bfbb      	ittet	lt
 800654c:	425b      	neglt	r3, r3
 800654e:	f042 0202 	orrlt.w	r2, r2, #2
 8006552:	9307      	strge	r3, [sp, #28]
 8006554:	9307      	strlt	r3, [sp, #28]
 8006556:	bfb8      	it	lt
 8006558:	9204      	strlt	r2, [sp, #16]
 800655a:	7823      	ldrb	r3, [r4, #0]
 800655c:	2b2e      	cmp	r3, #46	; 0x2e
 800655e:	d10c      	bne.n	800657a <_vfiprintf_r+0x176>
 8006560:	7863      	ldrb	r3, [r4, #1]
 8006562:	2b2a      	cmp	r3, #42	; 0x2a
 8006564:	d135      	bne.n	80065d2 <_vfiprintf_r+0x1ce>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	3402      	adds	r4, #2
 800656a:	1d1a      	adds	r2, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9203      	str	r2, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfb8      	it	lt
 8006574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006578:	9305      	str	r3, [sp, #20]
 800657a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006660 <_vfiprintf_r+0x25c>
 800657e:	2203      	movs	r2, #3
 8006580:	4650      	mov	r0, sl
 8006582:	7821      	ldrb	r1, [r4, #0]
 8006584:	f7ff f8ca 	bl	800571c <memchr>
 8006588:	b140      	cbz	r0, 800659c <_vfiprintf_r+0x198>
 800658a:	2340      	movs	r3, #64	; 0x40
 800658c:	eba0 000a 	sub.w	r0, r0, sl
 8006590:	fa03 f000 	lsl.w	r0, r3, r0
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	3401      	adds	r4, #1
 8006598:	4303      	orrs	r3, r0
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a0:	2206      	movs	r2, #6
 80065a2:	482c      	ldr	r0, [pc, #176]	; (8006654 <_vfiprintf_r+0x250>)
 80065a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065a8:	f7ff f8b8 	bl	800571c <memchr>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d03f      	beq.n	8006630 <_vfiprintf_r+0x22c>
 80065b0:	4b29      	ldr	r3, [pc, #164]	; (8006658 <_vfiprintf_r+0x254>)
 80065b2:	bb1b      	cbnz	r3, 80065fc <_vfiprintf_r+0x1f8>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	3307      	adds	r3, #7
 80065b8:	f023 0307 	bic.w	r3, r3, #7
 80065bc:	3308      	adds	r3, #8
 80065be:	9303      	str	r3, [sp, #12]
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	443b      	add	r3, r7
 80065c4:	9309      	str	r3, [sp, #36]	; 0x24
 80065c6:	e767      	b.n	8006498 <_vfiprintf_r+0x94>
 80065c8:	460c      	mov	r4, r1
 80065ca:	2001      	movs	r0, #1
 80065cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d0:	e7a5      	b.n	800651e <_vfiprintf_r+0x11a>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f04f 0c0a 	mov.w	ip, #10
 80065d8:	4619      	mov	r1, r3
 80065da:	3401      	adds	r4, #1
 80065dc:	9305      	str	r3, [sp, #20]
 80065de:	4620      	mov	r0, r4
 80065e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e4:	3a30      	subs	r2, #48	; 0x30
 80065e6:	2a09      	cmp	r2, #9
 80065e8:	d903      	bls.n	80065f2 <_vfiprintf_r+0x1ee>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0c5      	beq.n	800657a <_vfiprintf_r+0x176>
 80065ee:	9105      	str	r1, [sp, #20]
 80065f0:	e7c3      	b.n	800657a <_vfiprintf_r+0x176>
 80065f2:	4604      	mov	r4, r0
 80065f4:	2301      	movs	r3, #1
 80065f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065fa:	e7f0      	b.n	80065de <_vfiprintf_r+0x1da>
 80065fc:	ab03      	add	r3, sp, #12
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	462a      	mov	r2, r5
 8006602:	4630      	mov	r0, r6
 8006604:	4b15      	ldr	r3, [pc, #84]	; (800665c <_vfiprintf_r+0x258>)
 8006606:	a904      	add	r1, sp, #16
 8006608:	f7fd fd54 	bl	80040b4 <_printf_float>
 800660c:	4607      	mov	r7, r0
 800660e:	1c78      	adds	r0, r7, #1
 8006610:	d1d6      	bne.n	80065c0 <_vfiprintf_r+0x1bc>
 8006612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006614:	07d9      	lsls	r1, r3, #31
 8006616:	d405      	bmi.n	8006624 <_vfiprintf_r+0x220>
 8006618:	89ab      	ldrh	r3, [r5, #12]
 800661a:	059a      	lsls	r2, r3, #22
 800661c:	d402      	bmi.n	8006624 <_vfiprintf_r+0x220>
 800661e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006620:	f000 faaf 	bl	8006b82 <__retarget_lock_release_recursive>
 8006624:	89ab      	ldrh	r3, [r5, #12]
 8006626:	065b      	lsls	r3, r3, #25
 8006628:	f53f af12 	bmi.w	8006450 <_vfiprintf_r+0x4c>
 800662c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662e:	e711      	b.n	8006454 <_vfiprintf_r+0x50>
 8006630:	ab03      	add	r3, sp, #12
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	462a      	mov	r2, r5
 8006636:	4630      	mov	r0, r6
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <_vfiprintf_r+0x258>)
 800663a:	a904      	add	r1, sp, #16
 800663c:	f7fd ffd6 	bl	80045ec <_printf_i>
 8006640:	e7e4      	b.n	800660c <_vfiprintf_r+0x208>
 8006642:	bf00      	nop
 8006644:	08008184 	.word	0x08008184
 8006648:	080081a4 	.word	0x080081a4
 800664c:	08008164 	.word	0x08008164
 8006650:	0800810c 	.word	0x0800810c
 8006654:	08008116 	.word	0x08008116
 8006658:	080040b5 	.word	0x080040b5
 800665c:	080063df 	.word	0x080063df
 8006660:	08008112 	.word	0x08008112

08006664 <__swbuf_r>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	460e      	mov	r6, r1
 8006668:	4614      	mov	r4, r2
 800666a:	4605      	mov	r5, r0
 800666c:	b118      	cbz	r0, 8006676 <__swbuf_r+0x12>
 800666e:	6983      	ldr	r3, [r0, #24]
 8006670:	b90b      	cbnz	r3, 8006676 <__swbuf_r+0x12>
 8006672:	f000 f9e7 	bl	8006a44 <__sinit>
 8006676:	4b21      	ldr	r3, [pc, #132]	; (80066fc <__swbuf_r+0x98>)
 8006678:	429c      	cmp	r4, r3
 800667a:	d12b      	bne.n	80066d4 <__swbuf_r+0x70>
 800667c:	686c      	ldr	r4, [r5, #4]
 800667e:	69a3      	ldr	r3, [r4, #24]
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	071a      	lsls	r2, r3, #28
 8006686:	d52f      	bpl.n	80066e8 <__swbuf_r+0x84>
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	b36b      	cbz	r3, 80066e8 <__swbuf_r+0x84>
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	6820      	ldr	r0, [r4, #0]
 8006690:	b2f6      	uxtb	r6, r6
 8006692:	1ac0      	subs	r0, r0, r3
 8006694:	6963      	ldr	r3, [r4, #20]
 8006696:	4637      	mov	r7, r6
 8006698:	4283      	cmp	r3, r0
 800669a:	dc04      	bgt.n	80066a6 <__swbuf_r+0x42>
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 f93c 	bl	800691c <_fflush_r>
 80066a4:	bb30      	cbnz	r0, 80066f4 <__swbuf_r+0x90>
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	3001      	adds	r0, #1
 80066aa:	3b01      	subs	r3, #1
 80066ac:	60a3      	str	r3, [r4, #8]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	6022      	str	r2, [r4, #0]
 80066b4:	701e      	strb	r6, [r3, #0]
 80066b6:	6963      	ldr	r3, [r4, #20]
 80066b8:	4283      	cmp	r3, r0
 80066ba:	d004      	beq.n	80066c6 <__swbuf_r+0x62>
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	07db      	lsls	r3, r3, #31
 80066c0:	d506      	bpl.n	80066d0 <__swbuf_r+0x6c>
 80066c2:	2e0a      	cmp	r6, #10
 80066c4:	d104      	bne.n	80066d0 <__swbuf_r+0x6c>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 f927 	bl	800691c <_fflush_r>
 80066ce:	b988      	cbnz	r0, 80066f4 <__swbuf_r+0x90>
 80066d0:	4638      	mov	r0, r7
 80066d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <__swbuf_r+0x9c>)
 80066d6:	429c      	cmp	r4, r3
 80066d8:	d101      	bne.n	80066de <__swbuf_r+0x7a>
 80066da:	68ac      	ldr	r4, [r5, #8]
 80066dc:	e7cf      	b.n	800667e <__swbuf_r+0x1a>
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <__swbuf_r+0xa0>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	bf08      	it	eq
 80066e4:	68ec      	ldreq	r4, [r5, #12]
 80066e6:	e7ca      	b.n	800667e <__swbuf_r+0x1a>
 80066e8:	4621      	mov	r1, r4
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 f81a 	bl	8006724 <__swsetup_r>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d0cb      	beq.n	800668c <__swbuf_r+0x28>
 80066f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066f8:	e7ea      	b.n	80066d0 <__swbuf_r+0x6c>
 80066fa:	bf00      	nop
 80066fc:	08008184 	.word	0x08008184
 8006700:	080081a4 	.word	0x080081a4
 8006704:	08008164 	.word	0x08008164

08006708 <__ascii_wctomb>:
 8006708:	4603      	mov	r3, r0
 800670a:	4608      	mov	r0, r1
 800670c:	b141      	cbz	r1, 8006720 <__ascii_wctomb+0x18>
 800670e:	2aff      	cmp	r2, #255	; 0xff
 8006710:	d904      	bls.n	800671c <__ascii_wctomb+0x14>
 8006712:	228a      	movs	r2, #138	; 0x8a
 8006714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	4770      	bx	lr
 800671c:	2001      	movs	r0, #1
 800671e:	700a      	strb	r2, [r1, #0]
 8006720:	4770      	bx	lr
	...

08006724 <__swsetup_r>:
 8006724:	4b32      	ldr	r3, [pc, #200]	; (80067f0 <__swsetup_r+0xcc>)
 8006726:	b570      	push	{r4, r5, r6, lr}
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	4606      	mov	r6, r0
 800672c:	460c      	mov	r4, r1
 800672e:	b125      	cbz	r5, 800673a <__swsetup_r+0x16>
 8006730:	69ab      	ldr	r3, [r5, #24]
 8006732:	b913      	cbnz	r3, 800673a <__swsetup_r+0x16>
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f985 	bl	8006a44 <__sinit>
 800673a:	4b2e      	ldr	r3, [pc, #184]	; (80067f4 <__swsetup_r+0xd0>)
 800673c:	429c      	cmp	r4, r3
 800673e:	d10f      	bne.n	8006760 <__swsetup_r+0x3c>
 8006740:	686c      	ldr	r4, [r5, #4]
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006748:	0719      	lsls	r1, r3, #28
 800674a:	d42c      	bmi.n	80067a6 <__swsetup_r+0x82>
 800674c:	06dd      	lsls	r5, r3, #27
 800674e:	d411      	bmi.n	8006774 <__swsetup_r+0x50>
 8006750:	2309      	movs	r3, #9
 8006752:	6033      	str	r3, [r6, #0]
 8006754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	e03e      	b.n	80067de <__swsetup_r+0xba>
 8006760:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <__swsetup_r+0xd4>)
 8006762:	429c      	cmp	r4, r3
 8006764:	d101      	bne.n	800676a <__swsetup_r+0x46>
 8006766:	68ac      	ldr	r4, [r5, #8]
 8006768:	e7eb      	b.n	8006742 <__swsetup_r+0x1e>
 800676a:	4b24      	ldr	r3, [pc, #144]	; (80067fc <__swsetup_r+0xd8>)
 800676c:	429c      	cmp	r4, r3
 800676e:	bf08      	it	eq
 8006770:	68ec      	ldreq	r4, [r5, #12]
 8006772:	e7e6      	b.n	8006742 <__swsetup_r+0x1e>
 8006774:	0758      	lsls	r0, r3, #29
 8006776:	d512      	bpl.n	800679e <__swsetup_r+0x7a>
 8006778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800677a:	b141      	cbz	r1, 800678e <__swsetup_r+0x6a>
 800677c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006780:	4299      	cmp	r1, r3
 8006782:	d002      	beq.n	800678a <__swsetup_r+0x66>
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff fb75 	bl	8005e74 <_free_r>
 800678a:	2300      	movs	r3, #0
 800678c:	6363      	str	r3, [r4, #52]	; 0x34
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	2300      	movs	r3, #0
 8006798:	6063      	str	r3, [r4, #4]
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f043 0308 	orr.w	r3, r3, #8
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	b94b      	cbnz	r3, 80067be <__swsetup_r+0x9a>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d003      	beq.n	80067be <__swsetup_r+0x9a>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 fa07 	bl	8006bcc <__smakebuf_r>
 80067be:	89a0      	ldrh	r0, [r4, #12]
 80067c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067c4:	f010 0301 	ands.w	r3, r0, #1
 80067c8:	d00a      	beq.n	80067e0 <__swsetup_r+0xbc>
 80067ca:	2300      	movs	r3, #0
 80067cc:	60a3      	str	r3, [r4, #8]
 80067ce:	6963      	ldr	r3, [r4, #20]
 80067d0:	425b      	negs	r3, r3
 80067d2:	61a3      	str	r3, [r4, #24]
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	b943      	cbnz	r3, 80067ea <__swsetup_r+0xc6>
 80067d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067dc:	d1ba      	bne.n	8006754 <__swsetup_r+0x30>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	0781      	lsls	r1, r0, #30
 80067e2:	bf58      	it	pl
 80067e4:	6963      	ldrpl	r3, [r4, #20]
 80067e6:	60a3      	str	r3, [r4, #8]
 80067e8:	e7f4      	b.n	80067d4 <__swsetup_r+0xb0>
 80067ea:	2000      	movs	r0, #0
 80067ec:	e7f7      	b.n	80067de <__swsetup_r+0xba>
 80067ee:	bf00      	nop
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	08008184 	.word	0x08008184
 80067f8:	080081a4 	.word	0x080081a4
 80067fc:	08008164 	.word	0x08008164

08006800 <abort>:
 8006800:	2006      	movs	r0, #6
 8006802:	b508      	push	{r3, lr}
 8006804:	f000 fa52 	bl	8006cac <raise>
 8006808:	2001      	movs	r0, #1
 800680a:	f7fb fdc6 	bl	800239a <_exit>
	...

08006810 <__sflush_r>:
 8006810:	898a      	ldrh	r2, [r1, #12]
 8006812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006816:	4605      	mov	r5, r0
 8006818:	0710      	lsls	r0, r2, #28
 800681a:	460c      	mov	r4, r1
 800681c:	d458      	bmi.n	80068d0 <__sflush_r+0xc0>
 800681e:	684b      	ldr	r3, [r1, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	dc05      	bgt.n	8006830 <__sflush_r+0x20>
 8006824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	dc02      	bgt.n	8006830 <__sflush_r+0x20>
 800682a:	2000      	movs	r0, #0
 800682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006832:	2e00      	cmp	r6, #0
 8006834:	d0f9      	beq.n	800682a <__sflush_r+0x1a>
 8006836:	2300      	movs	r3, #0
 8006838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800683c:	682f      	ldr	r7, [r5, #0]
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	d032      	beq.n	80068a8 <__sflush_r+0x98>
 8006842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	075a      	lsls	r2, r3, #29
 8006848:	d505      	bpl.n	8006856 <__sflush_r+0x46>
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006850:	b10b      	cbz	r3, 8006856 <__sflush_r+0x46>
 8006852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006854:	1ac0      	subs	r0, r0, r3
 8006856:	2300      	movs	r3, #0
 8006858:	4602      	mov	r2, r0
 800685a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800685c:	4628      	mov	r0, r5
 800685e:	6a21      	ldr	r1, [r4, #32]
 8006860:	47b0      	blx	r6
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	d106      	bne.n	8006876 <__sflush_r+0x66>
 8006868:	6829      	ldr	r1, [r5, #0]
 800686a:	291d      	cmp	r1, #29
 800686c:	d82c      	bhi.n	80068c8 <__sflush_r+0xb8>
 800686e:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <__sflush_r+0x108>)
 8006870:	40ca      	lsrs	r2, r1
 8006872:	07d6      	lsls	r6, r2, #31
 8006874:	d528      	bpl.n	80068c8 <__sflush_r+0xb8>
 8006876:	2200      	movs	r2, #0
 8006878:	6062      	str	r2, [r4, #4]
 800687a:	6922      	ldr	r2, [r4, #16]
 800687c:	04d9      	lsls	r1, r3, #19
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	d504      	bpl.n	800688c <__sflush_r+0x7c>
 8006882:	1c42      	adds	r2, r0, #1
 8006884:	d101      	bne.n	800688a <__sflush_r+0x7a>
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	b903      	cbnz	r3, 800688c <__sflush_r+0x7c>
 800688a:	6560      	str	r0, [r4, #84]	; 0x54
 800688c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800688e:	602f      	str	r7, [r5, #0]
 8006890:	2900      	cmp	r1, #0
 8006892:	d0ca      	beq.n	800682a <__sflush_r+0x1a>
 8006894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006898:	4299      	cmp	r1, r3
 800689a:	d002      	beq.n	80068a2 <__sflush_r+0x92>
 800689c:	4628      	mov	r0, r5
 800689e:	f7ff fae9 	bl	8005e74 <_free_r>
 80068a2:	2000      	movs	r0, #0
 80068a4:	6360      	str	r0, [r4, #52]	; 0x34
 80068a6:	e7c1      	b.n	800682c <__sflush_r+0x1c>
 80068a8:	6a21      	ldr	r1, [r4, #32]
 80068aa:	2301      	movs	r3, #1
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b0      	blx	r6
 80068b0:	1c41      	adds	r1, r0, #1
 80068b2:	d1c7      	bne.n	8006844 <__sflush_r+0x34>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c4      	beq.n	8006844 <__sflush_r+0x34>
 80068ba:	2b1d      	cmp	r3, #29
 80068bc:	d001      	beq.n	80068c2 <__sflush_r+0xb2>
 80068be:	2b16      	cmp	r3, #22
 80068c0:	d101      	bne.n	80068c6 <__sflush_r+0xb6>
 80068c2:	602f      	str	r7, [r5, #0]
 80068c4:	e7b1      	b.n	800682a <__sflush_r+0x1a>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	e7ad      	b.n	800682c <__sflush_r+0x1c>
 80068d0:	690f      	ldr	r7, [r1, #16]
 80068d2:	2f00      	cmp	r7, #0
 80068d4:	d0a9      	beq.n	800682a <__sflush_r+0x1a>
 80068d6:	0793      	lsls	r3, r2, #30
 80068d8:	bf18      	it	ne
 80068da:	2300      	movne	r3, #0
 80068dc:	680e      	ldr	r6, [r1, #0]
 80068de:	bf08      	it	eq
 80068e0:	694b      	ldreq	r3, [r1, #20]
 80068e2:	eba6 0807 	sub.w	r8, r6, r7
 80068e6:	600f      	str	r7, [r1, #0]
 80068e8:	608b      	str	r3, [r1, #8]
 80068ea:	f1b8 0f00 	cmp.w	r8, #0
 80068ee:	dd9c      	ble.n	800682a <__sflush_r+0x1a>
 80068f0:	4643      	mov	r3, r8
 80068f2:	463a      	mov	r2, r7
 80068f4:	4628      	mov	r0, r5
 80068f6:	6a21      	ldr	r1, [r4, #32]
 80068f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068fa:	47b0      	blx	r6
 80068fc:	2800      	cmp	r0, #0
 80068fe:	dc06      	bgt.n	800690e <__sflush_r+0xfe>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	e78e      	b.n	800682c <__sflush_r+0x1c>
 800690e:	4407      	add	r7, r0
 8006910:	eba8 0800 	sub.w	r8, r8, r0
 8006914:	e7e9      	b.n	80068ea <__sflush_r+0xda>
 8006916:	bf00      	nop
 8006918:	20400001 	.word	0x20400001

0800691c <_fflush_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	690b      	ldr	r3, [r1, #16]
 8006920:	4605      	mov	r5, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b913      	cbnz	r3, 800692c <_fflush_r+0x10>
 8006926:	2500      	movs	r5, #0
 8006928:	4628      	mov	r0, r5
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	b118      	cbz	r0, 8006936 <_fflush_r+0x1a>
 800692e:	6983      	ldr	r3, [r0, #24]
 8006930:	b90b      	cbnz	r3, 8006936 <_fflush_r+0x1a>
 8006932:	f000 f887 	bl	8006a44 <__sinit>
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <_fflush_r+0x6c>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d11b      	bne.n	8006974 <_fflush_r+0x58>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0ef      	beq.n	8006926 <_fflush_r+0xa>
 8006946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006948:	07d0      	lsls	r0, r2, #31
 800694a:	d404      	bmi.n	8006956 <_fflush_r+0x3a>
 800694c:	0599      	lsls	r1, r3, #22
 800694e:	d402      	bmi.n	8006956 <_fflush_r+0x3a>
 8006950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006952:	f000 f915 	bl	8006b80 <__retarget_lock_acquire_recursive>
 8006956:	4628      	mov	r0, r5
 8006958:	4621      	mov	r1, r4
 800695a:	f7ff ff59 	bl	8006810 <__sflush_r>
 800695e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006960:	4605      	mov	r5, r0
 8006962:	07da      	lsls	r2, r3, #31
 8006964:	d4e0      	bmi.n	8006928 <_fflush_r+0xc>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d4dd      	bmi.n	8006928 <_fflush_r+0xc>
 800696c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696e:	f000 f908 	bl	8006b82 <__retarget_lock_release_recursive>
 8006972:	e7d9      	b.n	8006928 <_fflush_r+0xc>
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <_fflush_r+0x70>)
 8006976:	429c      	cmp	r4, r3
 8006978:	d101      	bne.n	800697e <_fflush_r+0x62>
 800697a:	68ac      	ldr	r4, [r5, #8]
 800697c:	e7df      	b.n	800693e <_fflush_r+0x22>
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <_fflush_r+0x74>)
 8006980:	429c      	cmp	r4, r3
 8006982:	bf08      	it	eq
 8006984:	68ec      	ldreq	r4, [r5, #12]
 8006986:	e7da      	b.n	800693e <_fflush_r+0x22>
 8006988:	08008184 	.word	0x08008184
 800698c:	080081a4 	.word	0x080081a4
 8006990:	08008164 	.word	0x08008164

08006994 <std>:
 8006994:	2300      	movs	r3, #0
 8006996:	b510      	push	{r4, lr}
 8006998:	4604      	mov	r4, r0
 800699a:	e9c0 3300 	strd	r3, r3, [r0]
 800699e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069a2:	6083      	str	r3, [r0, #8]
 80069a4:	8181      	strh	r1, [r0, #12]
 80069a6:	6643      	str	r3, [r0, #100]	; 0x64
 80069a8:	81c2      	strh	r2, [r0, #14]
 80069aa:	6183      	str	r3, [r0, #24]
 80069ac:	4619      	mov	r1, r3
 80069ae:	2208      	movs	r2, #8
 80069b0:	305c      	adds	r0, #92	; 0x5c
 80069b2:	f7fd fad9 	bl	8003f68 <memset>
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <std+0x38>)
 80069b8:	6224      	str	r4, [r4, #32]
 80069ba:	6263      	str	r3, [r4, #36]	; 0x24
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <std+0x3c>)
 80069be:	62a3      	str	r3, [r4, #40]	; 0x28
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <std+0x40>)
 80069c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069c4:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <std+0x44>)
 80069c6:	6323      	str	r3, [r4, #48]	; 0x30
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	bf00      	nop
 80069cc:	08006ce5 	.word	0x08006ce5
 80069d0:	08006d07 	.word	0x08006d07
 80069d4:	08006d3f 	.word	0x08006d3f
 80069d8:	08006d63 	.word	0x08006d63

080069dc <_cleanup_r>:
 80069dc:	4901      	ldr	r1, [pc, #4]	; (80069e4 <_cleanup_r+0x8>)
 80069de:	f000 b8af 	b.w	8006b40 <_fwalk_reent>
 80069e2:	bf00      	nop
 80069e4:	0800691d 	.word	0x0800691d

080069e8 <__sfmoreglue>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	2568      	movs	r5, #104	; 0x68
 80069ec:	1e4a      	subs	r2, r1, #1
 80069ee:	4355      	muls	r5, r2
 80069f0:	460e      	mov	r6, r1
 80069f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069f6:	f7ff fa89 	bl	8005f0c <_malloc_r>
 80069fa:	4604      	mov	r4, r0
 80069fc:	b140      	cbz	r0, 8006a10 <__sfmoreglue+0x28>
 80069fe:	2100      	movs	r1, #0
 8006a00:	e9c0 1600 	strd	r1, r6, [r0]
 8006a04:	300c      	adds	r0, #12
 8006a06:	60a0      	str	r0, [r4, #8]
 8006a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a0c:	f7fd faac 	bl	8003f68 <memset>
 8006a10:	4620      	mov	r0, r4
 8006a12:	bd70      	pop	{r4, r5, r6, pc}

08006a14 <__sfp_lock_acquire>:
 8006a14:	4801      	ldr	r0, [pc, #4]	; (8006a1c <__sfp_lock_acquire+0x8>)
 8006a16:	f000 b8b3 	b.w	8006b80 <__retarget_lock_acquire_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	200008d0 	.word	0x200008d0

08006a20 <__sfp_lock_release>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__sfp_lock_release+0x8>)
 8006a22:	f000 b8ae 	b.w	8006b82 <__retarget_lock_release_recursive>
 8006a26:	bf00      	nop
 8006a28:	200008d0 	.word	0x200008d0

08006a2c <__sinit_lock_acquire>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <__sinit_lock_acquire+0x8>)
 8006a2e:	f000 b8a7 	b.w	8006b80 <__retarget_lock_acquire_recursive>
 8006a32:	bf00      	nop
 8006a34:	200008cb 	.word	0x200008cb

08006a38 <__sinit_lock_release>:
 8006a38:	4801      	ldr	r0, [pc, #4]	; (8006a40 <__sinit_lock_release+0x8>)
 8006a3a:	f000 b8a2 	b.w	8006b82 <__retarget_lock_release_recursive>
 8006a3e:	bf00      	nop
 8006a40:	200008cb 	.word	0x200008cb

08006a44 <__sinit>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	4604      	mov	r4, r0
 8006a48:	f7ff fff0 	bl	8006a2c <__sinit_lock_acquire>
 8006a4c:	69a3      	ldr	r3, [r4, #24]
 8006a4e:	b11b      	cbz	r3, 8006a58 <__sinit+0x14>
 8006a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a54:	f7ff bff0 	b.w	8006a38 <__sinit_lock_release>
 8006a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a5e:	4b13      	ldr	r3, [pc, #76]	; (8006aac <__sinit+0x68>)
 8006a60:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <__sinit+0x6c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a66:	42a3      	cmp	r3, r4
 8006a68:	bf08      	it	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	bf08      	it	eq
 8006a70:	61a3      	streq	r3, [r4, #24]
 8006a72:	f000 f81f 	bl	8006ab4 <__sfp>
 8006a76:	6060      	str	r0, [r4, #4]
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f81b 	bl	8006ab4 <__sfp>
 8006a7e:	60a0      	str	r0, [r4, #8]
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 f817 	bl	8006ab4 <__sfp>
 8006a86:	2200      	movs	r2, #0
 8006a88:	2104      	movs	r1, #4
 8006a8a:	60e0      	str	r0, [r4, #12]
 8006a8c:	6860      	ldr	r0, [r4, #4]
 8006a8e:	f7ff ff81 	bl	8006994 <std>
 8006a92:	2201      	movs	r2, #1
 8006a94:	2109      	movs	r1, #9
 8006a96:	68a0      	ldr	r0, [r4, #8]
 8006a98:	f7ff ff7c 	bl	8006994 <std>
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	2112      	movs	r1, #18
 8006aa0:	68e0      	ldr	r0, [r4, #12]
 8006aa2:	f7ff ff77 	bl	8006994 <std>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61a3      	str	r3, [r4, #24]
 8006aaa:	e7d1      	b.n	8006a50 <__sinit+0xc>
 8006aac:	08007de0 	.word	0x08007de0
 8006ab0:	080069dd 	.word	0x080069dd

08006ab4 <__sfp>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	f7ff ffac 	bl	8006a14 <__sfp_lock_acquire>
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <__sfp+0x84>)
 8006abe:	681e      	ldr	r6, [r3, #0]
 8006ac0:	69b3      	ldr	r3, [r6, #24]
 8006ac2:	b913      	cbnz	r3, 8006aca <__sfp+0x16>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ffbd 	bl	8006a44 <__sinit>
 8006aca:	3648      	adds	r6, #72	; 0x48
 8006acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	d503      	bpl.n	8006adc <__sfp+0x28>
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	b30b      	cbz	r3, 8006b1c <__sfp+0x68>
 8006ad8:	6836      	ldr	r6, [r6, #0]
 8006ada:	e7f7      	b.n	8006acc <__sfp+0x18>
 8006adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ae0:	b9d5      	cbnz	r5, 8006b18 <__sfp+0x64>
 8006ae2:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <__sfp+0x88>)
 8006ae4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ae8:	60e3      	str	r3, [r4, #12]
 8006aea:	6665      	str	r5, [r4, #100]	; 0x64
 8006aec:	f000 f847 	bl	8006b7e <__retarget_lock_init_recursive>
 8006af0:	f7ff ff96 	bl	8006a20 <__sfp_lock_release>
 8006af4:	2208      	movs	r2, #8
 8006af6:	4629      	mov	r1, r5
 8006af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b00:	6025      	str	r5, [r4, #0]
 8006b02:	61a5      	str	r5, [r4, #24]
 8006b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b08:	f7fd fa2e 	bl	8003f68 <memset>
 8006b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b14:	4620      	mov	r0, r4
 8006b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b18:	3468      	adds	r4, #104	; 0x68
 8006b1a:	e7d9      	b.n	8006ad0 <__sfp+0x1c>
 8006b1c:	2104      	movs	r1, #4
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f7ff ff62 	bl	80069e8 <__sfmoreglue>
 8006b24:	4604      	mov	r4, r0
 8006b26:	6030      	str	r0, [r6, #0]
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d1d5      	bne.n	8006ad8 <__sfp+0x24>
 8006b2c:	f7ff ff78 	bl	8006a20 <__sfp_lock_release>
 8006b30:	230c      	movs	r3, #12
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	e7ee      	b.n	8006b14 <__sfp+0x60>
 8006b36:	bf00      	nop
 8006b38:	08007de0 	.word	0x08007de0
 8006b3c:	ffff0001 	.word	0xffff0001

08006b40 <_fwalk_reent>:
 8006b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b44:	4606      	mov	r6, r0
 8006b46:	4688      	mov	r8, r1
 8006b48:	2700      	movs	r7, #0
 8006b4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b52:	f1b9 0901 	subs.w	r9, r9, #1
 8006b56:	d505      	bpl.n	8006b64 <_fwalk_reent+0x24>
 8006b58:	6824      	ldr	r4, [r4, #0]
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	d1f7      	bne.n	8006b4e <_fwalk_reent+0xe>
 8006b5e:	4638      	mov	r0, r7
 8006b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b64:	89ab      	ldrh	r3, [r5, #12]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d907      	bls.n	8006b7a <_fwalk_reent+0x3a>
 8006b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	d003      	beq.n	8006b7a <_fwalk_reent+0x3a>
 8006b72:	4629      	mov	r1, r5
 8006b74:	4630      	mov	r0, r6
 8006b76:	47c0      	blx	r8
 8006b78:	4307      	orrs	r7, r0
 8006b7a:	3568      	adds	r5, #104	; 0x68
 8006b7c:	e7e9      	b.n	8006b52 <_fwalk_reent+0x12>

08006b7e <__retarget_lock_init_recursive>:
 8006b7e:	4770      	bx	lr

08006b80 <__retarget_lock_acquire_recursive>:
 8006b80:	4770      	bx	lr

08006b82 <__retarget_lock_release_recursive>:
 8006b82:	4770      	bx	lr

08006b84 <__swhatbuf_r>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	460e      	mov	r6, r1
 8006b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	461d      	mov	r5, r3
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	da07      	bge.n	8006ba6 <__swhatbuf_r+0x22>
 8006b96:	2300      	movs	r3, #0
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	89b3      	ldrh	r3, [r6, #12]
 8006b9c:	061a      	lsls	r2, r3, #24
 8006b9e:	d410      	bmi.n	8006bc2 <__swhatbuf_r+0x3e>
 8006ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba4:	e00e      	b.n	8006bc4 <__swhatbuf_r+0x40>
 8006ba6:	466a      	mov	r2, sp
 8006ba8:	f000 f902 	bl	8006db0 <_fstat_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	dbf2      	blt.n	8006b96 <__swhatbuf_r+0x12>
 8006bb0:	9a01      	ldr	r2, [sp, #4]
 8006bb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bba:	425a      	negs	r2, r3
 8006bbc:	415a      	adcs	r2, r3
 8006bbe:	602a      	str	r2, [r5, #0]
 8006bc0:	e7ee      	b.n	8006ba0 <__swhatbuf_r+0x1c>
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	b016      	add	sp, #88	; 0x58
 8006bca:	bd70      	pop	{r4, r5, r6, pc}

08006bcc <__smakebuf_r>:
 8006bcc:	898b      	ldrh	r3, [r1, #12]
 8006bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd0:	079d      	lsls	r5, r3, #30
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	d507      	bpl.n	8006be8 <__smakebuf_r+0x1c>
 8006bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	6123      	str	r3, [r4, #16]
 8006be0:	2301      	movs	r3, #1
 8006be2:	6163      	str	r3, [r4, #20]
 8006be4:	b002      	add	sp, #8
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	466a      	mov	r2, sp
 8006bea:	ab01      	add	r3, sp, #4
 8006bec:	f7ff ffca 	bl	8006b84 <__swhatbuf_r>
 8006bf0:	9900      	ldr	r1, [sp, #0]
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff f989 	bl	8005f0c <_malloc_r>
 8006bfa:	b948      	cbnz	r0, 8006c10 <__smakebuf_r+0x44>
 8006bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c00:	059a      	lsls	r2, r3, #22
 8006c02:	d4ef      	bmi.n	8006be4 <__smakebuf_r+0x18>
 8006c04:	f023 0303 	bic.w	r3, r3, #3
 8006c08:	f043 0302 	orr.w	r3, r3, #2
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	e7e3      	b.n	8006bd8 <__smakebuf_r+0xc>
 8006c10:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <__smakebuf_r+0x7c>)
 8006c12:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1c:	81a3      	strh	r3, [r4, #12]
 8006c1e:	9b00      	ldr	r3, [sp, #0]
 8006c20:	6120      	str	r0, [r4, #16]
 8006c22:	6163      	str	r3, [r4, #20]
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	b15b      	cbz	r3, 8006c40 <__smakebuf_r+0x74>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2e:	f000 f8d1 	bl	8006dd4 <_isatty_r>
 8006c32:	b128      	cbz	r0, 8006c40 <__smakebuf_r+0x74>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	89a0      	ldrh	r0, [r4, #12]
 8006c42:	4305      	orrs	r5, r0
 8006c44:	81a5      	strh	r5, [r4, #12]
 8006c46:	e7cd      	b.n	8006be4 <__smakebuf_r+0x18>
 8006c48:	080069dd 	.word	0x080069dd

08006c4c <_malloc_usable_size_r>:
 8006c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c50:	1f18      	subs	r0, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bfbc      	itt	lt
 8006c56:	580b      	ldrlt	r3, [r1, r0]
 8006c58:	18c0      	addlt	r0, r0, r3
 8006c5a:	4770      	bx	lr

08006c5c <_raise_r>:
 8006c5c:	291f      	cmp	r1, #31
 8006c5e:	b538      	push	{r3, r4, r5, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	d904      	bls.n	8006c70 <_raise_r+0x14>
 8006c66:	2316      	movs	r3, #22
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c72:	b112      	cbz	r2, 8006c7a <_raise_r+0x1e>
 8006c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c78:	b94b      	cbnz	r3, 8006c8e <_raise_r+0x32>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f830 	bl	8006ce0 <_getpid_r>
 8006c80:	462a      	mov	r2, r5
 8006c82:	4601      	mov	r1, r0
 8006c84:	4620      	mov	r0, r4
 8006c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c8a:	f000 b817 	b.w	8006cbc <_kill_r>
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d00a      	beq.n	8006ca8 <_raise_r+0x4c>
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	d103      	bne.n	8006c9e <_raise_r+0x42>
 8006c96:	2316      	movs	r3, #22
 8006c98:	6003      	str	r3, [r0, #0]
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	e7e7      	b.n	8006c6e <_raise_r+0x12>
 8006c9e:	2400      	movs	r4, #0
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ca6:	4798      	blx	r3
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e7e0      	b.n	8006c6e <_raise_r+0x12>

08006cac <raise>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <raise+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f7ff bfd3 	b.w	8006c5c <_raise_r>
 8006cb6:	bf00      	nop
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <_kill_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4d06      	ldr	r5, [pc, #24]	; (8006cdc <_kill_r+0x20>)
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	f7fb fb56 	bl	800237a <_kill>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d102      	bne.n	8006cd8 <_kill_r+0x1c>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	b103      	cbz	r3, 8006cd8 <_kill_r+0x1c>
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	bf00      	nop
 8006cdc:	200008c4 	.word	0x200008c4

08006ce0 <_getpid_r>:
 8006ce0:	f7fb bb44 	b.w	800236c <_getpid>

08006ce4 <__sread>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	f000 f894 	bl	8006e18 <_read_r>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	bfab      	itete	ge
 8006cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf8:	181b      	addge	r3, r3, r0
 8006cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cfe:	bfac      	ite	ge
 8006d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d02:	81a3      	strhlt	r3, [r4, #12]
 8006d04:	bd10      	pop	{r4, pc}

08006d06 <__swrite>:
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	4605      	mov	r5, r0
 8006d10:	05db      	lsls	r3, r3, #23
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	d505      	bpl.n	8006d24 <__swrite+0x1e>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d20:	f000 f868 	bl	8006df4 <_lseek_r>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	4632      	mov	r2, r6
 8006d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	4628      	mov	r0, r5
 8006d30:	463b      	mov	r3, r7
 8006d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3a:	f000 b817 	b.w	8006d6c <_write_r>

08006d3e <__sseek>:
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	460c      	mov	r4, r1
 8006d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d46:	f000 f855 	bl	8006df4 <_lseek_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	bf15      	itete	ne
 8006d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d5a:	81a3      	strheq	r3, [r4, #12]
 8006d5c:	bf18      	it	ne
 8006d5e:	81a3      	strhne	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__sclose>:
 8006d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d66:	f000 b813 	b.w	8006d90 <_close_r>
	...

08006d6c <_write_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	2200      	movs	r2, #0
 8006d76:	4d05      	ldr	r5, [pc, #20]	; (8006d8c <_write_r+0x20>)
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fb fb34 	bl	80023e8 <_write>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_write_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_write_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	200008c4 	.word	0x200008c4

08006d90 <_close_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	2300      	movs	r3, #0
 8006d94:	4d05      	ldr	r5, [pc, #20]	; (8006dac <_close_r+0x1c>)
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fb fb40 	bl	8002420 <_close>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_close_r+0x1a>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_close_r+0x1a>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200008c4 	.word	0x200008c4

08006db0 <_fstat_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	2300      	movs	r3, #0
 8006db4:	4d06      	ldr	r5, [pc, #24]	; (8006dd0 <_fstat_r+0x20>)
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	f7fb fb3a 	bl	8002436 <_fstat>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d102      	bne.n	8006dcc <_fstat_r+0x1c>
 8006dc6:	682b      	ldr	r3, [r5, #0]
 8006dc8:	b103      	cbz	r3, 8006dcc <_fstat_r+0x1c>
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	bf00      	nop
 8006dd0:	200008c4 	.word	0x200008c4

08006dd4 <_isatty_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4d05      	ldr	r5, [pc, #20]	; (8006df0 <_isatty_r+0x1c>)
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7fb fb38 	bl	8002454 <_isatty>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_isatty_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_isatty_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	200008c4 	.word	0x200008c4

08006df4 <_lseek_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4d05      	ldr	r5, [pc, #20]	; (8006e14 <_lseek_r+0x20>)
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f7fb fb30 	bl	8002468 <_lseek>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_lseek_r+0x1e>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_lseek_r+0x1e>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	200008c4 	.word	0x200008c4

08006e18 <_read_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	2200      	movs	r2, #0
 8006e22:	4d05      	ldr	r5, [pc, #20]	; (8006e38 <_read_r+0x20>)
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7fb fac1 	bl	80023ae <_read>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_read_r+0x1e>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_read_r+0x1e>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	200008c4 	.word	0x200008c4

08006e3c <pow>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	461f      	mov	r7, r3
 8006e42:	4680      	mov	r8, r0
 8006e44:	4689      	mov	r9, r1
 8006e46:	4616      	mov	r6, r2
 8006e48:	f000 f8a6 	bl	8006f98 <__ieee754_pow>
 8006e4c:	4b4d      	ldr	r3, [pc, #308]	; (8006f84 <pow+0x148>)
 8006e4e:	4604      	mov	r4, r0
 8006e50:	f993 3000 	ldrsb.w	r3, [r3]
 8006e54:	460d      	mov	r5, r1
 8006e56:	3301      	adds	r3, #1
 8006e58:	d015      	beq.n	8006e86 <pow+0x4a>
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fdd3 	bl	8000a0c <__aeabi_dcmpun>
 8006e66:	b970      	cbnz	r0, 8006e86 <pow+0x4a>
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	4649      	mov	r1, r9
 8006e70:	f7f9 fdcc 	bl	8000a0c <__aeabi_dcmpun>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	b148      	cbz	r0, 8006e8e <pow+0x52>
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fd93 	bl	80009a8 <__aeabi_dcmpeq>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d17b      	bne.n	8006f7e <pow+0x142>
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8e:	4640      	mov	r0, r8
 8006e90:	4649      	mov	r1, r9
 8006e92:	f7f9 fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8006e96:	b1e0      	cbz	r0, 8006ed2 <pow+0x96>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d16a      	bne.n	8006f7e <pow+0x142>
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	4639      	mov	r1, r7
 8006eac:	f000 fe39 	bl	8007b22 <finite>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d0e8      	beq.n	8006e86 <pow+0x4a>
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	f7f9 fd7e 	bl	80009bc <__aeabi_dcmplt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d0e0      	beq.n	8006e86 <pow+0x4a>
 8006ec4:	f7fd f826 	bl	8003f14 <__errno>
 8006ec8:	2321      	movs	r3, #33	; 0x21
 8006eca:	2400      	movs	r4, #0
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	4d2e      	ldr	r5, [pc, #184]	; (8006f88 <pow+0x14c>)
 8006ed0:	e7d9      	b.n	8006e86 <pow+0x4a>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f000 fe24 	bl	8007b22 <finite>
 8006eda:	bba8      	cbnz	r0, 8006f48 <pow+0x10c>
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	f000 fe1f 	bl	8007b22 <finite>
 8006ee4:	b380      	cbz	r0, 8006f48 <pow+0x10c>
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	4639      	mov	r1, r7
 8006eea:	f000 fe1a 	bl	8007b22 <finite>
 8006eee:	b358      	cbz	r0, 8006f48 <pow+0x10c>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	462b      	mov	r3, r5
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 fd88 	bl	8000a0c <__aeabi_dcmpun>
 8006efc:	b160      	cbz	r0, 8006f18 <pow+0xdc>
 8006efe:	f7fd f809 	bl	8003f14 <__errno>
 8006f02:	2321      	movs	r3, #33	; 0x21
 8006f04:	2200      	movs	r2, #0
 8006f06:	6003      	str	r3, [r0, #0]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f7f9 fc0d 	bl	800072c <__aeabi_ddiv>
 8006f12:	4604      	mov	r4, r0
 8006f14:	460d      	mov	r5, r1
 8006f16:	e7b6      	b.n	8006e86 <pow+0x4a>
 8006f18:	f7fc fffc 	bl	8003f14 <__errno>
 8006f1c:	2322      	movs	r3, #34	; 0x22
 8006f1e:	2200      	movs	r2, #0
 8006f20:	6003      	str	r3, [r0, #0]
 8006f22:	4649      	mov	r1, r9
 8006f24:	2300      	movs	r3, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7f9 fd48 	bl	80009bc <__aeabi_dcmplt>
 8006f2c:	2400      	movs	r4, #0
 8006f2e:	b148      	cbz	r0, 8006f44 <pow+0x108>
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f000 fe02 	bl	8007b3c <rint>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	f7f9 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d0c4      	beq.n	8006ece <pow+0x92>
 8006f44:	4d11      	ldr	r5, [pc, #68]	; (8006f8c <pow+0x150>)
 8006f46:	e79e      	b.n	8006e86 <pow+0x4a>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d096      	beq.n	8006e86 <pow+0x4a>
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f000 fde1 	bl	8007b22 <finite>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d090      	beq.n	8006e86 <pow+0x4a>
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f000 fddb 	bl	8007b22 <finite>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d08a      	beq.n	8006e86 <pow+0x4a>
 8006f70:	f7fc ffd0 	bl	8003f14 <__errno>
 8006f74:	2322      	movs	r3, #34	; 0x22
 8006f76:	2400      	movs	r4, #0
 8006f78:	2500      	movs	r5, #0
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	e783      	b.n	8006e86 <pow+0x4a>
 8006f7e:	2400      	movs	r4, #0
 8006f80:	4d03      	ldr	r5, [pc, #12]	; (8006f90 <pow+0x154>)
 8006f82:	e780      	b.n	8006e86 <pow+0x4a>
 8006f84:	200001dc 	.word	0x200001dc
 8006f88:	fff00000 	.word	0xfff00000
 8006f8c:	7ff00000 	.word	0x7ff00000
 8006f90:	3ff00000 	.word	0x3ff00000
 8006f94:	00000000 	.word	0x00000000

08006f98 <__ieee754_pow>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	b093      	sub	sp, #76	; 0x4c
 8006f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fa2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8006fa6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006faa:	ea55 0302 	orrs.w	r3, r5, r2
 8006fae:	4607      	mov	r7, r0
 8006fb0:	4688      	mov	r8, r1
 8006fb2:	f000 84bf 	beq.w	8007934 <__ieee754_pow+0x99c>
 8006fb6:	4b7e      	ldr	r3, [pc, #504]	; (80071b0 <__ieee754_pow+0x218>)
 8006fb8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	dc09      	bgt.n	8006fd8 <__ieee754_pow+0x40>
 8006fc4:	d103      	bne.n	8006fce <__ieee754_pow+0x36>
 8006fc6:	b978      	cbnz	r0, 8006fe8 <__ieee754_pow+0x50>
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	dd02      	ble.n	8006fd2 <__ieee754_pow+0x3a>
 8006fcc:	e00c      	b.n	8006fe8 <__ieee754_pow+0x50>
 8006fce:	429d      	cmp	r5, r3
 8006fd0:	dc02      	bgt.n	8006fd8 <__ieee754_pow+0x40>
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	d10e      	bne.n	8006ff4 <__ieee754_pow+0x5c>
 8006fd6:	b16a      	cbz	r2, 8006ff4 <__ieee754_pow+0x5c>
 8006fd8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006fdc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006fe0:	ea54 030a 	orrs.w	r3, r4, sl
 8006fe4:	f000 84a6 	beq.w	8007934 <__ieee754_pow+0x99c>
 8006fe8:	4872      	ldr	r0, [pc, #456]	; (80071b4 <__ieee754_pow+0x21c>)
 8006fea:	b013      	add	sp, #76	; 0x4c
 8006fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	f000 bd9e 	b.w	8007b30 <nan>
 8006ff4:	f1b9 0f00 	cmp.w	r9, #0
 8006ff8:	da39      	bge.n	800706e <__ieee754_pow+0xd6>
 8006ffa:	4b6f      	ldr	r3, [pc, #444]	; (80071b8 <__ieee754_pow+0x220>)
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	dc54      	bgt.n	80070aa <__ieee754_pow+0x112>
 8007000:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007004:	429d      	cmp	r5, r3
 8007006:	f340 84a6 	ble.w	8007956 <__ieee754_pow+0x9be>
 800700a:	152b      	asrs	r3, r5, #20
 800700c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007010:	2b14      	cmp	r3, #20
 8007012:	dd0f      	ble.n	8007034 <__ieee754_pow+0x9c>
 8007014:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007018:	fa22 f103 	lsr.w	r1, r2, r3
 800701c:	fa01 f303 	lsl.w	r3, r1, r3
 8007020:	4293      	cmp	r3, r2
 8007022:	f040 8498 	bne.w	8007956 <__ieee754_pow+0x9be>
 8007026:	f001 0101 	and.w	r1, r1, #1
 800702a:	f1c1 0302 	rsb	r3, r1, #2
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	b182      	cbz	r2, 8007054 <__ieee754_pow+0xbc>
 8007032:	e05e      	b.n	80070f2 <__ieee754_pow+0x15a>
 8007034:	2a00      	cmp	r2, #0
 8007036:	d15a      	bne.n	80070ee <__ieee754_pow+0x156>
 8007038:	f1c3 0314 	rsb	r3, r3, #20
 800703c:	fa45 f103 	asr.w	r1, r5, r3
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	42ab      	cmp	r3, r5
 8007046:	f040 8483 	bne.w	8007950 <__ieee754_pow+0x9b8>
 800704a:	f001 0101 	and.w	r1, r1, #1
 800704e:	f1c1 0302 	rsb	r3, r1, #2
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4b59      	ldr	r3, [pc, #356]	; (80071bc <__ieee754_pow+0x224>)
 8007056:	429d      	cmp	r5, r3
 8007058:	d130      	bne.n	80070bc <__ieee754_pow+0x124>
 800705a:	2e00      	cmp	r6, #0
 800705c:	f280 8474 	bge.w	8007948 <__ieee754_pow+0x9b0>
 8007060:	463a      	mov	r2, r7
 8007062:	4643      	mov	r3, r8
 8007064:	2000      	movs	r0, #0
 8007066:	4955      	ldr	r1, [pc, #340]	; (80071bc <__ieee754_pow+0x224>)
 8007068:	f7f9 fb60 	bl	800072c <__aeabi_ddiv>
 800706c:	e02f      	b.n	80070ce <__ieee754_pow+0x136>
 800706e:	2300      	movs	r3, #0
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	2a00      	cmp	r2, #0
 8007074:	d13d      	bne.n	80070f2 <__ieee754_pow+0x15a>
 8007076:	4b4e      	ldr	r3, [pc, #312]	; (80071b0 <__ieee754_pow+0x218>)
 8007078:	429d      	cmp	r5, r3
 800707a:	d1eb      	bne.n	8007054 <__ieee754_pow+0xbc>
 800707c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007080:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007084:	ea53 030a 	orrs.w	r3, r3, sl
 8007088:	f000 8454 	beq.w	8007934 <__ieee754_pow+0x99c>
 800708c:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <__ieee754_pow+0x228>)
 800708e:	429c      	cmp	r4, r3
 8007090:	dd0d      	ble.n	80070ae <__ieee754_pow+0x116>
 8007092:	2e00      	cmp	r6, #0
 8007094:	f280 8454 	bge.w	8007940 <__ieee754_pow+0x9a8>
 8007098:	f04f 0b00 	mov.w	fp, #0
 800709c:	f04f 0c00 	mov.w	ip, #0
 80070a0:	4658      	mov	r0, fp
 80070a2:	4661      	mov	r1, ip
 80070a4:	b013      	add	sp, #76	; 0x4c
 80070a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	2302      	movs	r3, #2
 80070ac:	e7e0      	b.n	8007070 <__ieee754_pow+0xd8>
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	daf2      	bge.n	8007098 <__ieee754_pow+0x100>
 80070b2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80070b6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80070ba:	e7f1      	b.n	80070a0 <__ieee754_pow+0x108>
 80070bc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80070c0:	d108      	bne.n	80070d4 <__ieee754_pow+0x13c>
 80070c2:	463a      	mov	r2, r7
 80070c4:	4643      	mov	r3, r8
 80070c6:	4638      	mov	r0, r7
 80070c8:	4641      	mov	r1, r8
 80070ca:	f7f9 fa05 	bl	80004d8 <__aeabi_dmul>
 80070ce:	4683      	mov	fp, r0
 80070d0:	468c      	mov	ip, r1
 80070d2:	e7e5      	b.n	80070a0 <__ieee754_pow+0x108>
 80070d4:	4b3b      	ldr	r3, [pc, #236]	; (80071c4 <__ieee754_pow+0x22c>)
 80070d6:	429e      	cmp	r6, r3
 80070d8:	d10b      	bne.n	80070f2 <__ieee754_pow+0x15a>
 80070da:	f1b9 0f00 	cmp.w	r9, #0
 80070de:	db08      	blt.n	80070f2 <__ieee754_pow+0x15a>
 80070e0:	4638      	mov	r0, r7
 80070e2:	4641      	mov	r1, r8
 80070e4:	b013      	add	sp, #76	; 0x4c
 80070e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	f000 bc6b 	b.w	80079c4 <__ieee754_sqrt>
 80070ee:	2300      	movs	r3, #0
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4638      	mov	r0, r7
 80070f4:	4641      	mov	r1, r8
 80070f6:	f000 fd11 	bl	8007b1c <fabs>
 80070fa:	4683      	mov	fp, r0
 80070fc:	468c      	mov	ip, r1
 80070fe:	f1ba 0f00 	cmp.w	sl, #0
 8007102:	d129      	bne.n	8007158 <__ieee754_pow+0x1c0>
 8007104:	b124      	cbz	r4, 8007110 <__ieee754_pow+0x178>
 8007106:	4b2d      	ldr	r3, [pc, #180]	; (80071bc <__ieee754_pow+0x224>)
 8007108:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800710c:	429a      	cmp	r2, r3
 800710e:	d123      	bne.n	8007158 <__ieee754_pow+0x1c0>
 8007110:	2e00      	cmp	r6, #0
 8007112:	da07      	bge.n	8007124 <__ieee754_pow+0x18c>
 8007114:	465a      	mov	r2, fp
 8007116:	4663      	mov	r3, ip
 8007118:	2000      	movs	r0, #0
 800711a:	4928      	ldr	r1, [pc, #160]	; (80071bc <__ieee754_pow+0x224>)
 800711c:	f7f9 fb06 	bl	800072c <__aeabi_ddiv>
 8007120:	4683      	mov	fp, r0
 8007122:	468c      	mov	ip, r1
 8007124:	f1b9 0f00 	cmp.w	r9, #0
 8007128:	daba      	bge.n	80070a0 <__ieee754_pow+0x108>
 800712a:	9b00      	ldr	r3, [sp, #0]
 800712c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007130:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007134:	4323      	orrs	r3, r4
 8007136:	d108      	bne.n	800714a <__ieee754_pow+0x1b2>
 8007138:	465a      	mov	r2, fp
 800713a:	4663      	mov	r3, ip
 800713c:	4658      	mov	r0, fp
 800713e:	4661      	mov	r1, ip
 8007140:	f7f9 f812 	bl	8000168 <__aeabi_dsub>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	e78e      	b.n	8007068 <__ieee754_pow+0xd0>
 800714a:	9b00      	ldr	r3, [sp, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d1a7      	bne.n	80070a0 <__ieee754_pow+0x108>
 8007150:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007154:	469c      	mov	ip, r3
 8007156:	e7a3      	b.n	80070a0 <__ieee754_pow+0x108>
 8007158:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800715c:	3b01      	subs	r3, #1
 800715e:	930c      	str	r3, [sp, #48]	; 0x30
 8007160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007162:	9b00      	ldr	r3, [sp, #0]
 8007164:	4313      	orrs	r3, r2
 8007166:	d104      	bne.n	8007172 <__ieee754_pow+0x1da>
 8007168:	463a      	mov	r2, r7
 800716a:	4643      	mov	r3, r8
 800716c:	4638      	mov	r0, r7
 800716e:	4641      	mov	r1, r8
 8007170:	e7e6      	b.n	8007140 <__ieee754_pow+0x1a8>
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <__ieee754_pow+0x230>)
 8007174:	429d      	cmp	r5, r3
 8007176:	f340 80f9 	ble.w	800736c <__ieee754_pow+0x3d4>
 800717a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800717e:	429d      	cmp	r5, r3
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <__ieee754_pow+0x228>)
 8007182:	dd09      	ble.n	8007198 <__ieee754_pow+0x200>
 8007184:	429c      	cmp	r4, r3
 8007186:	dc0c      	bgt.n	80071a2 <__ieee754_pow+0x20a>
 8007188:	2e00      	cmp	r6, #0
 800718a:	da85      	bge.n	8007098 <__ieee754_pow+0x100>
 800718c:	a306      	add	r3, pc, #24	; (adr r3, 80071a8 <__ieee754_pow+0x210>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	e798      	b.n	80070ca <__ieee754_pow+0x132>
 8007198:	429c      	cmp	r4, r3
 800719a:	dbf5      	blt.n	8007188 <__ieee754_pow+0x1f0>
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <__ieee754_pow+0x224>)
 800719e:	429c      	cmp	r4, r3
 80071a0:	dd14      	ble.n	80071cc <__ieee754_pow+0x234>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	dcf2      	bgt.n	800718c <__ieee754_pow+0x1f4>
 80071a6:	e777      	b.n	8007098 <__ieee754_pow+0x100>
 80071a8:	8800759c 	.word	0x8800759c
 80071ac:	7e37e43c 	.word	0x7e37e43c
 80071b0:	7ff00000 	.word	0x7ff00000
 80071b4:	08008158 	.word	0x08008158
 80071b8:	433fffff 	.word	0x433fffff
 80071bc:	3ff00000 	.word	0x3ff00000
 80071c0:	3fefffff 	.word	0x3fefffff
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	41e00000 	.word	0x41e00000
 80071cc:	4661      	mov	r1, ip
 80071ce:	2200      	movs	r2, #0
 80071d0:	4658      	mov	r0, fp
 80071d2:	4b61      	ldr	r3, [pc, #388]	; (8007358 <__ieee754_pow+0x3c0>)
 80071d4:	f7f8 ffc8 	bl	8000168 <__aeabi_dsub>
 80071d8:	a355      	add	r3, pc, #340	; (adr r3, 8007330 <__ieee754_pow+0x398>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	4604      	mov	r4, r0
 80071e0:	460d      	mov	r5, r1
 80071e2:	f7f9 f979 	bl	80004d8 <__aeabi_dmul>
 80071e6:	a354      	add	r3, pc, #336	; (adr r3, 8007338 <__ieee754_pow+0x3a0>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 f970 	bl	80004d8 <__aeabi_dmul>
 80071f8:	2200      	movs	r2, #0
 80071fa:	4682      	mov	sl, r0
 80071fc:	468b      	mov	fp, r1
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	4b56      	ldr	r3, [pc, #344]	; (800735c <__ieee754_pow+0x3c4>)
 8007204:	f7f9 f968 	bl	80004d8 <__aeabi_dmul>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	a14c      	add	r1, pc, #304	; (adr r1, 8007340 <__ieee754_pow+0x3a8>)
 800720e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007212:	f7f8 ffa9 	bl	8000168 <__aeabi_dsub>
 8007216:	4622      	mov	r2, r4
 8007218:	462b      	mov	r3, r5
 800721a:	f7f9 f95d 	bl	80004d8 <__aeabi_dmul>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	2000      	movs	r0, #0
 8007224:	494e      	ldr	r1, [pc, #312]	; (8007360 <__ieee754_pow+0x3c8>)
 8007226:	f7f8 ff9f 	bl	8000168 <__aeabi_dsub>
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	4680      	mov	r8, r0
 8007230:	4689      	mov	r9, r1
 8007232:	4620      	mov	r0, r4
 8007234:	4629      	mov	r1, r5
 8007236:	f7f9 f94f 	bl	80004d8 <__aeabi_dmul>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4640      	mov	r0, r8
 8007240:	4649      	mov	r1, r9
 8007242:	f7f9 f949 	bl	80004d8 <__aeabi_dmul>
 8007246:	a340      	add	r3, pc, #256	; (adr r3, 8007348 <__ieee754_pow+0x3b0>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 f944 	bl	80004d8 <__aeabi_dmul>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4650      	mov	r0, sl
 8007256:	4659      	mov	r1, fp
 8007258:	f7f8 ff86 	bl	8000168 <__aeabi_dsub>
 800725c:	f04f 0a00 	mov.w	sl, #0
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4604      	mov	r4, r0
 8007266:	460d      	mov	r5, r1
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f8 ff7e 	bl	800016c <__adddf3>
 8007270:	4632      	mov	r2, r6
 8007272:	463b      	mov	r3, r7
 8007274:	4650      	mov	r0, sl
 8007276:	468b      	mov	fp, r1
 8007278:	f7f8 ff76 	bl	8000168 <__aeabi_dsub>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4620      	mov	r0, r4
 8007282:	4629      	mov	r1, r5
 8007284:	f7f8 ff70 	bl	8000168 <__aeabi_dsub>
 8007288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800728c:	9b00      	ldr	r3, [sp, #0]
 800728e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007290:	3b01      	subs	r3, #1
 8007292:	4313      	orrs	r3, r2
 8007294:	f04f 0600 	mov.w	r6, #0
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	bf0c      	ite	eq
 800729e:	4b31      	ldreq	r3, [pc, #196]	; (8007364 <__ieee754_pow+0x3cc>)
 80072a0:	4b2d      	ldrne	r3, [pc, #180]	; (8007358 <__ieee754_pow+0x3c0>)
 80072a2:	4604      	mov	r4, r0
 80072a4:	460d      	mov	r5, r1
 80072a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072aa:	e9cd 2300 	strd	r2, r3, [sp]
 80072ae:	4632      	mov	r2, r6
 80072b0:	463b      	mov	r3, r7
 80072b2:	f7f8 ff59 	bl	8000168 <__aeabi_dsub>
 80072b6:	4652      	mov	r2, sl
 80072b8:	465b      	mov	r3, fp
 80072ba:	f7f9 f90d 	bl	80004d8 <__aeabi_dmul>
 80072be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c2:	4680      	mov	r8, r0
 80072c4:	4689      	mov	r9, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f9 f905 	bl	80004d8 <__aeabi_dmul>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4640      	mov	r0, r8
 80072d4:	4649      	mov	r1, r9
 80072d6:	f7f8 ff49 	bl	800016c <__adddf3>
 80072da:	4632      	mov	r2, r6
 80072dc:	463b      	mov	r3, r7
 80072de:	4680      	mov	r8, r0
 80072e0:	4689      	mov	r9, r1
 80072e2:	4650      	mov	r0, sl
 80072e4:	4659      	mov	r1, fp
 80072e6:	f7f9 f8f7 	bl	80004d8 <__aeabi_dmul>
 80072ea:	4604      	mov	r4, r0
 80072ec:	460d      	mov	r5, r1
 80072ee:	460b      	mov	r3, r1
 80072f0:	4602      	mov	r2, r0
 80072f2:	4649      	mov	r1, r9
 80072f4:	4640      	mov	r0, r8
 80072f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80072fa:	f7f8 ff37 	bl	800016c <__adddf3>
 80072fe:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <__ieee754_pow+0x3d0>)
 8007300:	4682      	mov	sl, r0
 8007302:	4299      	cmp	r1, r3
 8007304:	460f      	mov	r7, r1
 8007306:	460e      	mov	r6, r1
 8007308:	f340 82ed 	ble.w	80078e6 <__ieee754_pow+0x94e>
 800730c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007310:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007314:	4303      	orrs	r3, r0
 8007316:	f000 81e7 	beq.w	80076e8 <__ieee754_pow+0x750>
 800731a:	a30d      	add	r3, pc, #52	; (adr r3, 8007350 <__ieee754_pow+0x3b8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007324:	f7f9 f8d8 	bl	80004d8 <__aeabi_dmul>
 8007328:	a309      	add	r3, pc, #36	; (adr r3, 8007350 <__ieee754_pow+0x3b8>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e6cc      	b.n	80070ca <__ieee754_pow+0x132>
 8007330:	60000000 	.word	0x60000000
 8007334:	3ff71547 	.word	0x3ff71547
 8007338:	f85ddf44 	.word	0xf85ddf44
 800733c:	3e54ae0b 	.word	0x3e54ae0b
 8007340:	55555555 	.word	0x55555555
 8007344:	3fd55555 	.word	0x3fd55555
 8007348:	652b82fe 	.word	0x652b82fe
 800734c:	3ff71547 	.word	0x3ff71547
 8007350:	8800759c 	.word	0x8800759c
 8007354:	7e37e43c 	.word	0x7e37e43c
 8007358:	3ff00000 	.word	0x3ff00000
 800735c:	3fd00000 	.word	0x3fd00000
 8007360:	3fe00000 	.word	0x3fe00000
 8007364:	bff00000 	.word	0xbff00000
 8007368:	408fffff 	.word	0x408fffff
 800736c:	4bd4      	ldr	r3, [pc, #848]	; (80076c0 <__ieee754_pow+0x728>)
 800736e:	2200      	movs	r2, #0
 8007370:	ea09 0303 	and.w	r3, r9, r3
 8007374:	b943      	cbnz	r3, 8007388 <__ieee754_pow+0x3f0>
 8007376:	4658      	mov	r0, fp
 8007378:	4661      	mov	r1, ip
 800737a:	4bd2      	ldr	r3, [pc, #840]	; (80076c4 <__ieee754_pow+0x72c>)
 800737c:	f7f9 f8ac 	bl	80004d8 <__aeabi_dmul>
 8007380:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007384:	4683      	mov	fp, r0
 8007386:	460c      	mov	r4, r1
 8007388:	1523      	asrs	r3, r4, #20
 800738a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800738e:	4413      	add	r3, r2
 8007390:	930b      	str	r3, [sp, #44]	; 0x2c
 8007392:	4bcd      	ldr	r3, [pc, #820]	; (80076c8 <__ieee754_pow+0x730>)
 8007394:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007398:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800739c:	429c      	cmp	r4, r3
 800739e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073a2:	dd08      	ble.n	80073b6 <__ieee754_pow+0x41e>
 80073a4:	4bc9      	ldr	r3, [pc, #804]	; (80076cc <__ieee754_pow+0x734>)
 80073a6:	429c      	cmp	r4, r3
 80073a8:	f340 819c 	ble.w	80076e4 <__ieee754_pow+0x74c>
 80073ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073b2:	3301      	adds	r3, #1
 80073b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b6:	2600      	movs	r6, #0
 80073b8:	00f3      	lsls	r3, r6, #3
 80073ba:	930d      	str	r3, [sp, #52]	; 0x34
 80073bc:	4bc4      	ldr	r3, [pc, #784]	; (80076d0 <__ieee754_pow+0x738>)
 80073be:	4658      	mov	r0, fp
 80073c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073c8:	4629      	mov	r1, r5
 80073ca:	461a      	mov	r2, r3
 80073cc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80073d0:	4623      	mov	r3, r4
 80073d2:	f7f8 fec9 	bl	8000168 <__aeabi_dsub>
 80073d6:	46da      	mov	sl, fp
 80073d8:	462b      	mov	r3, r5
 80073da:	4652      	mov	r2, sl
 80073dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80073e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073e4:	f7f8 fec2 	bl	800016c <__adddf3>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	2000      	movs	r0, #0
 80073ee:	49b9      	ldr	r1, [pc, #740]	; (80076d4 <__ieee754_pow+0x73c>)
 80073f0:	f7f9 f99c 	bl	800072c <__aeabi_ddiv>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007400:	f7f9 f86a 	bl	80004d8 <__aeabi_dmul>
 8007404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007408:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800740c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007410:	2300      	movs	r3, #0
 8007412:	2200      	movs	r2, #0
 8007414:	46ab      	mov	fp, r5
 8007416:	106d      	asrs	r5, r5, #1
 8007418:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007422:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007426:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	4614      	mov	r4, r2
 8007430:	461d      	mov	r5, r3
 8007432:	f7f9 f851 	bl	80004d8 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800743e:	f7f8 fe93 	bl	8000168 <__aeabi_dsub>
 8007442:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	4620      	mov	r0, r4
 800744c:	4629      	mov	r1, r5
 800744e:	f7f8 fe8b 	bl	8000168 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4650      	mov	r0, sl
 8007458:	4659      	mov	r1, fp
 800745a:	f7f8 fe85 	bl	8000168 <__aeabi_dsub>
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	f7f9 f839 	bl	80004d8 <__aeabi_dmul>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f8 fe7b 	bl	8000168 <__aeabi_dsub>
 8007472:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007476:	f7f9 f82f 	bl	80004d8 <__aeabi_dmul>
 800747a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800747e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007482:	4610      	mov	r0, r2
 8007484:	4619      	mov	r1, r3
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	a37b      	add	r3, pc, #492	; (adr r3, 8007678 <__ieee754_pow+0x6e0>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	f7f9 f820 	bl	80004d8 <__aeabi_dmul>
 8007498:	a379      	add	r3, pc, #484	; (adr r3, 8007680 <__ieee754_pow+0x6e8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 fe65 	bl	800016c <__adddf3>
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	f7f9 f817 	bl	80004d8 <__aeabi_dmul>
 80074aa:	a377      	add	r3, pc, #476	; (adr r3, 8007688 <__ieee754_pow+0x6f0>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f8 fe5c 	bl	800016c <__adddf3>
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	f7f9 f80e 	bl	80004d8 <__aeabi_dmul>
 80074bc:	a374      	add	r3, pc, #464	; (adr r3, 8007690 <__ieee754_pow+0x6f8>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f8 fe53 	bl	800016c <__adddf3>
 80074c6:	4622      	mov	r2, r4
 80074c8:	462b      	mov	r3, r5
 80074ca:	f7f9 f805 	bl	80004d8 <__aeabi_dmul>
 80074ce:	a372      	add	r3, pc, #456	; (adr r3, 8007698 <__ieee754_pow+0x700>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f8 fe4a 	bl	800016c <__adddf3>
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	f7f8 fffc 	bl	80004d8 <__aeabi_dmul>
 80074e0:	a36f      	add	r3, pc, #444	; (adr r3, 80076a0 <__ieee754_pow+0x708>)
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f7f8 fe41 	bl	800016c <__adddf3>
 80074ea:	4622      	mov	r2, r4
 80074ec:	4606      	mov	r6, r0
 80074ee:	460f      	mov	r7, r1
 80074f0:	462b      	mov	r3, r5
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f8 ffef 	bl	80004d8 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f8 ffe9 	bl	80004d8 <__aeabi_dmul>
 8007506:	4604      	mov	r4, r0
 8007508:	460d      	mov	r5, r1
 800750a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800750e:	4642      	mov	r2, r8
 8007510:	464b      	mov	r3, r9
 8007512:	f7f8 fe2b 	bl	800016c <__adddf3>
 8007516:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800751a:	f7f8 ffdd 	bl	80004d8 <__aeabi_dmul>
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	f7f8 fe23 	bl	800016c <__adddf3>
 8007526:	4642      	mov	r2, r8
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	464b      	mov	r3, r9
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f8 ffd1 	bl	80004d8 <__aeabi_dmul>
 8007536:	2200      	movs	r2, #0
 8007538:	4b67      	ldr	r3, [pc, #412]	; (80076d8 <__ieee754_pow+0x740>)
 800753a:	4682      	mov	sl, r0
 800753c:	468b      	mov	fp, r1
 800753e:	f7f8 fe15 	bl	800016c <__adddf3>
 8007542:	4632      	mov	r2, r6
 8007544:	463b      	mov	r3, r7
 8007546:	f7f8 fe11 	bl	800016c <__adddf3>
 800754a:	9c04      	ldr	r4, [sp, #16]
 800754c:	460d      	mov	r5, r1
 800754e:	4622      	mov	r2, r4
 8007550:	460b      	mov	r3, r1
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f8 ffbf 	bl	80004d8 <__aeabi_dmul>
 800755a:	2200      	movs	r2, #0
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	4b5c      	ldr	r3, [pc, #368]	; (80076d8 <__ieee754_pow+0x740>)
 8007566:	f7f8 fdff 	bl	8000168 <__aeabi_dsub>
 800756a:	4652      	mov	r2, sl
 800756c:	465b      	mov	r3, fp
 800756e:	f7f8 fdfb 	bl	8000168 <__aeabi_dsub>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f8 fdf5 	bl	8000168 <__aeabi_dsub>
 800757e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007582:	f7f8 ffa9 	bl	80004d8 <__aeabi_dmul>
 8007586:	4622      	mov	r2, r4
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007590:	462b      	mov	r3, r5
 8007592:	f7f8 ffa1 	bl	80004d8 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fde5 	bl	800016c <__adddf3>
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4640      	mov	r0, r8
 80075ac:	4649      	mov	r1, r9
 80075ae:	f7f8 fddd 	bl	800016c <__adddf3>
 80075b2:	a33d      	add	r3, pc, #244	; (adr r3, 80076a8 <__ieee754_pow+0x710>)
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	9c04      	ldr	r4, [sp, #16]
 80075ba:	460d      	mov	r5, r1
 80075bc:	4620      	mov	r0, r4
 80075be:	f7f8 ff8b 	bl	80004d8 <__aeabi_dmul>
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f8 fdcb 	bl	8000168 <__aeabi_dsub>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f8 fdc5 	bl	8000168 <__aeabi_dsub>
 80075de:	a334      	add	r3, pc, #208	; (adr r3, 80076b0 <__ieee754_pow+0x718>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f8 ff78 	bl	80004d8 <__aeabi_dmul>
 80075e8:	a333      	add	r3, pc, #204	; (adr r3, 80076b8 <__ieee754_pow+0x720>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f8 ff6f 	bl	80004d8 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7f8 fdb3 	bl	800016c <__adddf3>
 8007606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007608:	4b34      	ldr	r3, [pc, #208]	; (80076dc <__ieee754_pow+0x744>)
 800760a:	4413      	add	r3, r2
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fdac 	bl	800016c <__adddf3>
 8007614:	4680      	mov	r8, r0
 8007616:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007618:	4689      	mov	r9, r1
 800761a:	f7f8 fef3 	bl	8000404 <__aeabi_i2d>
 800761e:	4604      	mov	r4, r0
 8007620:	460d      	mov	r5, r1
 8007622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007624:	4b2e      	ldr	r3, [pc, #184]	; (80076e0 <__ieee754_pow+0x748>)
 8007626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800762a:	4413      	add	r3, r2
 800762c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f7f8 fd9a 	bl	800016c <__adddf3>
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	f7f8 fd96 	bl	800016c <__adddf3>
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	f7f8 fd92 	bl	800016c <__adddf3>
 8007648:	f8dd a010 	ldr.w	sl, [sp, #16]
 800764c:	4622      	mov	r2, r4
 800764e:	462b      	mov	r3, r5
 8007650:	4650      	mov	r0, sl
 8007652:	468b      	mov	fp, r1
 8007654:	f7f8 fd88 	bl	8000168 <__aeabi_dsub>
 8007658:	4632      	mov	r2, r6
 800765a:	463b      	mov	r3, r7
 800765c:	f7f8 fd84 	bl	8000168 <__aeabi_dsub>
 8007660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007664:	f7f8 fd80 	bl	8000168 <__aeabi_dsub>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4640      	mov	r0, r8
 800766e:	4649      	mov	r1, r9
 8007670:	e608      	b.n	8007284 <__ieee754_pow+0x2ec>
 8007672:	bf00      	nop
 8007674:	f3af 8000 	nop.w
 8007678:	4a454eef 	.word	0x4a454eef
 800767c:	3fca7e28 	.word	0x3fca7e28
 8007680:	93c9db65 	.word	0x93c9db65
 8007684:	3fcd864a 	.word	0x3fcd864a
 8007688:	a91d4101 	.word	0xa91d4101
 800768c:	3fd17460 	.word	0x3fd17460
 8007690:	518f264d 	.word	0x518f264d
 8007694:	3fd55555 	.word	0x3fd55555
 8007698:	db6fabff 	.word	0xdb6fabff
 800769c:	3fdb6db6 	.word	0x3fdb6db6
 80076a0:	33333303 	.word	0x33333303
 80076a4:	3fe33333 	.word	0x3fe33333
 80076a8:	e0000000 	.word	0xe0000000
 80076ac:	3feec709 	.word	0x3feec709
 80076b0:	dc3a03fd 	.word	0xdc3a03fd
 80076b4:	3feec709 	.word	0x3feec709
 80076b8:	145b01f5 	.word	0x145b01f5
 80076bc:	be3e2fe0 	.word	0xbe3e2fe0
 80076c0:	7ff00000 	.word	0x7ff00000
 80076c4:	43400000 	.word	0x43400000
 80076c8:	0003988e 	.word	0x0003988e
 80076cc:	000bb679 	.word	0x000bb679
 80076d0:	080081c8 	.word	0x080081c8
 80076d4:	3ff00000 	.word	0x3ff00000
 80076d8:	40080000 	.word	0x40080000
 80076dc:	080081e8 	.word	0x080081e8
 80076e0:	080081d8 	.word	0x080081d8
 80076e4:	2601      	movs	r6, #1
 80076e6:	e667      	b.n	80073b8 <__ieee754_pow+0x420>
 80076e8:	a39d      	add	r3, pc, #628	; (adr r3, 8007960 <__ieee754_pow+0x9c8>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f8 fd3b 	bl	800016c <__adddf3>
 80076f6:	4622      	mov	r2, r4
 80076f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076fc:	462b      	mov	r3, r5
 80076fe:	4650      	mov	r0, sl
 8007700:	4639      	mov	r1, r7
 8007702:	f7f8 fd31 	bl	8000168 <__aeabi_dsub>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800770e:	f7f9 f973 	bl	80009f8 <__aeabi_dcmpgt>
 8007712:	2800      	cmp	r0, #0
 8007714:	f47f ae01 	bne.w	800731a <__ieee754_pow+0x382>
 8007718:	4aa5      	ldr	r2, [pc, #660]	; (80079b0 <__ieee754_pow+0xa18>)
 800771a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800771e:	4293      	cmp	r3, r2
 8007720:	f340 8103 	ble.w	800792a <__ieee754_pow+0x992>
 8007724:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007728:	2000      	movs	r0, #0
 800772a:	151b      	asrs	r3, r3, #20
 800772c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007730:	fa4a f303 	asr.w	r3, sl, r3
 8007734:	4433      	add	r3, r6
 8007736:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800773a:	4f9e      	ldr	r7, [pc, #632]	; (80079b4 <__ieee754_pow+0xa1c>)
 800773c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007740:	4117      	asrs	r7, r2
 8007742:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007746:	ea23 0107 	bic.w	r1, r3, r7
 800774a:	f1c2 0214 	rsb	r2, r2, #20
 800774e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007752:	460b      	mov	r3, r1
 8007754:	fa4a fa02 	asr.w	sl, sl, r2
 8007758:	2e00      	cmp	r6, #0
 800775a:	4602      	mov	r2, r0
 800775c:	4629      	mov	r1, r5
 800775e:	4620      	mov	r0, r4
 8007760:	bfb8      	it	lt
 8007762:	f1ca 0a00 	rsblt	sl, sl, #0
 8007766:	f7f8 fcff 	bl	8000168 <__aeabi_dsub>
 800776a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800776e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007772:	2400      	movs	r4, #0
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	f7f8 fcf8 	bl	800016c <__adddf3>
 800777c:	a37a      	add	r3, pc, #488	; (adr r3, 8007968 <__ieee754_pow+0x9d0>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	4620      	mov	r0, r4
 8007784:	460d      	mov	r5, r1
 8007786:	f7f8 fea7 	bl	80004d8 <__aeabi_dmul>
 800778a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	4620      	mov	r0, r4
 8007794:	4629      	mov	r1, r5
 8007796:	f7f8 fce7 	bl	8000168 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4640      	mov	r0, r8
 80077a0:	4649      	mov	r1, r9
 80077a2:	f7f8 fce1 	bl	8000168 <__aeabi_dsub>
 80077a6:	a372      	add	r3, pc, #456	; (adr r3, 8007970 <__ieee754_pow+0x9d8>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fe94 	bl	80004d8 <__aeabi_dmul>
 80077b0:	a371      	add	r3, pc, #452	; (adr r3, 8007978 <__ieee754_pow+0x9e0>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	4680      	mov	r8, r0
 80077b8:	4689      	mov	r9, r1
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f8 fe8b 	bl	80004d8 <__aeabi_dmul>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f8 fccf 	bl	800016c <__adddf3>
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f8 fcc7 	bl	800016c <__adddf3>
 80077de:	4632      	mov	r2, r6
 80077e0:	463b      	mov	r3, r7
 80077e2:	4680      	mov	r8, r0
 80077e4:	4689      	mov	r9, r1
 80077e6:	f7f8 fcbf 	bl	8000168 <__aeabi_dsub>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f8 fcb9 	bl	8000168 <__aeabi_dsub>
 80077f6:	4642      	mov	r2, r8
 80077f8:	4606      	mov	r6, r0
 80077fa:	460f      	mov	r7, r1
 80077fc:	464b      	mov	r3, r9
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f8 fe69 	bl	80004d8 <__aeabi_dmul>
 8007806:	a35e      	add	r3, pc, #376	; (adr r3, 8007980 <__ieee754_pow+0x9e8>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	f7f8 fe62 	bl	80004d8 <__aeabi_dmul>
 8007814:	a35c      	add	r3, pc, #368	; (adr r3, 8007988 <__ieee754_pow+0x9f0>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fca5 	bl	8000168 <__aeabi_dsub>
 800781e:	4622      	mov	r2, r4
 8007820:	462b      	mov	r3, r5
 8007822:	f7f8 fe59 	bl	80004d8 <__aeabi_dmul>
 8007826:	a35a      	add	r3, pc, #360	; (adr r3, 8007990 <__ieee754_pow+0x9f8>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fc9e 	bl	800016c <__adddf3>
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	f7f8 fe50 	bl	80004d8 <__aeabi_dmul>
 8007838:	a357      	add	r3, pc, #348	; (adr r3, 8007998 <__ieee754_pow+0xa00>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fc93 	bl	8000168 <__aeabi_dsub>
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	f7f8 fe47 	bl	80004d8 <__aeabi_dmul>
 800784a:	a355      	add	r3, pc, #340	; (adr r3, 80079a0 <__ieee754_pow+0xa08>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fc8c 	bl	800016c <__adddf3>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 fe3e 	bl	80004d8 <__aeabi_dmul>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	f7f8 fc80 	bl	8000168 <__aeabi_dsub>
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4640      	mov	r0, r8
 8007872:	4649      	mov	r1, r9
 8007874:	f7f8 fe30 	bl	80004d8 <__aeabi_dmul>
 8007878:	2200      	movs	r2, #0
 800787a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800787e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007882:	4620      	mov	r0, r4
 8007884:	4629      	mov	r1, r5
 8007886:	f7f8 fc6f 	bl	8000168 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007892:	f7f8 ff4b 	bl	800072c <__aeabi_ddiv>
 8007896:	4632      	mov	r2, r6
 8007898:	4604      	mov	r4, r0
 800789a:	460d      	mov	r5, r1
 800789c:	463b      	mov	r3, r7
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f8 fe19 	bl	80004d8 <__aeabi_dmul>
 80078a6:	4632      	mov	r2, r6
 80078a8:	463b      	mov	r3, r7
 80078aa:	f7f8 fc5f 	bl	800016c <__adddf3>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4620      	mov	r0, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f8 fc57 	bl	8000168 <__aeabi_dsub>
 80078ba:	4642      	mov	r2, r8
 80078bc:	464b      	mov	r3, r9
 80078be:	f7f8 fc53 	bl	8000168 <__aeabi_dsub>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	2000      	movs	r0, #0
 80078c8:	493b      	ldr	r1, [pc, #236]	; (80079b8 <__ieee754_pow+0xa20>)
 80078ca:	f7f8 fc4d 	bl	8000168 <__aeabi_dsub>
 80078ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80078d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80078d6:	da2b      	bge.n	8007930 <__ieee754_pow+0x998>
 80078d8:	4652      	mov	r2, sl
 80078da:	f000 f9b9 	bl	8007c50 <scalbn>
 80078de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e2:	f7ff bbf2 	b.w	80070ca <__ieee754_pow+0x132>
 80078e6:	4b35      	ldr	r3, [pc, #212]	; (80079bc <__ieee754_pow+0xa24>)
 80078e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80078ec:	429f      	cmp	r7, r3
 80078ee:	f77f af13 	ble.w	8007718 <__ieee754_pow+0x780>
 80078f2:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <__ieee754_pow+0xa28>)
 80078f4:	440b      	add	r3, r1
 80078f6:	4303      	orrs	r3, r0
 80078f8:	d00b      	beq.n	8007912 <__ieee754_pow+0x97a>
 80078fa:	a32b      	add	r3, pc, #172	; (adr r3, 80079a8 <__ieee754_pow+0xa10>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007904:	f7f8 fde8 	bl	80004d8 <__aeabi_dmul>
 8007908:	a327      	add	r3, pc, #156	; (adr r3, 80079a8 <__ieee754_pow+0xa10>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7ff bbdc 	b.w	80070ca <__ieee754_pow+0x132>
 8007912:	4622      	mov	r2, r4
 8007914:	462b      	mov	r3, r5
 8007916:	f7f8 fc27 	bl	8000168 <__aeabi_dsub>
 800791a:	4642      	mov	r2, r8
 800791c:	464b      	mov	r3, r9
 800791e:	f7f9 f861 	bl	80009e4 <__aeabi_dcmpge>
 8007922:	2800      	cmp	r0, #0
 8007924:	f43f aef8 	beq.w	8007718 <__ieee754_pow+0x780>
 8007928:	e7e7      	b.n	80078fa <__ieee754_pow+0x962>
 800792a:	f04f 0a00 	mov.w	sl, #0
 800792e:	e71e      	b.n	800776e <__ieee754_pow+0x7d6>
 8007930:	4621      	mov	r1, r4
 8007932:	e7d4      	b.n	80078de <__ieee754_pow+0x946>
 8007934:	f04f 0b00 	mov.w	fp, #0
 8007938:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80079b8 <__ieee754_pow+0xa20>
 800793c:	f7ff bbb0 	b.w	80070a0 <__ieee754_pow+0x108>
 8007940:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007944:	f7ff bbac 	b.w	80070a0 <__ieee754_pow+0x108>
 8007948:	4638      	mov	r0, r7
 800794a:	4641      	mov	r1, r8
 800794c:	f7ff bbbf 	b.w	80070ce <__ieee754_pow+0x136>
 8007950:	9200      	str	r2, [sp, #0]
 8007952:	f7ff bb7f 	b.w	8007054 <__ieee754_pow+0xbc>
 8007956:	2300      	movs	r3, #0
 8007958:	f7ff bb69 	b.w	800702e <__ieee754_pow+0x96>
 800795c:	f3af 8000 	nop.w
 8007960:	652b82fe 	.word	0x652b82fe
 8007964:	3c971547 	.word	0x3c971547
 8007968:	00000000 	.word	0x00000000
 800796c:	3fe62e43 	.word	0x3fe62e43
 8007970:	fefa39ef 	.word	0xfefa39ef
 8007974:	3fe62e42 	.word	0x3fe62e42
 8007978:	0ca86c39 	.word	0x0ca86c39
 800797c:	be205c61 	.word	0xbe205c61
 8007980:	72bea4d0 	.word	0x72bea4d0
 8007984:	3e663769 	.word	0x3e663769
 8007988:	c5d26bf1 	.word	0xc5d26bf1
 800798c:	3ebbbd41 	.word	0x3ebbbd41
 8007990:	af25de2c 	.word	0xaf25de2c
 8007994:	3f11566a 	.word	0x3f11566a
 8007998:	16bebd93 	.word	0x16bebd93
 800799c:	3f66c16c 	.word	0x3f66c16c
 80079a0:	5555553e 	.word	0x5555553e
 80079a4:	3fc55555 	.word	0x3fc55555
 80079a8:	c2f8f359 	.word	0xc2f8f359
 80079ac:	01a56e1f 	.word	0x01a56e1f
 80079b0:	3fe00000 	.word	0x3fe00000
 80079b4:	000fffff 	.word	0x000fffff
 80079b8:	3ff00000 	.word	0x3ff00000
 80079bc:	4090cbff 	.word	0x4090cbff
 80079c0:	3f6f3400 	.word	0x3f6f3400

080079c4 <__ieee754_sqrt>:
 80079c4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007b18 <__ieee754_sqrt+0x154>
 80079c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80079d0:	460b      	mov	r3, r1
 80079d2:	4606      	mov	r6, r0
 80079d4:	460d      	mov	r5, r1
 80079d6:	460a      	mov	r2, r1
 80079d8:	4607      	mov	r7, r0
 80079da:	4604      	mov	r4, r0
 80079dc:	d10e      	bne.n	80079fc <__ieee754_sqrt+0x38>
 80079de:	4602      	mov	r2, r0
 80079e0:	f7f8 fd7a 	bl	80004d8 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4630      	mov	r0, r6
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fbbe 	bl	800016c <__adddf3>
 80079f0:	4606      	mov	r6, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	4630      	mov	r0, r6
 80079f6:	4629      	mov	r1, r5
 80079f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fc:	2900      	cmp	r1, #0
 80079fe:	dc0d      	bgt.n	8007a1c <__ieee754_sqrt+0x58>
 8007a00:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007a04:	ea5c 0707 	orrs.w	r7, ip, r7
 8007a08:	d0f4      	beq.n	80079f4 <__ieee754_sqrt+0x30>
 8007a0a:	b139      	cbz	r1, 8007a1c <__ieee754_sqrt+0x58>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f7f8 fbab 	bl	8000168 <__aeabi_dsub>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	f7f8 fe89 	bl	800072c <__aeabi_ddiv>
 8007a1a:	e7e9      	b.n	80079f0 <__ieee754_sqrt+0x2c>
 8007a1c:	1512      	asrs	r2, r2, #20
 8007a1e:	d074      	beq.n	8007b0a <__ieee754_sqrt+0x146>
 8007a20:	2000      	movs	r0, #0
 8007a22:	07d5      	lsls	r5, r2, #31
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8007a2c:	bf5e      	ittt	pl
 8007a2e:	0fe3      	lsrpl	r3, r4, #31
 8007a30:	0064      	lslpl	r4, r4, #1
 8007a32:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8007a36:	0fe3      	lsrs	r3, r4, #31
 8007a38:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007a3c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007a40:	2516      	movs	r5, #22
 8007a42:	4601      	mov	r1, r0
 8007a44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a48:	1076      	asrs	r6, r6, #1
 8007a4a:	0064      	lsls	r4, r4, #1
 8007a4c:	188f      	adds	r7, r1, r2
 8007a4e:	429f      	cmp	r7, r3
 8007a50:	bfde      	ittt	le
 8007a52:	1bdb      	suble	r3, r3, r7
 8007a54:	18b9      	addle	r1, r7, r2
 8007a56:	1880      	addle	r0, r0, r2
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	3d01      	subs	r5, #1
 8007a5c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007a60:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007a64:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007a68:	d1f0      	bne.n	8007a4c <__ieee754_sqrt+0x88>
 8007a6a:	462a      	mov	r2, r5
 8007a6c:	f04f 0e20 	mov.w	lr, #32
 8007a70:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007a74:	428b      	cmp	r3, r1
 8007a76:	eb07 0c05 	add.w	ip, r7, r5
 8007a7a:	dc02      	bgt.n	8007a82 <__ieee754_sqrt+0xbe>
 8007a7c:	d113      	bne.n	8007aa6 <__ieee754_sqrt+0xe2>
 8007a7e:	45a4      	cmp	ip, r4
 8007a80:	d811      	bhi.n	8007aa6 <__ieee754_sqrt+0xe2>
 8007a82:	f1bc 0f00 	cmp.w	ip, #0
 8007a86:	eb0c 0507 	add.w	r5, ip, r7
 8007a8a:	da43      	bge.n	8007b14 <__ieee754_sqrt+0x150>
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	db41      	blt.n	8007b14 <__ieee754_sqrt+0x150>
 8007a90:	f101 0801 	add.w	r8, r1, #1
 8007a94:	1a5b      	subs	r3, r3, r1
 8007a96:	4641      	mov	r1, r8
 8007a98:	45a4      	cmp	ip, r4
 8007a9a:	bf88      	it	hi
 8007a9c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007aa0:	eba4 040c 	sub.w	r4, r4, ip
 8007aa4:	443a      	add	r2, r7
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	f1be 0e01 	subs.w	lr, lr, #1
 8007aac:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007ab0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007ab4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007ab8:	d1dc      	bne.n	8007a74 <__ieee754_sqrt+0xb0>
 8007aba:	4323      	orrs	r3, r4
 8007abc:	d006      	beq.n	8007acc <__ieee754_sqrt+0x108>
 8007abe:	1c54      	adds	r4, r2, #1
 8007ac0:	bf0b      	itete	eq
 8007ac2:	4672      	moveq	r2, lr
 8007ac4:	3201      	addne	r2, #1
 8007ac6:	3001      	addeq	r0, #1
 8007ac8:	f022 0201 	bicne.w	r2, r2, #1
 8007acc:	1043      	asrs	r3, r0, #1
 8007ace:	07c1      	lsls	r1, r0, #31
 8007ad0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007ad4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ad8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007adc:	bf48      	it	mi
 8007ade:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007ae8:	e782      	b.n	80079f0 <__ieee754_sqrt+0x2c>
 8007aea:	0ae3      	lsrs	r3, r4, #11
 8007aec:	3915      	subs	r1, #21
 8007aee:	0564      	lsls	r4, r4, #21
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0fa      	beq.n	8007aea <__ieee754_sqrt+0x126>
 8007af4:	02de      	lsls	r6, r3, #11
 8007af6:	d50a      	bpl.n	8007b0e <__ieee754_sqrt+0x14a>
 8007af8:	f1c2 0020 	rsb	r0, r2, #32
 8007afc:	fa24 f000 	lsr.w	r0, r4, r0
 8007b00:	1e55      	subs	r5, r2, #1
 8007b02:	4094      	lsls	r4, r2
 8007b04:	4303      	orrs	r3, r0
 8007b06:	1b4a      	subs	r2, r1, r5
 8007b08:	e78a      	b.n	8007a20 <__ieee754_sqrt+0x5c>
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	e7f0      	b.n	8007af0 <__ieee754_sqrt+0x12c>
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	3201      	adds	r2, #1
 8007b12:	e7ef      	b.n	8007af4 <__ieee754_sqrt+0x130>
 8007b14:	4688      	mov	r8, r1
 8007b16:	e7bd      	b.n	8007a94 <__ieee754_sqrt+0xd0>
 8007b18:	7ff00000 	.word	0x7ff00000

08007b1c <fabs>:
 8007b1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007b20:	4770      	bx	lr

08007b22 <finite>:
 8007b22:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007b26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b2a:	0fc0      	lsrs	r0, r0, #31
 8007b2c:	4770      	bx	lr
	...

08007b30 <nan>:
 8007b30:	2000      	movs	r0, #0
 8007b32:	4901      	ldr	r1, [pc, #4]	; (8007b38 <nan+0x8>)
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	7ff80000 	.word	0x7ff80000

08007b3c <rint>:
 8007b3c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8007b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b42:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8007b46:	2f13      	cmp	r7, #19
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	4605      	mov	r5, r0
 8007b50:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007b54:	dc59      	bgt.n	8007c0a <rint+0xce>
 8007b56:	2f00      	cmp	r7, #0
 8007b58:	da2a      	bge.n	8007bb0 <rint+0x74>
 8007b5a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007b5e:	4301      	orrs	r1, r0
 8007b60:	d022      	beq.n	8007ba8 <rint+0x6c>
 8007b62:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8007b66:	4301      	orrs	r1, r0
 8007b68:	424d      	negs	r5, r1
 8007b6a:	430d      	orrs	r5, r1
 8007b6c:	4936      	ldr	r1, [pc, #216]	; (8007c48 <rint+0x10c>)
 8007b6e:	0c5c      	lsrs	r4, r3, #17
 8007b70:	0b2d      	lsrs	r5, r5, #12
 8007b72:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8007b76:	0464      	lsls	r4, r4, #17
 8007b78:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b7c:	ea45 0304 	orr.w	r3, r5, r4
 8007b80:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 faf0 	bl	800016c <__adddf3>
 8007b8c:	e9cd 0100 	strd	r0, r1, [sp]
 8007b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b94:	462b      	mov	r3, r5
 8007b96:	4622      	mov	r2, r4
 8007b98:	f7f8 fae6 	bl	8000168 <__aeabi_dsub>
 8007b9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ba0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4619      	mov	r1, r3
 8007bac:	b003      	add	sp, #12
 8007bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb0:	4926      	ldr	r1, [pc, #152]	; (8007c4c <rint+0x110>)
 8007bb2:	4139      	asrs	r1, r7
 8007bb4:	ea03 0001 	and.w	r0, r3, r1
 8007bb8:	4310      	orrs	r0, r2
 8007bba:	d0f5      	beq.n	8007ba8 <rint+0x6c>
 8007bbc:	084b      	lsrs	r3, r1, #1
 8007bbe:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8007bc2:	ea52 0501 	orrs.w	r5, r2, r1
 8007bc6:	d00c      	beq.n	8007be2 <rint+0xa6>
 8007bc8:	ea24 0303 	bic.w	r3, r4, r3
 8007bcc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007bd0:	2f13      	cmp	r7, #19
 8007bd2:	bf0c      	ite	eq
 8007bd4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007bd8:	2500      	movne	r5, #0
 8007bda:	fa44 f707 	asr.w	r7, r4, r7
 8007bde:	ea43 0407 	orr.w	r4, r3, r7
 8007be2:	4919      	ldr	r1, [pc, #100]	; (8007c48 <rint+0x10c>)
 8007be4:	4623      	mov	r3, r4
 8007be6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8007bea:	462a      	mov	r2, r5
 8007bec:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 faba 	bl	800016c <__adddf3>
 8007bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8007bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c00:	4622      	mov	r2, r4
 8007c02:	462b      	mov	r3, r5
 8007c04:	f7f8 fab0 	bl	8000168 <__aeabi_dsub>
 8007c08:	e7cc      	b.n	8007ba4 <rint+0x68>
 8007c0a:	2f33      	cmp	r7, #51	; 0x33
 8007c0c:	dd05      	ble.n	8007c1a <rint+0xde>
 8007c0e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8007c12:	d1c9      	bne.n	8007ba8 <rint+0x6c>
 8007c14:	f7f8 faaa 	bl	800016c <__adddf3>
 8007c18:	e7c4      	b.n	8007ba4 <rint+0x68>
 8007c1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c1e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8007c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8007c26:	4208      	tst	r0, r1
 8007c28:	d0be      	beq.n	8007ba8 <rint+0x6c>
 8007c2a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8007c2e:	bf18      	it	ne
 8007c30:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8007c34:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8007c38:	bf1e      	ittt	ne
 8007c3a:	ea20 0303 	bicne.w	r3, r0, r3
 8007c3e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8007c42:	ea43 050c 	orrne.w	r5, r3, ip
 8007c46:	e7cc      	b.n	8007be2 <rint+0xa6>
 8007c48:	080081f8 	.word	0x080081f8
 8007c4c:	000fffff 	.word	0x000fffff

08007c50 <scalbn>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007c56:	4604      	mov	r4, r0
 8007c58:	460d      	mov	r5, r1
 8007c5a:	4617      	mov	r7, r2
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	b996      	cbnz	r6, 8007c86 <scalbn+0x36>
 8007c60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c64:	4303      	orrs	r3, r0
 8007c66:	d039      	beq.n	8007cdc <scalbn+0x8c>
 8007c68:	4b35      	ldr	r3, [pc, #212]	; (8007d40 <scalbn+0xf0>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f7f8 fc34 	bl	80004d8 <__aeabi_dmul>
 8007c70:	4b34      	ldr	r3, [pc, #208]	; (8007d44 <scalbn+0xf4>)
 8007c72:	4604      	mov	r4, r0
 8007c74:	429f      	cmp	r7, r3
 8007c76:	460d      	mov	r5, r1
 8007c78:	da0f      	bge.n	8007c9a <scalbn+0x4a>
 8007c7a:	a32d      	add	r3, pc, #180	; (adr r3, 8007d30 <scalbn+0xe0>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fc2a 	bl	80004d8 <__aeabi_dmul>
 8007c84:	e006      	b.n	8007c94 <scalbn+0x44>
 8007c86:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007c8a:	4296      	cmp	r6, r2
 8007c8c:	d10a      	bne.n	8007ca4 <scalbn+0x54>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	f7f8 fa6c 	bl	800016c <__adddf3>
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	e020      	b.n	8007cdc <scalbn+0x8c>
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007ca0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007ca4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007ca8:	19b9      	adds	r1, r7, r6
 8007caa:	4291      	cmp	r1, r2
 8007cac:	dd0e      	ble.n	8007ccc <scalbn+0x7c>
 8007cae:	a322      	add	r3, pc, #136	; (adr r3, 8007d38 <scalbn+0xe8>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007cb8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007cbc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007cc0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007cc4:	4820      	ldr	r0, [pc, #128]	; (8007d48 <scalbn+0xf8>)
 8007cc6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007cca:	e7d9      	b.n	8007c80 <scalbn+0x30>
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	dd08      	ble.n	8007ce2 <scalbn+0x92>
 8007cd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cd8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007ce6:	da16      	bge.n	8007d16 <scalbn+0xc6>
 8007ce8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cec:	429f      	cmp	r7, r3
 8007cee:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007cf2:	dd08      	ble.n	8007d06 <scalbn+0xb6>
 8007cf4:	4c15      	ldr	r4, [pc, #84]	; (8007d4c <scalbn+0xfc>)
 8007cf6:	4814      	ldr	r0, [pc, #80]	; (8007d48 <scalbn+0xf8>)
 8007cf8:	f363 74df 	bfi	r4, r3, #31, #1
 8007cfc:	a30e      	add	r3, pc, #56	; (adr r3, 8007d38 <scalbn+0xe8>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	4621      	mov	r1, r4
 8007d04:	e7bc      	b.n	8007c80 <scalbn+0x30>
 8007d06:	4c12      	ldr	r4, [pc, #72]	; (8007d50 <scalbn+0x100>)
 8007d08:	4812      	ldr	r0, [pc, #72]	; (8007d54 <scalbn+0x104>)
 8007d0a:	f363 74df 	bfi	r4, r3, #31, #1
 8007d0e:	a308      	add	r3, pc, #32	; (adr r3, 8007d30 <scalbn+0xe0>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	e7f5      	b.n	8007d02 <scalbn+0xb2>
 8007d16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d1a:	3136      	adds	r1, #54	; 0x36
 8007d1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d20:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007d24:	4620      	mov	r0, r4
 8007d26:	4629      	mov	r1, r5
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <scalbn+0x108>)
 8007d2c:	e7a8      	b.n	8007c80 <scalbn+0x30>
 8007d2e:	bf00      	nop
 8007d30:	c2f8f359 	.word	0xc2f8f359
 8007d34:	01a56e1f 	.word	0x01a56e1f
 8007d38:	8800759c 	.word	0x8800759c
 8007d3c:	7e37e43c 	.word	0x7e37e43c
 8007d40:	43500000 	.word	0x43500000
 8007d44:	ffff3cb0 	.word	0xffff3cb0
 8007d48:	8800759c 	.word	0x8800759c
 8007d4c:	7e37e43c 	.word	0x7e37e43c
 8007d50:	01a56e1f 	.word	0x01a56e1f
 8007d54:	c2f8f359 	.word	0xc2f8f359
 8007d58:	3c900000 	.word	0x3c900000

08007d5c <_init>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr

08007d68 <_fini>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr
